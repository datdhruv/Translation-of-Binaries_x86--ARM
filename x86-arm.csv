x86,arm,code
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf04204000 e8d8feffff,90000000 911da000 97ffffb2,"    printf(""Enter a lowercase character :\n"");
"
488d45fb 4889c6 bf22204000 b800000000 e8e2feffff,91006fe0 aa0003e1 90000000 911e2000 97ffffb1,"    scanf(""%c"", &ch);
"
0fb645fb 0fbec0 83e820 8945fc,39406fe0 51008000 b9001fe0,"    no = ch-32;
"
8b45fc 89c6 bf25204000 b800000000 e8b1feffff,b9401fe1 90000000 911e4000 97ffffae,"    printf(""Letter in capital  : %c"", no);
"
b800000000,52800000,"    return 0;
"
c9 c3 662e0f1f840000000000,a8c27bfd d65f03c0,"}
"
55 4889e5 897dec,d10083ff b9000fe0,"{
"
c745fc00000000,b9001fff,"	int first = 0; 
"
c745f801000000,52800020 b9001be0,"	int second = 1;
"
c745f400000000,b90017ff,"	int current = 0;
"
c745f002000000 eb44 8345f001 8b45f0 3b45ec 7eb4,52800040 b90013e0 14000018 b94013e0 11000400 b90013e0 b94013e1 b9400fe0 6b00003f 54fffccd,"	for (int i = 2; i <= index; ++i) {
"
8b55fc 8b45f8 01c2 4863c2 4869c067666666 48c1e820 c1f802 89d1 c1f91f 29c8 8945f4 8b4df4 89c8 c1e002 01c8 01c0 29c2 8955f4,b9401fe1 b9401be0 0b000021 528ccce0 72acccc0 9b207c20 d360fc00 13027c02 131f7c20 4b000042 2a0203e0 531e7400 0b020000 531f7800 4b000020 b90017e0,"		current = (first + second) % 10;
"
8b45f8 8945fc,b9401be0 b9001fe0,"		first = second;
"
8b45f4 8945f8,b94017e0 b9001be0,"		second = current;
"
8b45f4,b94017e0,"	return (current);
"
5d c3,910083ff d65f03c0,"}
"
55 4889e5 4883ec30 897ddc,a9bc7bfd 910003fd b9001fe0,"{
"
8b45dc 83c001 4898 48c1e002 4889c7 e865feffff 488945f0,b9401fe0 11000400 93407c00 d37ef400 97ffff80 f9001be0,"	arr = (int *)malloc((index+1) * sizeof(int));
"
488b45f0 c70000000000,f9401be0 b900001f,"	arr[0] = 0;
"
488b45f0 4883c004 c70001000000,f9401be0 91001000 52800021 b9000001,"	arr[1] = 1;
"
c745fc02000000 eb71 8345fc01 8b45fc 3b45dc 7e87,52800040 b9003fe0 14000022 b9403fe0 11000400 b9003fe0 b9403fe1 b9401fe0 6b00003f 54fffb8d,"	for (int i = 2; i <= index; ++i) { // store only the last digit of each index
"
8b45fc 4898 48c1e002 488d50fc 488b45f0 4801d0 8b10 8b45fc 4898 48c1e002 488d48f8 488b45f0 4801c8 8b00 8d0c02 8b45fc 4898 488d148500000000 488b45f0 488d3402 4863c1 4869c067666666 48c1e820 89c2 c1fa02 89c8 c1f81f 29c2 89d0 c1e002 01d0 01c0 29c1 89ca 8916,b9803fe0 d37ef400 d1001000 f9401be1 8b000020 b9400001 b9803fe0 d37ef400 d1002000 f9401be2 8b000040 b9400000 0b000022 b9803fe0 d37ef400 f9401be1 8b000023 528ccce0 72acccc0 9b207c40 d360fc00 13027c01 131f7c40 4b000021 2a0103e0 531e7400 0b010000 531f7800 4b000041 b9000061,"		arr[i] = (arr[i - 1] + arr[i - 2]) % 10;
"
8b45dc 4898 488d148500000000 488b45f0 4801d0 8b00 8945ec,b9801fe0 d37ef400 f9401be1 8b000020 b9400000 b9002fe0,"	int res = arr[index];
"
8b45ec,b9402fe0,"	return (res);
"
c9 c3,a8c47bfd d65f03c0,"}
"
55 4889e5 4883ec20 897dec 488975e0,a9bd7bfd 910003fd b9001fe0 f9000be1,"{
"
c745fc00000000,b9002fff,"	int index = 0;
"
488d45fc 4889c6 bf04204000 b800000000 e88dfdffff,9100b3e0 aa0003e1 90000000 91240000 97ffff4a,"	scanf(""%d"", &index);
"
8b45fc 89c7 e879feffff 89c6 bf07204000 b800000000 e852fdffff,b9402fe0 97ffff8e 2a0003e1 90000000 91242000 97ffff48,"	printf(""%d\n"", last_digit_fib_optimized(index));
"
b800000000,52800000,"	return 0;
"
c9 c3 662e0f1f840000000000 90,a8c37bfd d65f03c0,}
55 4889e5 4883ec10 897dfc,a9be7bfd 910003fd b9001fe0,"void printFibonacci(int n){
"
837dfc00 7e50,b9401fe0 7100001f 5400042d,"    if(n>0){
"
8b15f32e0000 8b05e52e0000 01d0 8905e92e0000,b0000080 91010000 b9400001 b0000080 9100e000 b9400000 0b000021 b0000080 91011000 b9000001,"         n3 = n1 + n2;
"
8b05d72e0000 8905d92e0000,b0000080 9100e000 b9400001 b0000080 91010000 b9000001,"         n1 = n2;
"
8b05d72e0000 8905c52e0000,b0000080 91011000 b9400001 b0000080 9100e000 b9000001,"         n2 = n3;
"
8b05cb2e0000 89c6 bf08204000 b800000000 e8a6feffff,b0000080 91011000 b9400000 2a0003e1 90000000 911f6000 97ffff98,"         printf(""%d "",n3);
"
8b45fc 83e801 89c7 e89fffffff,b9401fe0 51000400 97ffffdb,"         printFibonacci(n-1);
"
90 c9 c3,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main(){
"
bf10204000 b800000000 e87ffeffff,90000000 911f8000 97ffff8d,"    printf(""Enter the number of elements: "");
"
488d45fc 4889c6 bf2f204000 b800000000 e879feffff,910073e0 aa0003e1 90000000 91200000 97ffff84,"    scanf(""%d"",&n);
"
bf32204000 b800000000 e85afeffff,90000000 91202000 97ffff85,"    printf(""Fibonacci Series: "");
"
ba01000000 be00000000 bf45204000 b800000000 e841feffff,52800022 52800001 90000000 91208000 97ffff80,"    printf(""%d %d "",0,1);
"
8b45fc 83e802 89c7 e83affffff,b9401fe0 51000800 97ffffc3,"    printFibonacci(n-2);
"
b800000000,52800000,"  return 0;
"
c9 c3 662e0f1f840000000000 0f1f00,a8c27bfd d65f03c0," }
"
55 4889e5 f20f1145e8 897de4 8975e0,d10083ff fd0007e0 b90007e0 b90003e1,"double convertTemp(double initValue, int initScale, int finalScale){
"
837de403 0f84ef000000 837de403 0f8f70010000 837de401 740b 837de402 7467 e95f010000,b94007e0 71000c1f 54000740 b94007e0 71000c1f 54000b4c b94007e0 7100041f 540000a0 b94007e0 7100081f 54000300 14000053,"    switch(initScale){
"
837de001 751b,b94003e0 7100041f 540000e1,"            if(finalScale == 1){
"
f20f104de8 f20f10053b100000 f20f58c1 f20f1145f8,fd4007e0 90000000 fd467c01 1e612800 fd000fe0,"                finalValue = initValue + 273.15;
"
e937010000 e9f6000000 90 eb04,14000045 14000038 d503201f 14000004,"            break;
"
837de002 0f852d010000,b94003e0 7100081f 54000841,"            else if(finalScale == 2){
"
f20f104de8 f20f10051e100000 f20f59c1 f20f10151a100000 660f28c8 f20f5eca f20f100512100000 f20f58c1 f20f1145f8,fd4007e1 1e645000 1e600821 1e629000 1e601820 d2e80800 9e670001 1e612800 fd000fe0,"                finalValue = (initValue * 9 / 5) + 32;
"
837de001 751b,b94003e0 7100041f 540000e1,"            if(finalScale == 1){
"
f20f1045e8 f20f100dd90f0000 f20f5cc1 f20f1145f8,fd4007e0 90000000 fd467c01 1e613800 fd000fe0,"                finalValue = initValue - 273.15;
"
e9d8000000 e987000000 90 eb01,14000031 14000021 d503201f 14000002,"            break;
"
837de002 0f85ce000000,b94003e0 7100081f 540005c1,"            else if(finalScale == 2){
"
f20f1045e8 f20f1015b40f0000 660f28c8 f20f5cca f20f1005ac0f0000 f20f59c1 f20f1015a80f0000 660f28c8 f20f5eca f20f1005a00f0000 f20f58c1 f20f1145f8,fd4007e0 90000000 fd467c01 1e613801 1e645000 1e600821 1e629000 1e601820 d2e80800 9e670001 1e612800 fd000fe0,"                finalValue = ((initValue - 273.15) * 9 / 5) + 32;
"
837de001 7534,b94003e0 7100041f 54000161,"            if(finalScale == 1){
"
f20f1045e8 f20f10157f0f0000 660f28c8 f20f5cca f20f1005670f0000 f20f59c1 f20f100d530f0000 f20f5ec1 f20f1145f8,fd4007e0 d2e80800 9e670001 1e613801 1e629000 1e600821 1e645000 1e601820 fd000fe0,"                finalValue = (initValue - 32) * 5 / 9;
"
eb50 eb06 90,14000016 14000005 d503201f,"            break;
"
837de002 754a,b94003e0 7100081f 54000261,"            else if(finalScale == 2){
"
f20f1045e8 f20f1015450f0000 660f28c8 f20f5cca f20f10052d0f0000 f20f59c1 f20f1015190f0000 660f28c8 f20f5eca f20f1005210f0000 f20f58c1 f20f1145f8,fd4007e0 d2e80800 9e670001 1e613801 1e629000 1e600821 1e645000 1e601820 d2c20000 f2e80e20 9e670001 1e612800 fd000fe0,"                finalValue = ((initValue - 32) * 5 / 9) + 273,15;
"
f20f1045f8 66480f7ec0,fd400fe0,"    return finalValue;
"
66480f6ec0 5d c3,910083ff d65f03c0,"}
"
55 4889e5 4883ec20,a9bd7bfd 910003fd,"int main(){
"
bf08204000 e834fdffff e9c4fdffff,90000000 912d2000 97ffff3c 17ffff7f,"        printf(""\n0 - Exit\n"");
"
bf18204000 e82afdffff,90000000 912d6000 97ffff39,"        printf(""1 - Convert from Celsius to Kelvin\n"");
"
bf40204000 e820fdffff,90000000 912e0000 97ffff36,"        printf(""2 - Convert from Celsius to Fahrenheit\n"");
"
bf68204000 e816fdffff,90000000 912ea000 97ffff33,"        printf(""3 - Convert from Kelvin to Fahrenheit\n"");
"
bf90204000 e80cfdffff,90000000 912f4000 97ffff30,"        printf(""4 - Convert from Kelvin to Celsius\n"");
"
bfb8204000 e802fdffff,90000000 912fe000 97ffff2d,"        printf(""5 - Convert from Fahrenheit to Celsius\n"");
"
bfe0204000 e8f8fcffff,90000000 91308000 97ffff2a,"        printf(""6 - Convert from Fahrenheit to Kelvin\n"");
"
bf06214000 b800000000 e8f9fcffff,90000000 91312000 97ffff2f,"        printf(""Select a number: "");
"
488d45f4 4889c6 bf18214000 b800000000 e8f3fcffff,910093e0 aa0003e1 90000000 91318000 97ffff26,"        scanf(""%d"",&option);
"
8b45f4 85c0 7514,b94027e0 7100001f 540000c1,"        if(!option){
"
bf1b214000 e8c2fcffff,90000000 9131a000 97ffff1c,"            printf(""Ending program\n"");
"
b800000000 e9b6010000,52800000 1400005e,"            return 0;
"
bf30214000 b800000000 e8b9fcffff,90000000 9131e000 97ffff1f,"        printf(""Please enter the initial value: "");
"
488d45e8 4889c6 bf51214000 b800000000 e8b3fcffff,910063e0 aa0003e1 90000000 91328000 97ffff16,"        scanf(""%lf"",&initialValue);
"
8b45f4 83f806 0f8776010000 89c0 488b04c5a0214000 ffe0,b94027e0 7100181f 540008c0 7100181f 540009cc 7100141f 54000700 7100141f 5400094c 7100101f 54000540 7100101f 540008cc 71000c1f 54000380 71000c1f 5400084c 7100041f 54000080 7100081f 54000180 1400003d,"        switch(option){
"
488b45e8 be01000000 bf01000000 66480f6ec0 e879fdffff 66480f7ec0 488945f8,fd400fe0 52800021 52800020 97ffff52 fd0017e0,"                finalValue = convertTemp(initialValue,1,1);
"
488b45f8 66480f6ec0 bf55214000 b801000000 e852fcffff,fd4017e0 90000000 9132a000 97fffefb,"                printf(""Valor em Kelvin: %.2lf"",finalValue);
"
e92c010000,14000033,"                break;
"
488b45e8 be02000000 bf01000000 66480f6ec0 e83bfdffff 66480f7ec0 488945f8,fd400fe0 52800041 52800020 97ffff48 fd0017e0,"                finalValue = convertTemp(initialValue,1,2);
"
488b45f8 66480f6ec0 bf6c214000 b801000000 e814fcffff,fd4017e0 90000000 91330000 97fffef1,"                printf(""Valor em Fahrenheit: %.2lf"",finalValue);
"
e9ee000000,14000029,"                break;
"
488b45e8 be01000000 bf02000000 66480f6ec0 e8fdfcffff 66480f7ec0 488945f8,fd400fe0 52800021 52800040 97ffff3e fd0017e0,"                finalValue = convertTemp(initialValue,2,1);
"
488b45f8 66480f6ec0 bf87214000 b801000000 e8d6fbffff,fd4017e0 90000000 91338000 97fffee7,"                printf(""Valor em Celsius: %.2lf"",finalValue);
"
e9b0000000,1400001f,"                break;
"
488b45e8 be02000000 bf02000000 66480f6ec0 e8bffcffff 66480f7ec0 488945f8,fd400fe0 52800041 52800040 97ffff34 fd0017e0,"                finalValue = convertTemp(initialValue,2,2);
"
488b45f8 66480f6ec0 bf6c214000 b801000000 e898fbffff,fd4017e0 90000000 91330000 97fffedd,"                printf(""Valor em Fahrenheit: %.2lf"",finalValue);
"
eb75,14000015,"                break;
"
488b45e8 be01000000 bf03000000 66480f6ec0 e884fcffff 66480f7ec0 488945f8,fd400fe0 52800021 52800060 97ffff2a fd0017e0,"                finalValue = convertTemp(initialValue,3,1);
"
488b45f8 66480f6ec0 bf87214000 b801000000 e85dfbffff,fd4017e0 90000000 91338000 97fffed3,"                printf(""Valor em Celsius: %.2lf"",finalValue);
"
eb3a,1400000b,"                break;
"
488b45e8 be01000000 bf03000000 66480f6ec0 e849fcffff 66480f7ec0 488945f8,fd400fe0 52800021 52800060 97ffff20 fd0017e0,"                finalValue = convertTemp(initialValue,3,1);
"
488b45f8 66480f6ec0 bf55214000 b801000000 e822fbffff,fd4017e0 90000000 9132a000 97fffec9,"                printf(""Valor em Kelvin: %.2lf"",finalValue);
"
90,d503201f,"                break;
"
bf0a000000 e8f7faffff,52800140 97fffeca,"        printf(""\n"");
"
c9 c3,a8c37bfd d65f03c0,}
55 4889e5 4883ec20,a9bd7bfd 910003fd,"int main() {
"
c745f003000000 c745ec04000000,52800060 b90023e0 52800080 b9001fe0,"    int r = 3, c = 4;
"
8b45f0 0faf45ec 4898 48c1e002 4889c7 e8dffeffff 488945e0,b94023e1 b9401fe0 1b007c20 93407c00 d37ef400 97ffffa3 f9000be0,"    int * arr = (int * ) malloc(r * c * sizeof(int));
"
c745f400000000,b90027ff,"    int i, j, count = 0;
"
c745fc00000000 eb43 8345fc01 8b45fc 3b45f0 7cb5,b9002fff 1400001b b9402fe0 11000400 b9002fe0 b9402fe1 b94023e0 6b00003f 54fffc6b,"    for (i = 0; i < r; i++)
"
c745f800000000 eb2e 8345f801 8b45f8 3b45ec 7cca,b9002bff 14000012 b9402be0 11000400 b9002be0 b9402be1 b9401fe0 6b00003f 54fffd8b,"        for (j = 0; j < c; j++)
"
8345f401 8b45fc 0faf45ec 4863d0 8b45f8 4898 4801d0 488d148500000000 488b45e0 4801c2 8b45f4 8902,b94027e0 11000400 b90027e0 b9402fe1 b9401fe0 1b007c20 93407c01 b9802be0 8b000020 d37ef400 f9400be1 8b000020 b94027e1 b9000001,"            (arr + i * c + j) = ++count;
"
c745fc00000000 eb4d 8345fc01 8b45fc 3b45f0 7cab,b9002fff 1400001b b9402fe0 11000400 b9002fe0 b9402fe1 b94023e0 6b00003f 54fffc6b,"    for (i = 0; i < r; i++)
"
c745f800000000 eb38 8345f801 8b45f8 3b45ec 7cc0,b9002bff 14000012 b9402be0 11000400 b9002be0 b9402be1 b9401fe0 6b00003f 54fffd8b,"        for (j = 0; j < c; j++)
"
8b45fc 0faf45ec 4863d0 8b45f8 4898 4801d0 488d148500000000 488b45e0 4801d0 8b00 89c6 bf04204000 b800000000 e82afeffff,b9402fe1 b9401fe0 1b007c20 93407c01 b9802be0 8b000020 d37ef400 f9400be1 8b000020 b9400000 2a0003e1 90000000 91206000 97ffff7b,"            printf(""%d "", *(arr + i * c + j));
"
b800000000,52800000,"    return 0;
"
c9 c3 662e0f1f840000000000 90,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf08204000 e8d8feffff,90000000 911dc000 97ffffb2,"	printf(""Enter the desired temperature in Celcius:\n"");
"
488d45f0 4889c6 bf32204000 b800000000 e8e2feffff,910043e0 aa0003e1 90000000 911e8000 97ffffb1,"	scanf(""%c"", &c);
"
f20f104df0 f20f1005d50e0000 f20f58c1 f20f1145f8,fd400be0 90000000 fd43e001 1e612800 fd000fe0,"	k = c + 273.15;
"
488b45f8 66480f6ec0 bf35204000 b801000000 e8a4feffff,fd400fe0 90000000 911ea000 97ffffac,"	printf(""Converted value: %f K\n"", k);
"
b800000000,52800000,"	return 0;
"
c9 c3 662e0f1f840000000000 0f1f00,a8c27bfd d65f03c0,"}
"
55 4889e5 4157 4156 4155 4154 53 4883ec78 4889e0 48898568ffffff,a9b17bfd 910003fd a90153f3 a9025bf5 a90363f7 a9046bf9 a90573fb 910003e0 aa0003fc,"{
"
c745c400000000 c745c000000000,b900e7bf b900e3bf,"    int n,i,j,sum1=0,sum2=0; //n denotes the number of rows and columns in the matrix arr.
"
488d45a4 4889c6 bf04204000 b800000000 e8cbfeffff,910313a0 aa0003e1 90000000 91288000 97ffffa7,"    scanf(""%d"", &n);
"
8b4da4 8b75a4 4863c1 4883e801 488945b8 4863c1 48898570ffffff 48c78578ffffff00000000 4863c1 488d1c8500000000 4863c6 4883e801 488945b0 4863c1 48894590 48c7459800000000 4863c6 48894580 48c7458800000000 4c8b4590 4c8b4d98 4c89ca 4c8b5580 4c8b5d88 4c89d0 480fafd0 4c89d8 4c89c7 480fafc7 488d3c02 4c89c0 49f7e2 4801d7 4889fa 4863c1 4989c6 41bf00000000 4863c6 4989c4 41bd00000000 4c89fa 490fafd4 4c89e8 490fafc6 488d3c02 4c89f0 49f7e4 4801d7 4889fa 4863d1 4863c6 480fafc2 488d148500000000 b810000000 4883e801 4801d0 bf10000000 ba00000000 48f7f7 486bc010 4829c4 4889e0 4883c003 48c1e802 48c1e002 488945a8,b940c7a1 b940c7a2 93407c20 d1000400 f9006fa0 93407c20 f90043a0 f90047bf a94817a4 aa0403e0 d37bfc00 aa0503e3 d37be863 f9005fa3 f9405fa3 aa030000 f9005fa0 aa0403e0 d37be800 f9005ba0 93407c20 d37ef413 93407c40 d1000400 f9006ba0 93407c20 aa0003fa d280001b 93407c40 aa0003f8 d2800019 9b187f43 9bd87f40 9b180360 9b190340 f9003ba3 f9003fa0 a94717a4 aa0403e0 d37bfc00 aa0503e3 d37be863 f90057a3 f94057a3 aa030000 f90057a0 aa0403e0 d37be800 f90053a0 93407c20 aa0003f6 d2800017 93407c40 aa0003f4 d2800015 9b147ec3 9bd47ec0 9b1402e0 9b1502c0 f90033a3 f90037a0 a94617a4 aa0403e0 d37bfc00 aa0503e3 d37be863 f9004fa3 f9404fa3 aa030000 f9004fa0 aa0403e0 d37be800 f9004ba0 93407c21 93407c40 9b007c20 d37ef400 91003c00 d344fc00 d37cec00 cb2063ff 910003e0 91000c00 d342fc00 d37ef400 f90067a0,"    int arr[n][n];
"
c745cc00000000 e908010000 8345cc01 8b45a4 3945cc 0f8cecfeffff,b900efbf 1400004a b940efa0 11000400 b900efa0 b940c7a0 b940efa1 6b00003f 54fff68b,"    for (i=0;i<n;i++)
"
c745c800000000 e9ec000000 8345c801 8b45a4 3945c8 0f8c08ffffff,b900ebbf 14000041 b940eba0 11000400 b900eba0 b940c7a0 b940eba1 6b00003f 54fff7ab,"        for (j=0;j<n;j++)
"
4889d9 48c1e902 8b45c8 4863d0 8b45cc 4898 480fafc1 4801d0 488d148500000000 488b45a8 4801d0 4889c6 bf07204000 b800000000 e870fdffff,d342fe60 b980eba1 b980efa2 9b007c40 8b000020 d37ef400 f94067a1 8b000020 aa0003e1 90000000 9128a000 97ffff41,"            scanf(""%d "", &arr[i][j]);
"
4889de 48c1ee02 488b45a8 8b55c8 4863ca 8b55cc 4863d2 480fafd6 4801ca 8b0490 83f89c 0f8c84000000 4889de 48c1ee02 488b45a8 8b55c8 4863ca 8b55cc 4863d2 480fafd6 4801ca 8b0490 83f864 7f5e,d342fe61 f94067a0 b980eba2 b980efa3 9b017c61 8b010041 b8617800 3101901f 5400052b d342fe61 f94067a0 b980eba2 b980efa3 9b017c61 8b010041 b8617800 7101901f 5400040c,"            if(arr[i][j]>=-100 && arr[i][j]<=100)
"
8b45cc 3b45c8 7524,b940efa1 b940eba0 6b00003f 54000161,"                if(i==j)
"
4889de 48c1ee02 488b45a8 8b55c8 4863ca 8b55cc 4863d2 480fafd6 4801ca 8b0490 0145c4,d342fe61 f94067a0 b980eba2 b980efa3 9b017c61 8b010041 b8617800 b940e7a1 0b000020 b900e7a0,"                    sum1+=arr[i][j];
"
8b45a4 83e801 2b45cc 3945c8 7524,b940c7a0 51000401 b940efa0 4b000020 b940eba1 6b00003f 54000161,"                if(j==(n-1-i))
"
4889de 48c1ee02 488b45a8 8b55c8 4863ca 8b55cc 4863d2 480fafd6 4801ca 8b0490 0145c0,d342fe61 f94067a0 b980eba2 b980efa3 9b017c61 8b010041 b8617800 b940e3a1 0b000020 b900e3a0,"                    sum2+=arr[i][j];
"
8b45c4 2b45c0 85c0 7919,b940e7a1 b940e3a0 4b000020 7100001f 5400012a,"    if((sum1-sum2)<0)
"
8b45c0 2b45c4 89c6 bf04204000 b800000000 e871fcffff eb17,b940e3a1 b940e7a0 4b000020 2a0003e1 90000000 91288000 97fffefa 14000008,"        printf(""%d"", (-((sum1)-(sum2))));
"
8b45c4 2b45c0 89c6 bf04204000 b800000000 e858fcffff,b940e7a1 b940e3a0 4b000020 2a0003e1 90000000 91288000 97fffef2,"        printf(""%d"", ((sum1)-(sum2)));
"
b800000000 488ba568ffffff,52800000 9100039f,"    return 0; 
"
488d65d8 5b 415c 415d 415e 415f 5d c3 662e0f1f840000000000 0f1f00,910003bf a94153f3 a9425bf5 a94363f7 a9446bf9 a94573fb a8cf7bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf04204000 b800000000 e8d3feffff,90000000 9120a000 97ffffba,"    printf(""Enter a year:"");
"
488d45fc 4889c6 bf12204000 b800000000 e8cdfeffff,910073e0 aa0003e1 90000000 9120e000 97ffffb1,"    scanf(""%d"",&y);
"
8b45fc 83e003 85c0 0f85a1000000,b9401fe0 12000400 7100001f 540005e1,"    if(y%4==0) 
"
8b55fc 4863c2 4869c01f85eb51 48c1e820 c1f805 89d1 c1f91f 29c8 6bc864 89d0 29c8 85c0 7565,b9401fe1 5290a3e0 72aa3d60 9b207c20 d360fc00 13057c02 131f7c20 4b000040 52800c82 1b027c00 4b000020 7100001f 54000381,"      if(y%100==0) //In case of century
"
8b55fc 4863c2 4869c01f85eb51 48c1e820 c1f807 89d1 c1f91f 29c8 69c890010000 89d0 29c8 85c0 751e,b9401fe1 5290a3e0 72aa3d60 9b207c20 d360fc00 13077c02 131f7c20 4b000040 52803202 1b027c00 4b000020 7100001f 54000101,"         if(y%400==0)
"
8b45fc 89c6 bf15204000 b800000000 e84cfeffff,b9401fe0 2a0003e1 90000000 91210000 97ffff92,"            printf(""\n%d is a leap year"",y);
"
bf00000000 e862feffff,52800000 97ffff7c,"            exit(0);
"
8b45fc 89c6 bf28204000 b800000000 e82efeffff,b9401fe0 2a0003e1 90000000 91216000 97ffff8b,"            printf(""\n%d is not a leap year"",y);
"
bf00000000 e844feffff,52800000 97ffff75,"            exit(0);
"
8b45fc 89c6 bf15204000 b800000000 e810feffff,b9401fe0 2a0003e1 90000000 91210000 97ffff84,"       printf(""\n%d is a leap year"",y);
"
eb14 90 c9 c3 0f1f8000000000,14000006 d503201f a8c27bfd d65f03c0,"}
"
8b45fc 89c6 bf28204000 b800000000 e8fafdffff,b9401fe0 2a0003e1 90000000 91216000 97ffff7e,"       printf(""\n%d is not a leap year"",y);
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main(){
"
bf04204000 e8d8feffff,90000000 911e2000 97ffffb2,"printf(""Enter an integer number\n"");
"
488d45fc 4889c6 bf1c204000 b800000000 e8e2feffff,910073e0 aa0003e1 90000000 911e8000 97ffffb1,"scanf(""%d"",&number);
"
8b45fc 83e001 85c0 7516,b9401fe0 12000000 7100001f 540000e1,"if (number %2 ==0)
"
8b45fc 89c6 bf1f204000 b800000000 e8b4feffff eb14,b9401fe0 2a0003e1 90000000 911ea000 97ffffac 14000006,"   printf(""The number %d is even\n"",number);
"
8b45fc 89c6 bf36204000 b800000000 e89efeffff,b9401fe0 2a0003e1 90000000 911f0000 97ffffa6,"   printf(""The number %d is odd\n"",number);
"
b800000000,52800000,"return 0;
"
c9 c3 0f1f8000000000,a8c27bfd d65f03c0,"}
"
55 4889e5 4881eca0000000,a9b57bfd 910003fd,"int main() {
"
48b8205468697320636f 48ba6e7461696e732068 48898560ffffff 48899568ffffff 48b86967686c79207365 48ba6e73697469766520 48898570ffffff 48899578ffffff 48b86d6573736167650a 48ba20636f6f7264696e 48894580 48895588 48b861746573203a2032 48ba332e3434352c2033 48894590 48895598 48b8342e3434330a2041 48ba6c6c206675727468 488945a0 488955a8 48b86572206d65737361 48ba676573204d555354 488945b0 488955b8 48b82062652073656e64 48ba207669610a20584f 488945c0 488955c8 48b85220656e63727970 48ba74696f6e206f6e6c 488945d0 488955d8 48b879202d204c6f6e67 48ba204c697665205265 488945e0 488955e8 48b865205265766f6c75 48ba74696f6e21210a00 488945ec 488955f4,90000000 91220001 910043e0 ad400420 ad000400 ad410420 ad010400 ad420420 ad020400 ad430420 ad030400 3dc02020 3d802000 3cc8c020 3c88c000,"	char sampleString[] = "" This contains highly sensitive message\n""          \
"
bf04204000 e8c1fdffff,90000000 91214000 97ffffa3,"	printf(""\nEncrypted String :\n"");
"
488d8560ffffff 4889c7 b800000000 e825000000,910043e0 94000009,"	encryptDecrypt(sampleString);
"
bf18204000 e8a3fdffff,90000000 9121a000 97ffff9e,"	printf(""\nDecyrpted String :\n"");
"
488d8560ffffff 4889c7 b800000000 e807000000,910043e0 94000004,"	encryptDecrypt(sampleString);
"
b800000000,52800000,"	return 0;
"
c9 c3,a8cb7bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8,a9bd7bfd 910003fd f9000fe0,"void encryptDecrypt(char inputString[]) {
"
c745fc00000000,b9002fff,"	int i = 0;
"
488b45e8 4889c7 e879fdffff 8945f8,f9400fe0 97ffff83 b9002be0,"	int len = strlen(inputString);
"
c745fc00000000 eb75 8345fc01 8b45fc 3b45f8 7c83,b9002fff 14000020 b9402fe0 11000400 b9002fe0 b9402fe1 b9402be0 6b00003f 54fffbcb,"	for (i = 0; i < len; i++) {
"
8b45fc 4863d0 488b45e8 4801d0 0fb630 8b45fc 4863c8 48baabaaaaaaaaaaaaaa 4889c8 48f7e2 48c1ea03 4889d0 4801c0 4801d0 48c1e002 4829c1 4889ca 0fb68a40404000 8b45fc 4863d0 488b45e8 4801d0 31ce 89f2 8810,b9802fe0 f9400fe1 8b000020 39400003 b9802fe2 b201f3e0 f2955560 9bc07c40 d343fc01 aa0103e0 d37ff800 8b010000 d37ef400 cb000041 b0000080 91010000 38616801 b9802fe0 f9400fe2 8b000040 4a010061 12001c21 39000001,"		inputString[i] = inputString[i] ^ XORkey[i % (sizeof(XORkey)/sizeof(char))];
"
8b45fc 4863d0 488b45e8 4801d0 0fb600 0fbec0 89c7 e8dcfcffff,b9802fe0 f9400fe1 8b000020 39400000 97ffff78,"		printf(""%c"", inputString[i]);
"
90 90 c9 c3 662e0f1f840000000000 6690,d503201f d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main(){
"
bf04204000 b800000000 e8e3feffff,90000000 911ec000 97ffffb6,"    printf(""Enter number of rows : "");
"
488d45f4 4889c6 bf1c204000 b800000000 e8ddfeffff,910053e0 aa0003e1 90000000 911f2000 97ffffad,"    scanf(""%d"" , &n);
"
c745fc01000000 eb32 8345fc01 8b45f4 3945fc 7ec6,52800020 b9001fe0 14000013 b9401fe0 11000400 b9001fe0 b94017e0 b9401fe1 6b00003f 54fffd6d,"    for(i=1;i<=n;i++){
"
c745f801000000 eb13 8345f801 8b45f8 3b45fc 7ee5,52800020 b9001be0 14000007 b9401be0 11000400 b9001be0 b9401be1 b9401fe0 6b00003f 54fffeed,"        for(j=1;j<=i;j++)
"
bf1f204000 b800000000 e8acfeffff,90000000 911f4000 97ffffa8,"            printf(""* "");
"
bf0a000000 e886feffff,52800140 97ffffa3,"        printf(""\n"");
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f00,a8c27bfd d65f03c0,"}
"
55 4889e5 897dec 8975e8,d10083ff b9000fe0 b9000be1,"    int gcd(int x, int y) {
"
c745fc00000000,b9001fff,"        int r = 0, a, b;
"
8b55e8 8b45ec 39c2 0f4dc2 8945f8,b9400fe0 b9400be2 b9400be1 6b00005f 1a80a020 b9001be0,"        a = (x > y) ? x : y; // a is greater number
"
8b55e8 8b45ec 39c2 0f4ec2 8945f4,b9400fe0 b9400be2 b9400be1 6b00005f 1a80d020 b90017e0,"        b = (x < y) ? x : y; // b is smaller number
"
8b45f4 8945fc,b94017e0 b9001fe0,"        r = b;
"
eb16 8b45f8 99 f77df4 89d0 85c0 75dd,1400000c b9401be0 b94017e1 1ac10c02 b94017e1 1b017c41 4b010000 7100001f 54fffdc1,"        while (a % b != 0) {
"
8b45f8 99 f77df4 8955fc,b9401be0 b94017e1 1ac10c02 b94017e1 1b017c41 4b010000 b9001fe0,"            r = a % b;
"
8b45f4 8945f8,b94017e0 b9001be0,"            a = b;
"
8b45fc 8945f4,b9401fe0 b90017e0,"            b = r;
"
8b45fc,b9401fe0,"        return r;
"
5d c3,910083ff d65f03c0,"    }     
"
55 4889e5 897dec 8975e8,d10083ff b9000fe0 b9000be1,"    int lcm(int x, int y) {
"
8b55e8 8b45ec 39c2 0f4dc2 8945fc,b9400fe0 b9400be2 b9400be1 6b00005f 1a80a020 b9001fe0,"        a = (x > y) ? x : y; // a is greater number
"
8b45fc 99 f77dec 89d0 85c0 7512 8b45fc 99 f77de8 89d0 85c0 7505 ebdb,b9401fe0 b9400fe1 1ac10c02 b9400fe1 1b017c41 4b010000 7100001f 54000161 b9401fe0 b9400be1 1ac10c02 b9400be1 1b017c41 4b010000 7100001f 54000061 17ffffeb,"            if (a % x == 0 && a % y == 0)
"
8b45fc eb06,b9401fe0 14000005,"                return a;
"
8345fc01,b9401fe0 11000400 b9001fe0,"            ++a;
"
5d c3,910083ff d65f03c0,"    }     
"
55 4889e5 4883ec20 897dec 488975e0,a9bd7bfd 910003fd b9001fe0 f9000be1,"    int main(int argc, char **argv) {
"
bf04204000 b800000000 e840feffff,90000000 91222000 97ffff6a,"        printf(""Enter the two numbers: "");
"
488d45fc 4889c6 bf1c204000 b800000000 e83afeffff,9100b3e0 aa0003e1 90000000 91228000 97ffff61,"        scanf(""%d"", &x);
"
488d45f8 4889c6 bf1c204000 b800000000 e824feffff,9100a3e0 aa0003e1 90000000 91228000 97ffff5c,"        scanf(""%d"", &y);
"
8b55f8 8b45fc 89d6 89c7 e80bffffff 89c6 bf1f204000 b800000000 e8f4fdffff,b9402fe0 b9402be1 97ffffa3 2a0003e1 90000000 9122a000 97ffff59,"        printf(""The GCD of two numbers is: %d"", gcd(x, y));
"
8b55f8 8b45fc 89d6 89c7 e848ffffff 89c6 bf3d204000 b800000000 e8d4fdffff,b9402fe0 b9402be1 97ffffc5 2a0003e1 90000000 91232000 97ffff52,"        printf(""The LCM of two numbers is: %d"", lcm(x, y));
"
b800000000,52800000,"        return 0;
"
c9 c3 662e0f1f840000000000 0f1f00,a8c37bfd d65f03c0,"    }
"
55 4889e5 4883ec20,a9bd7bfd 910003fd,"{
"
bf04204000 b800000000 e8d3feffff,90000000 9120c000 97ffffba,"    printf(""Enter number of numbers: "");
"
488d45ec 4889c6 bf1e204000 b800000000 e8ddfeffff,910073e0 aa0003e1 90000000 91214000 97ffffb1,"    scanf(""%d"", &size);
"
8b45ec 4898 48c1e002 4889c7 e8bcfeffff 488945f0,b9401fe0 93407c00 d37ef400 97ffffa1 f90013e0,"    array = malloc(size * sizeof(int));
"
8b45ec 89c6 bf21204000 b800000000 e894feffff,b9401fe0 2a0003e1 90000000 91216000 97ffffab,"    printf(""Enter %d numbers: \n"", size);
"
c745fc00000000 eb2a 8345fc01 8b45ec 3945fc 7cce,b9002fff 1400000c b9402fe0 11000400 b9002fe0 b9401fe0 b9402fe1 6b00003f 54fffe4b,"    for(i=0; i<size; i++)
"
8b45fc 4898 488d148500000000 488b45f0 4801d0 4889c6 bf1e204000 b800000000 e885feffff,b9802fe0 d37ef400 f94013e1 8b000020 aa0003e1 90000000 91214000 97ffff9d,"        scanf(""%d"", &array[i]);
"
488b45f0 8b00 8945f8,f94013e0 b9400000 b9002be0,"    max = array[0];
"
c745fc01000000 eb38 8345fc01 8b45ec 3945fc 7cc0,52800020 b9002fe0 14000012 b9402fe0 11000400 b9002fe0 b9401fe0 b9402fe1 6b00003f 54fffd8b,"    for(i=1; i<size; i++)
"
8b45fc 4898 488d148500000000 488b45f0 4801d0 8b00 3945f8 7d19,b9802fe0 d37ef400 f94013e1 8b000020 b9400000 b9402be1 6b00003f 540000ea,"        if(array[i] > max)
"
8b45fc 4898 488d148500000000 488b45f0 4801d0 8b00 8945f8,b9802fe0 d37ef400 f94013e1 8b000020 b9400000 b9002be0,"            max = array[i];
"
8b45f8 89c6 bf35204000 b800000000 e8f3fdffff,b9402be1 90000000 9121c000 97ffff7b,"    printf(""The largest number is %d\n"", max);
"
90 c9 c3,d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main(void) {
"
c745f416000000,528002c0 b90017e0,"    c = 22;
"
488d45f4 4889c6 bf04204000 b800000000 e8e5feffff,910053e0 aa0003e1 90000000 911dc000 97ffffae,"    printf(""Address of c: %p\n"", (void * ) & c);
"
8b45f4 89c6 bf16204000 b800000000 e8d1feffff,b94017e0 2a0003e1 90000000 911e2000 97ffffa9,"    printf(""Value of c: %d\n\n"", c);
"
488d45f4 488945f8,910053e0 f9000fe0,"    pc = & c;
"
488b45f8 4889c6 bf04204000 b800000000 e8b3feffff,f9400fe1 90000000 911dc000 97ffffa3,"    printf(""Address of c: %p\n"", (void * ) pc);
"
488b45f8 8b00 89c6 bf27204000 b800000000 e89cfeffff,f9400fe0 b9400000 2a0003e1 90000000 911e8000 97ffff9d,"    printf(""Content of c: %d\n\n"", * pc);
"
c745f40b000000,52800160 b90017e0,"    c = 11;
"
488b45f8 4889c6 bf04204000 b800000000 e87ffeffff,f9400fe1 90000000 911dc000 97ffff97,"    printf(""Address of c: %p\n"", (void * ) pc);
"
488b45f8 8b00 89c6 bf27204000 b800000000 e868feffff,f9400fe0 b9400000 2a0003e1 90000000 911e8000 97ffff91,"    printf(""Content of c: %d\n\n"", * pc);
"
488b45f8 c70002000000,f9400fe0 52800041 b9000001,"    * pc = 2;
"
488d45f4 4889c6 bf04204000 b800000000 e848feffff,910053e0 aa0003e1 90000000 911dc000 97ffff89,"    printf(""Address of c: %p\n"", (void * ) & c);
"
8b45f4 89c6 bf16204000 b800000000 e834feffff,b94017e0 2a0003e1 90000000 911e2000 97ffff84,"    printf(""Value of c: %d\n\n"", c);
"
b800000000,52800000,"    return 0;
"
c9 c3 662e0f1f840000000000 0f1f00,a8c27bfd d65f03c0,"}
"
55 4889e5 897dec 8975e8,d10083ff b9000fe0 b9000be1,"{
"
8b45ec 99 f77de8 8955ec,b9400fe0 b9400be1 1ac10c02 b9400be1 1b017c41 4b010000 b9000fe0,"	x %= y; 
"
c745fc01000000 eb1b 8345fc01 8b45fc 3b45e8 7cdd,52800020 b9001fe0 14000010 b9401fe0 11000400 b9001fe0 b9401fe1 b9400be0 6b00003f 54fffdcb,"	for(int i = 1; i < y; i++)
"
8b45ec 0faf45fc 99 f77de8 89d0 83f801 7505,b9400fe1 b9401fe0 1b007c20 b9400be1 1ac10c02 b9400be1 1b017c41 4b010000 7100041f 54000061,"		if((x * i) % y == 1)
"
8b45fc eb0c,b9401fe0 14000008,"			return i;
"
5d c3,910083ff d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf04204000 b800000000 e8a1feffff,90000000 911ee000 97ffff94,"	printf(""Enter a and m: "");
"
488d55f4 488d45f8 4889c6 bf14204000 b800000000 e897feffff,910053e1 910063e0 aa0103e2 aa0003e1 90000000 911f2000 97ffff89,"	scanf(""%d%d"", &a, &m);
"
8b55f4 8b45f8 89d6 89c7 e87effffff 8945fc,b9401be0 b94017e1 97ffffd0 b9001fe0,"	int ans = naiveModInv(a, m);
"
8b45fc 89c6 bf19204000 b800000000 e861feffff,b9401fe1 90000000 911f4000 97ffff85,"	printf(""%d\n"", ans);	
"
b800000000,52800000,"	return 0;
"
c9 c3 662e0f1f840000000000,a8c27bfd d65f03c0,"}
"
55 4889e5 4157 4156 4155 4154 53 4883ec78,a9b17bfd 910003fd a90153f3 a9025bf5 a90363f7 a9046bf9 f9002bfb,"{
"
488d4588 4889c6 bf04204000 b800000000 e8e3feffff,9102a3a0 aa0003e1 90000000 912ae000 97ffffab,"	int num;scanf(""%d"",&num);
"
e986020000 8b4588 8d50ff 895588 85c0 0f8569fdffff b800000000,140000ce b940aba0 51000401 b900aba1 7100001f 54ffe5e1 52800000,"	while(num--)
"
4889e0 4889c3,910003e0 aa0003f3,"	{
"
488d4584 4889c6 bf04204000 b800000000 e8c2feffff,910293a0 aa0003e1 90000000 912ae000 97ffffa3,"	    int n;scanf(""%d"",&n);
"
8b4584 4863d0 4883ea01 488955a8 4863d0 4989d4 41bd00000000 4863d0 4989d6 41bf00000000 4898 488d148500000000 b810000000 4883e801 4801d0 be10000000 ba00000000 48f7f6 486bc010 4829c4 4889e0 4883c003 48c1e802 48c1e002 488945a0 8b4584 4863d0 4883ea01 48895598 4863d0 48899570ffffff 48c78578ffffff00000000 4863d0 48899560ffffff 48c78568ffffff00000000 4898 488d148500000000 b810000000 4883e801 4801d0 bf10000000 ba00000000 48f7f7 486bc010 4829c4 4889e0 4883c003 48c1e802 48c1e002 48894590 c745cc00000000,b940a7a0 93407c01 d1000421 f90067a1 93407c01 f9004ba1 f9004fbf a9490fa2 aa0203e1 d37bfc21 aa0303e4 d37be895 aa150035 aa0203e1 d37be834 93407c01 f90043a1 f90047bf a9480fa2 aa0203e1 d37bfc21 aa0303e4 d37be897 aa170037 aa0203e1 d37be836 93407c00 d37ef400 91003c00 d344fc00 d37cec00 cb2063ff 910003e0 91000c00 d342fc00 d37ef400 f90063a0 b940a7a0 93407c01 d1000421 f9005fa1 93407c01 f9003ba1 f9003fbf a9470fa2 aa0203e1 d37bfc21 aa0303e4 d37be899 aa190039 aa0203e1 d37be838 93407c01 f90033a1 f90037bf a9460fa2 aa0203e1 d37bfc21 aa0303e4 d37be89b aa1b003b aa0203e1 d37be83a 93407c00 d37ef400 91003c00 d344fc00 d37cec00 cb2063ff 910003e0 91000c00 d342fc00 d37ef400 f9005ba0 b900efbf,"	    int a[n],t[n],tmp,k=0;
"
c745c800000000 eb44 8345c801 8b4584 3945c8 7cb4,b900ebbf 14000012 b940eba0 11000400 b900eba0 b940a7a0 b940eba1 6b00003f 54fffd8b,"	    for(int i=0;i<n;i++)
"
8b45c8 4898 488d148500000000 488b45a0 4801d0 4889c6 bf04204000 b800000000 e8b4fdffff,b980eba0 d37ef400 f94063a1 8b000020 aa0003e1 90000000 912ae000 97ffff4e,"	        scanf(""%d"",&a[i]);
"
488b45a0 8b55c8 4863d2 8b0c90 488b4590 8b55c8 4863d2 890c90,f94063a0 b980eba1 b8617802 f9405ba0 b980eba1 b8217802,"	        t[i]=a[i];
"
c745c400000000 e980000000 8345c401 8b4584 3945c4 0f8c74ffffff,b900e7bf 1400002c b940e7a0 11000400 b900e7a0 b940a7a0 b940e7a1 6b00003f 54fffa4b,"	    for(int i=0;i<n;i++)
"
c745c000000000 eb65 8345c001 8b4584 2b45c4 83e801 3945c0 7c8d,b900e3bf 14000020 b940e3a0 11000400 b900e3a0 b940a7a1 b940e7a0 4b000020 51000400 b940e3a1 6b00003f 54fffb6b,"	        for(int j=0;j<n-i-1;j++)
"
488b4590 8b55c0 4863d2 8b0c90 8b45c0 8d5001 488b4590 4863d2 8b0490 39c1 7e40,f9405ba0 b980e3a1 b8617801 b940e3a0 11000402 f9405ba0 93407c42 b8627800 6b00003f 5400026d,"	            if(t[j]>t[j+1])
"
488b4590 8b55c0 4863d2 8b0490 89458c,f9405ba0 b980e3a1 b8617800 b900afa0,"	                tmp=t[j];
"
8b45c0 8d5001 488b4590 4863d2 8b0c90 488b4590 8b55c0 4863d2 890c90,b940e3a0 11000401 f9405ba0 93407c21 b8617802 f9405ba0 b980e3a1 b8217802,"	                t[j]=t[j+1];
"
8b45c0 8d5001 488b4590 4863d2 8b4d8c 890c90,b940e3a0 11000401 f9405ba0 93407c21 b940afa2 b8217802,"	                t[j+1]=tmp;
"
c745bc00000000 eb4d 8345bc01 8b4584 3945bc 7cab,b900dfbf 1400001b b940dfa0 11000400 b900dfa0 b940a7a0 b940dfa1 6b00003f 54fffc6b,"	    for(int i=0;i<n;i++)
"
c745b800000000 eb38 8345b801 8b4584 3945b8 7cc0,b900dbbf 14000012 b940dba0 11000400 b900dba0 b940a7a0 b940dba1 6b00003f 54fffd8b,"	        for(int j=0;j<n;j++)
"
488b4590 8b55bc 4863d2 8b0c90 488b45a0 8b55b8 4863d2 8b0490 39c1 7516,f9405ba0 b980dfa1 b8617801 f94063a0 b980dba2 b8627800 6b00003f 540000e1,"	        if(t[i]==a[j])
"
8b45cc 8d5001 8955cc 488b55a0 8b4db8 4863c9 89048a,b940efa0 11000401 b900efa1 f94063a1 b980dba2 b8227820,"	            a[j]=k++;
"
c745b400000000 eb22 8345b401 8b4584 3945b4 7cd6,b900d7bf 1400000b b940d7a0 11000400 b900d7a0 b940a7a0 b940d7a1 6b00003f 54fffe6b,"	    for(int i=0;i<n;i++)
"
488b45a0 8b55b4 4863d2 8b0490 89c6 bf07204000 b800000000 e861fcffff,f94063a0 b980d7a1 b8617800 2a0003e1 90000000 912b0000 97fffeeb,"	    printf(""%d "",a[i]);
"
bf0a000000 e83bfcffff 4889dc,52800140 97fffee6 9100027f,"	    printf(""\n"");
"
488d65d8 5b 415c 415d 415e 415f 5d c3 0f1f00,910003bf a94153f3 a9425bf5 a94363f7 a9446bf9 f9402bfb a8cf7bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"void main(){
"
bf05000000 e8f8feffff,528000a0 97ffffaf,"    sleep(5);
"
e8c3feffff 8945fc,97ffffa6 b9001fe0,"    pid = getpid(); // returns pid
"
e8dbfeffff 8945f8,97ffffa8 b9001be0,"    ppid = getppid(); //returns parent pid
"
8b45fc 89c6 bf08204000 b800000000 e8b4feffff,b9401fe1 90000000 911e8000 97ffffb3,"    printf(""The process id is : %d\n"" , pid);
"
8b45f8 89c6 bf20204000 b800000000 e8a0feffff,b9401be1 90000000 911ee000 97ffffaf,"    printf(""The parent of process id is : %d\n"" , ppid);
"
90 c9 c3 662e0f1f840000000000 0f1f00,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec20,a9bd7bfd 910003fd,"int main() {
"
48c745f000000000,f90013ff,"	LinkStack A = NULL;
"
48b850524f4752414d4d 488945e5 c745ec4d494e47,90000000 91280001 910043e0 f9400022 f9000002 b8407021 b8007001,"	char word[SIZE] = {'P', 'R', 'O','G','R','A','M','M','I','N','G'};
"
c745fc00000000 eb1f 8345fc01 837dfc0a 7edb,b9002fff 14000009 b9402fe0 11000400 b9002fe0 b9402fe0 7100281f 54fffecd,"	for (i = 0; i < SIZE; i++) {
"
8b45fc 4898 0fb64405e5 0fbed0 488d45f0 89d6 4889c7 e86d000000,b9802fe0 910043e1 38606821 910083e0 9400001e,"		push(&A, word[i]); /* INSERTING THE CHARACTER IN LINK LIST*/
"
bf08204000 e88dfeffff,90000000 91264000 97ffff8d,"	printf(""Example word:\n"");
"
488b45f0 4889c7 e8e7000000,f94013e0 94000041,"	display(A);
"
bf18204000 e877feffff,90000000 91268000 97ffff88,"	printf(""\n\nAfter popping/deleting the first/top most element:\n"");
"
488d45f0 4889c7 e884000000,910083e0 94000025,"	pop(&A);
"
488b45f0 4889c7 e8c5000000,f94013e0 9400003a,"	display(A);
"
488b45f0 4889c7 e8a1000000 8845fb,f94013e0 94000030 3900afe0,"	first = top(A);
"
0fbe45fb 89c6 bf50204000 b800000000 e84bfeffff,3940afe0 2a0003e1 90000000 91276000 97ffff84,"	printf(""\n\nTop most element in the stack: %c\n"", first);
"
b800000000,52800000,"	return 0;
"
c9 c3,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8 89f0 8845e4,a9bd7bfd 910003fd f9000fe0 39005fe1,"void push(LinkStack * L, char elem) {
"
bf10000000 e839feffff 488945f8,d2800200 97ffff67 f90017e0,"	temp = (LinkStack)malloc(sizeof(ctype));
"
48837df800 7424,f94017e0 f100001f 54000160,"	if (temp != NULL) {
"
488b45f8 0fb655e4 8810,f94017e0 39405fe1 39000001,"		temp->data = elem;
"
488b45e8 488b10 488b45f8 48895008,f9400fe0 f9400001 f94017e0 f9000401,"		temp->link = *L;
"
488b45e8 488b55f8 488910,f9400fe0 f94017e1 f9000001,"		*L = temp;
"
90 c9 c3,d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8,a9bd7bfd 910003fd f9000fe0,"void pop(LinkStack *L) {
"
488b45e8 488b00 488945f8,f9400fe0 f9400000 f90017e0,"	temp = *L;
"
488b45f8 488b5008 488b45e8 488910,f94017e0 f9400401 f9400fe0 f9000001,"	*L = temp->link;
"
488b45f8 4889c7 e895fdffff,f94017e0 97ffff5a,"	free(temp);
"
90 c9 c3,d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 48897de8,d10083ff f90007e0,"char top(LinkStack L) {
"
488b45e8 0fb600 8845ff,f94007e0 39400000 39007fe0,"	elem = L->data;
"
0fb645ff,39407fe0,"	return elem;
"
5d c3,910083ff d65f03c0,"}
"
55 4889e5 4883ec20 48897de8,a9bd7bfd 910003fd f9000fe0,"void display(LinkStack L) {
"
488b45e8 488945f8 eb1d 488b45f8 488b4008 488945f8 48837df800 75dc,f9400fe0 f90017e0 14000007 f94017e0 f9400400 f90017e0 f94017e0 f100001f 54ffff01,"	for (trav = L; trav != NULL; trav = trav->link) {
"
488b45f8 0fb600 0fbec0 89c7 e863fdffff,f94017e0 39400000 97ffff4e,"		printf(""%c"", trav->data);
"
90 90 c9 c3 662e0f1f840000000000 6690,d503201f d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 4881ecb0010000,a9a47bfd 910003fd,"{
"
bf08204000 e8d5feffff,90000000 91234000 97ffffb2,"  printf(""Enter number of elements\n"");
"
488d855cfeffff 4889c6 bf21204000 b800000000 e8dcfeffff,910073e0 aa0003e1 90000000 9123c000 97ffffb1,"  scanf(""%d"", &n);
"
8b855cfeffff 89c6 bf24204000 b800000000 e8b5feffff,b9401fe0 2a0003e1 90000000 9123e000 97ffffb0,"  printf(""Enter %d integers\n"", n);
"
c745fc00000000 eb2a 8345fc01 8b855cfeffff 3945fc 7ccb,b901bfff 1400000c b941bfe0 11000400 b901bfe0 b9401fe0 b941bfe1 6b00003f 54fffe4b,"  for (c = 0; c < n; c++)
"
488d8560feffff 8b55fc 4863d2 48c1e202 4801d0 4889c6 bf21204000 b800000000 e896feffff,910083e1 b981bfe0 d37ef400 8b000020 aa0003e1 90000000 9123c000 97ffffa2,"    scanf(""%d"", &array[c]);
"
c745fc00000000 eb7d 8345fc01 8b855cfeffff 83e801 3945fc 0f8c71ffffff,b901bfff 14000032 b941bfe0 11000400 b901bfe0 b9401fe0 51000400 b941bfe1 6b00003f 54fff96b,"  for (c = 0 ; c < n - 1; c++)
"
c745f800000000 eb5f 8345f801 8b855cfeffff 2b45fc 83e801 3945f8 7c90,b901bbff 14000026 b941bbe0 11000400 b901bbe0 b9401fe1 b941bfe0 4b000020 51000400 b941bbe1 6b00003f 54fffaab,"    for (d = 0 ; d < n - c - 1; d++)
"
8b45f8 4898 8b948560feffff 8b45f8 83c001 4898 8b848560feffff 39c2 7e3c,b981bbe0 d37ef400 910083e1 b8606821 b941bbe0 11000400 93407c00 d37ef400 910083e2 b8606840 6b00003f 540002ed,"      if (array[d] > array[d+1]) /* For decreasing order use < */
"
8b45f8 4898 8b848560feffff 8945f4,b981bbe0 d37ef400 910083e1 b8606820 b901b7e0,"        swap       = array[d];
"
8b45f8 83c001 4898 8b948560feffff 8b45f8 4898 89948560feffff,b941bbe0 11000400 93407c00 d37ef400 910083e1 b8606822 b981bbe0 d37ef400 910083e1 b8206822,"        array[d]   = array[d+1];
"
8b45f8 83c001 4898 8b55f4 89948560feffff,b941bbe0 11000400 93407c00 d37ef400 910083e1 b941b7e2 b8206822,"        array[d+1] = swap;
"
bf38204000 e8c5fdffff,90000000 91244000 97ffff5c,"  printf(""Sorted list in ascending order:\n"");
"
c745fc00000000 eb21 8345fc01 8b855cfeffff 3945fc 7cd4,b901bfff 1400000c b941bfe0 11000400 b901bfe0 b9401fe0 b941bfe1 6b00003f 54fffe4b,"  for (c = 0; c < n; c++)
"
8b45fc 4898 8b848560feffff 89c6 bf58204000 b800000000 e8affdffff,b981bfe0 d37ef400 910083e1 b8606820 2a0003e1 90000000 9124c000 97ffff5a,"     printf(""%d\n"", array[c]);
"
b800000000,52800000,"  return 0;
"
c9 c3 660f1f840000000000,a8dc7bfd d65f03c0,"}
"
55 4889e5 53 4883ec18 897dec,a9bd7bfd 910003fd f9000bf3 b9002fe0,"{ 
"
837dec01 7f05,b9402fe0 7100041f 5400006c,"    if (n <= 1){ 
"
8b45ec eb1e,b9402fe0 14000009,"        return n; 
"
8b45ec 83e801 89c7 e8dcffffff 89c3 8b45ec 83e802 89c7 e8cdffffff 01d8,b9402fe0 51000400 97fffff5 2a0003f3 b9402fe0 51000800 97fffff1 0b000260,"    return fib(n - 1) + fib(n - 2); 
"
488b5df8 c9 c3,f9400bf3 a8c37bfd d65f03c0,"} 
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{ 
"
c745fc0b000000,52800160 b9001fe0,"    int n = 11; 
"
8b45fc 89c7 e8acffffff 89c6 bf04204000 b800000000 e8a5feffff b800000000,b9401fe0 97ffffe7 2a0003e1 90000000 911c6000 97ffff99 52800000,"    printf(""%d"", fib(n));
"
c9 c3 662e0f1f840000000000 0f1f4000,a8c27bfd d65f03c0,} 
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf08204000 b800000000 e8e3feffff,90000000 911ec000 97ffffb6,"    printf(""Please input a year and I will tell you if it's a leap year: "");
"
488d45fc 4889c6 bf46204000 b800000000 e8ddfeffff,910073e0 aa0003e1 90000000 911fc000 97ffffad,"    scanf(""%d"",&input);
"
8b45fc 83e003 85c0 7526 8b55fc 4863c2 4869c01f85eb51 48c1e820 c1f805 89d1 c1f91f 29c8 6bc864 89d0 29c8 85c0 7529 8b55fc 4863c2 4869c01f85eb51 48c1e820 c1f807 89d1 c1f91f 29c8 69c890010000 89d0 29c8 85c0 7516,b9401fe0 12000400 7100001f 540001c1 b9401fe1 5290a3e0 72aa3d60 9b207c20 d360fc00 13057c02 131f7c20 4b000040 52800c82 1b027c00 4b000020 7100001f 540001c1 b9401fe1 5290a3e0 72aa3d60 9b207c20 d360fc00 13077c02 131f7c20 4b000040 52803202 1b027c00 4b000020 7100001f 540000e1,"    if ((input%4==0 && input%100!=0) || input%400==0) {
"
8b45fc 89c6 bf50204000 b800000000 e860feffff eb14,b9401fe0 2a0003e1 90000000 911fe000 97ffff8e 14000006,"        printf(""Your input (%d) IS a leap year.\n\n"",input);
"
8b45fc 89c6 bf78204000 b800000000 e84afeffff,b9401fe0 2a0003e1 90000000 91208000 97ffff88,"        printf(""Your input (%d) is NOT a leap year.\n\n"",input);
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f00,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8 488975e0,a9bc7bfd 910003fd f9000fe0 f9000be1,"{
"
66c745fa0000,790077ff,"    unsigned short len=0;
"
c745f600000000 c645ff00 c645fe00,b90033ff 3900ffff 3900fbff,"    unsigned char  oct[4]={0},cnt=0,cnt1=0,i,buf[5];
"
488b45e8 4889c7 e8a9feffff 668945fa,f9400fe0 97ffff8d 790077e0,"    len=strlen(sourceString);
"
c645fd00 e996000000 0fb645fd 83c001 8845fd 0fb645fd 663b45fa 0f825cffffff,3900f7ff 1400002e 3940f7e0 11000400 3900f7e0 3940f7e0 12003c00 794077e1 6b00003f 54fff9e8,"    for(i=0;i<len;i++)
"
0fb655fd 488b45e8 4801d0 0fb600 3c2e 7422,3940f7e0 f9400fe1 8b000020 39400000 7100b81f 54000160,"        if(sourceString[i]!='.'){
"
0fb655fd 488b45e8 488d0c02 0fb645ff 8d5001 8855ff 0fb6c0 0fb611 4898 885405f1,3940f7e0 f9400fe1 8b000021 3940ffe0 11000402 3900ffe2 39400022 93407c00 9100a3e1 38206822,"            buf[cnt++] =sourceString[i];
"
0fb655fd 488b45e8 4801d0 0fb600 3c2e 740f 0fb655fd 0fb745fa 83e801 39c2 7537,3940f7e0 f9400fe1 8b000020 39400000 7100b81f 540000c0 3940f7e1 794077e0 51000400 6b00003f 54000201,"        if(sourceString[i]=='.' || i==len-1){
"
0fb645ff 4898 c64405f100,3940ffe0 93407c00 9100a3e1 3820683f,"            buf[cnt]='\0';
"
c645ff00,3900ffff,"            cnt=0;
"
488d45f1 4889c7 b800000000 e847feffff 89c1 0fb645fe 8d5001 8855fe 0fb6c0 89ca 4898 885405f6,9100a3e0 97ffff70 2a0003e2 3940fbe0 11000401 3900fbe1 12001c42 93407c00 9100c3e1 38206822,"            oct[cnt1++]=atoi(buf);
"
0fb645f6 0fb6d0 488b45e0 668910,3940c3e0 13003c01 f9400be0 79000001,"    ipAddress[0]=oct[0];
"
0fb645f7 488b55e0 4883c202 0fb6c0 668902,3940c7e1 f9400be0 91000800 13003c21 79000001,"    ipAddress[1]=oct[1];
"
0fb645f8 488b55e0 4883c204 0fb6c0 668902,3940cbe1 f9400be0 91001000 13003c21 79000001,"    ipAddress[2]=oct[2];
"
0fb645f9 488b55e0 4883c206 0fb6c0 668902,3940cfe1 f9400be0 91001800 13003c21 79000001,"    ipAddress[3]=oct[3];
"
90 c9 c3,d503201f a8c47bfd d65f03c0,"}
"
55 4889e5 4883ec30,a9bd7bfd 910003fd,"{
"
48c745e000000000 48c745e800000000 c745f000000000,a901ffff b9002bff,"    unsigned char ip[20]={0};
"
bf08204000 b800000000 e893fdffff,90000000 91292000 97ffff57,"    printf(""Enter IP Address (xxx.xxx.xxx.xxx format): "");
"
488d45e0 4889c6 bf34204000 b800000000 e89dfdffff,910063e0 aa0003e1 90000000 9129e000 97ffff4e,"    scanf(""%s"",ip);
"
488d55d8 488d45e0 4889d6 4889c7 e880feffff,910043e1 910063e0 97ffff9d,"    extractIpAddress(ip,&ipAddress[0]);
"
0fb745de 0fbff0 0fb745dc 0fbfc8 0fb745da 0fbfd0 0fb745d8 98 4189f0 89c6 bf38204000 b800000000 e83cfdffff,79c023e0 2a0003e1 79c027e0 2a0003e2 79c02be0 2a0003e3 79c02fe0 2a0003e4 90000000 912a0000 97ffff44,"    printf(""\nIp Address: %03d. %03d. %03d. %03d\n"",ipAddress[0],ipAddress[1],ipAddress[2],ipAddress[3]);
"
0fb745d8 6685c0 7814 0fb745d8 6683f87f 7f0a,79c023e0 7100001f 540000eb 79c023e0 7101fc1f 5400008c,"    if(ipAddress[0]>=0 && ipAddress[0]<=127)
"
bf5d204000 e8fffcffff,90000000 912aa000 97ffff33,"        printf(""Class A Ip Address.\n"");
"
0fb745d8 6683f87f 7e14 0fb745d8 663dbe00 7f0a,79c023e0 7101fc1f 540000ed 79c023e0 7102f81f 5400008c,"    if(ipAddress[0]>127 && ipAddress[0]<191)
"
bf71204000 e8e1fcffff,90000000 912b0000 97ffff2a,"        printf(""Class B Ip Address.\n"");
"
0fb745d8 663dbf00 7e14 0fb745d8 663ddf00 7f0a,79c023e0 7102fc1f 540000ed 79c023e0 71037c1f 5400008c,"    if(ipAddress[0]>191 && ipAddress[0]<224)
"
bf85204000 e8c3fcffff,90000000 912b6000 97ffff21,"        printf(""Class C Ip Address.\n"");
"
0fb745d8 663de000 7e14 0fb745d8 663def00 7f0a,79c023e0 7103801f 540000ed 79c023e0 7103bc1f 5400008c,"    if(ipAddress[0]>224 && ipAddress[0]<=239)
"
bf99204000 e8a5fcffff,90000000 912bc000 97ffff18,"        printf(""Class D Ip Address.\n"");
"
0fb745d8 663def00 7e0a,79c023e0 7103bc1f 5400008d,"    if(ipAddress[0]>239)
"
bfad204000 e891fcffff,90000000 912c2000 97ffff12,"        printf(""Class E Ip Address.\n"");
"
b800000000,52800000,"    return 0;
"
c9 c3 662e0f1f840000000000,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{ float a,c,f;
"
bf08204000 b800000000 e8e3feffff,90000000 911cc000 97ffffb6,"printf(""Enter the Temperature in Celcius : "");
"
488d45f8 4889c6 bf2c204000 b800000000 e8ddfeffff,910063e0 aa0003e1 90000000 911d6000 97ffffad,"scanf(""%f"",&c);
"
f30f104df8 f30f1005e00e0000 f30f58c1 f30f1145fc,bd401be1 0f026440 1e202820 bd001fe0,"f=c*(9/5)+32;
"
660fefd2 f30f5a55fc 66480f7ed0 66480f6ec0 bf30204000 b801000000 e895feffff,bd401fe0 1e22c000 90000000 911d8000 97ffffa8,"printf(""Temperature in Fahernheit is %f"",f);
"
90 c9 c3 6690,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5,a9bf7bfd 910003fd
bf08204000 b800000000 e8d7feffff,b0000000 91112000 97ffffae
be18424000 bf39204000 b800000000 e8d3feffff,d0000080 9107a001 b0000000 91120000 97ffffa5
8b0595300000 83e801 89058c300000,d0000080 9107a000 b9400000 51000401 d0000080 9107a000 b9000001
8b158a300000 8b0580300000 39c2 7f14,d0000080 9107b000 b9400001 d0000080 9107a000 b9400000 6b00003f 540000ac
bf3c204000 e88afeffff,b0000000 91122000 97ffff8f
b800000000 e8bd060000,94000290
bf4f204000 b800000000 e881feffff,b0000000 91128000 97ffff93
be20424000 bf39204000 b800000000 e87dfeffff,d0000080 9107c001 b0000000 91120000 97ffff8a
8b0543300000 890531300000 eb31 8b0507300000 83e801 8905fe2f0000 8b15f82f0000 8b05fa2f0000 39c2 7dbf,d0000080 9107b000 b9400001 d0000080 91078000 b9000001 14000017 d0000080 91078000 b9400000 51000401 d0000080 91078000 b9000001 d0000080 91078000 b9400001 d0000080 9107a000 b9400000 6b00003f 54fffc6a
8b0529300000 8b1523300000 8d4a01 4898 8b148580404000 4863c1 89148580404000,d0000080 91078000 b9400001 d0000080 91078000 b9400000 11000403 d0000080 91014000 93407c21 b8617802 d0000080 91014000 93407c61 b8217802
8b05f02f0000 8b15f22f0000 4898 89148580404000,d0000080 9107a000 b9400001 d0000080 9107c000 b9400002 d0000080 91014000 93407c21 b8217802
8b05df2f0000 83c001 8905d62f0000,d0000080 9107b000 b9400000 11000401 d0000080 9107b000 b9000001
b800000000 e81d060000,94000251
90 5d c3,d503201f a8c17bfd d65f03c0
55 4889e5,a9bf7bfd 910003fd
bf62204000 e8cffdffff,b0000000 9112e000 97ffff47
c705a52f000000000000 eb34 8b05782f0000 83c001 89056f2f0000 8b15692f0000 8b056f2f0000 39c2 7cbc,d0000080 91078000 b900001f 14000015 d0000080 91078000 b9400000 11000401 d0000080 91078000 b9000001 d0000080 91078000 b9400001 d0000080 9107b000 b9400000 6b00003f 54fffcab
8b059d2f0000 4898 48c1e002 480580404000 8b00 89c6 bf7c204000 b800000000 e8aefdffff,d0000080 91078000 b9400000 93407c00 d37ef401 d0000080 91014000 8b000020 b9400000 2a0003e1 b0000000 91136000 97ffff3e
b800000000 e8b2050000,94000228
90 5d c3,d503201f a8c17bfd d65f03c0
55 4889e5,a9bf7bfd 910003fd
bf80204000 b800000000 e86ffdffff,b0000000 91138000 97ffff26
be18424000 bf39204000 b800000000 e86bfdffff,d0000080 9107a001 b0000000 91120000 97ffff1d
8b052d2f0000 83e801 8905242f0000,d0000080 9107a000 b9400000 51000401 d0000080 9107a000 b9000001
8b15222f0000 8b05182f0000 39c2 7f14,d0000080 9107b000 b9400001 d0000080 9107a000 b9400000 6b00003f 540000ac
bf3c204000 e822fdffff,b0000000 91122000 97ffff07
b800000000 e855050000,94000208
8b05fa2e0000 8905ec2e0000 eb31 8b05c22e0000 83c001 8905b92e0000 8b15b32e0000 8b05b92e0000 39c2 7cbf,d0000080 9107a000 b9400001 d0000080 91078000 b9000001 14000017 d0000080 91078000 b9400000 11000401 d0000080 91078000 b9000001 d0000080 91078000 b9400001 d0000080 9107b000 b9400000 6b00003f 54fffc6b
8b05e42e0000 83c001 8b0ddb2e0000 4898 8b148580404000 4863c1 89148580404000,d0000080 91078000 b9400000 11000401 d0000080 91078000 b9400003 d0000080 91014000 93407c21 b8617802 d0000080 91014000 93407c61 b8217802
bfb0204000 e8bffcffff,b0000000 91144000 97fffede
8b05a52e0000 83e801 89059c2e0000,d0000080 9107b000 b9400000 51000401 d0000080 9107b000 b9000001
b800000000 e8e3040000,940001d8
90 5d c3,d503201f a8c17bfd d65f03c0
55 4889e5,a9bf7bfd 910003fd
bfc8204000 b800000000 e8a0fcffff,b0000000 9114a000 97fffed6
be18424000 bf39204000 b800000000 e89cfcffff,d0000080 9107a001 b0000000 91120000 97fffecd
8b155e2e0000 8b055c2e0000 39c2 7e14,d0000080 9107a000 b9400001 d0000080 9107b000 b9400000 6b00003f 540000ad
bf3c204000 e862fcffff,b0000000 91122000 97fffebe
b800000000 e895040000,940001bf
bff2204000 b800000000 e859fcffff,b0000000 91156000 97fffec2
be20424000 bf39204000 b800000000 e855fcffff,d0000080 9107c001 b0000000 91120000 97fffeb9
8b05172e0000 8b15192e0000 4898 89148580404000,d0000080 9107a000 b9400001 d0000080 9107c000 b9400002 d0000080 91014000 93407c21 b8217802
90 5d c3,d503201f a8c17bfd d65f03c0
55 4889e5,a9bf7bfd 910003fd
bf10214000 e80ffcffff,b0000000 9115c000 97fffea3
be20424000 bf39204000 b800000000 e81bfcffff,d0000080 9107c001 b0000000 91120000 97fffea2
c705d12d000000000000 eb4e 8b058a2d0000 83c001 8905812d0000 8b157b2d0000 8b05812d0000 39c2 7ca2,d0000080 91078000 b900001f 14000021 d0000080 91078000 b9400000 11000401 d0000080 91078000 b9000001 d0000080 91078000 b9400001 d0000080 9107b000 b9400000 6b00003f 54fffb2b
8b05c92d0000 4898 8b148580404000 8b05ca2d0000 39c2 7526,d0000080 91078000 b9400001 d0000080 91014000 93407c21 b8617801 d0000080 9107c000 b9400000 6b00003f 540001c1
8b05b02d0000 83c001 89c6 bf38214000 b800000000 e8ccfbffff,d0000080 91078000 b9400000 11000400 2a0003e1 b0000000 91166000 97fffe8e
c705a62d000014000000,d0000080 9107d000 52800281 b9000001
eb1f,14000010
8b057f2d0000 83f814 740f,d0000080 9107d000 b9400000 7100501f 54000080
bf5b214000 b800000000 e887fbffff,b0000000 91170000 97fffe72
b800000000 e8aa030000,9400016b
90 5d c3,d503201f a8c17bfd d65f03c0
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf08204000 e8e8feffff,90000000 91206000 97ffffb2,"    printf(""Enter two numbers a and b respectively\n"");
"
488d55f8 488d45fc 4889c6 bf2f204000 b800000000 e8defeffff,910063e1 910073e0 aa0103e2 aa0003e1 90000000 91210000 97ffffaf,"    scanf(""%d%d"",&a,&b);
"
8b55fc 8b45f8 39c2 7e0c,b9401fe1 b9401be0 6b00003f 540000ad,"    if (a>b)
"
bf34204000 e8bafeffff eb0a,90000000 91212000 97ffffa4 14000004,"        printf(""a is greater than b\n"");
"
bf48204000 e8aefeffff,90000000 91218000 97ffffa0,"        printf(""a is smaller than b\n"");
"
8b55fc 8b45f8 39c2 7c0c,b9401fe1 b9401be0 6b00003f 540000ab,"    if (a>=b)
"
bf5c204000 e89afeffff eb0a,90000000 9121e000 97ffff99 14000004,"        printf(""a is greater than equal to b\n"");
"
bf80204000 e88efeffff,90000000 91226000 97ffff95,"        printf(""a is not greater than equal to b\n"");
"
8b55fc 8b45f8 39c2 7d0c,b9401fe1 b9401be0 6b00003f 540000aa,"    if (a<b)
"
bfa1204000 e87afeffff eb0a,90000000 91230000 97ffff8e 14000004,"        printf(""a is less than b\n"");
"
bf34204000 e86efeffff,90000000 91212000 97ffff8a,"        printf(""a is greater than b\n"");
"
8b55fc 8b45f8 39c2 7f0c,b9401fe1 b9401be0 6b00003f 540000ac,"    if (a<=b)
"
bfb2204000 e85afeffff eb0a,90000000 91236000 97ffff83 14000004,"        printf(""a is less than equal to b\n"");
"
bf5c204000 e84efeffff,90000000 9121e000 97ffff7f,"        printf(""a is greater than equal to b\n"");
"
8b55fc 8b45f8 39c2 750c,b9401fe1 b9401be0 6b00003f 540000a1,"    if (a==b)
"
bfcc204000 e83afeffff eb0a,90000000 9123e000 97ffff78 14000004,"        printf(""a is equal to b\n"");
"
bfdc204000 e82efeffff,90000000 91242000 97ffff74,"        printf(""a is not equal to b\n"");
"
8b55fc 8b45f8 39c2 740c,b9401fe1 b9401be0 6b00003f 540000a0,"    if (a!=b)
"
bfdc204000 e81afeffff eb0a,90000000 91242000 97ffff6d 14000004,"        printf(""a is not equal to b\n"");
"
bfcc204000 e80efeffff,90000000 9123e000 97ffff69,"        printf(""a is equal to b\n"");
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f8000000000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{ float a,b,h;
"
bf08204000 b800000000 e8e3feffff,90000000 911d8000 97ffffb6,"printf(""Enter the base : "");
"
488d45f8 4889c6 bf1a204000 b800000000 e8ddfeffff,910063e0 aa0003e1 90000000 911de000 97ffffad,"scanf(""%f"",&b);
"
bf1d204000 b800000000 e8befeffff,90000000 911e0000 97ffffae,"printf(""Enter the height : "");
"
488d45f4 4889c6 bf1a204000 b800000000 e8b8feffff,910053e0 aa0003e1 90000000 911de000 97ffffa5,"scanf(""%f"",&h);
"
f30f1045f8 660fefc9 f30f5ac8 f20f1005a30e0000 f20f59c8 f30f1045f4 f30f5ac0 f20f59c1 f20f5ac0 f30f1145fc,bd401be0 1e22c001 1e6c1000 1e600821 bd4017e0 1e22c000 1e600820 1e624000 bd001fe0,"a=0.5*b*h;
"
660fefd2 f30f5a55fc 66480f7ed0 66480f6ec0 bf31204000 b801000000 e857feffff,bd401fe0 1e22c000 90000000 911e6000 97ffff9b,"printf(""Area is %f"",a);
"
90 c9 c3 0f1f4000,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf08204000 e8d8feffff,90000000 911e4000 97ffffb2,"    printf(""Enter Principal Amount, Rate of interest and Time Respectively\n"");
"
488d4df0 488d55f4 488d45f8 4889c6 bf47204000 b800000000 e8dafeffff,910043e2 910053e1 910063e0 aa0203e3 aa0103e2 aa0003e1 90000000 911f4000 97ffffad,"    scanf(""%f%f%f"", &PrincipleAmount, &Rate, &Time);
"
f30f104df8 f30f1045f4 f30f59c8 f30f1045f0 f30f59c1 f30f100dd30e0000 f30f5ec1 f30f1145fc,bd401be1 bd4017e0 1e200821 bd4013e0 1e200820 52a85900 1e270001 1e211800 bd001fe0,"    SimpleInterest = (PrincipleAmount * Rate * Time)/ 100;
"
660fefd2 f30f5a55fc 66480f7ed0 66480f6ec0 bf4e204000 b801000000 e880feffff,bd401fe0 1e22c000 90000000 911f6000 97ffffa3,"    printf(""Simple Interest is :%f"",SimpleInterest);
"
b800000000,52800000,"    return 0;
"
c9 c3 660f1f840000000000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
c745fc05000000,528000a0 b9001fe0,"    int a= 5, b, c;
"
8b45fc 8d50ff 8955fc 8945f8,b9401fe0 51000401 b9001fe1 b9001be0,"    b = a--;
"
8b45fc 8d50ff 8955fc 8945f4,b9401fe0 51000401 b9001fe1 b90017e0,"    c = a--;
"
8b55f4 8b45f8 89c6 bf08204000 b800000000 e8ccfeffff,b94017e2 b9401be1 90000000 911ba000 97ffffa6,"    printf(""Value of b = %d\n Value of c = %d\n"", b,c);
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f440000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"  int main() {
"
c745fc00000000,b9001fff,"    int num, reverse = 0, remainder;
"
bf08204000 e8d1feffff,90000000 911fc000 97ffffb1,"    printf(""Enter a number\n"");
"
488d45f4 4889c6 bf17204000 b800000000 e8dbfeffff,910053e0 aa0003e1 90000000 91200000 97ffffb0,"    scanf(""%d"", & num);
"
eb63 8b45f4 85c0 7596,14000021 b94017e0 7100001f 54fffbc1,"    while (num != 0) {
"
8b55f4 4863c2 4869c067666666 48c1e820 c1f802 89d1 c1f91f 29c8 8945f8 8b4df8 89c8 c1e002 01c8 01c0 29c2 8955f8,b94017e1 528ccce0 72acccc0 9b207c20 d360fc00 13027c02 131f7c20 4b000042 2a0203e0 531e7400 0b020000 531f7800 4b000020 b9001be0,"      remainder = num % 10;
"
8b55fc 89d0 c1e002 01d0 01c0 89c2 8b45f8 01d0 8945fc,b9401fe1 2a0103e0 531e7400 0b010000 531f7800 2a0003e1 b9401be0 0b010000 b9001fe0,"      reverse = reverse * 10 + remainder;
"
8b45f4 4863d0 4869d267666666 48c1ea20 89d1 c1f902 99 89c8 29d0 8945f4,b94017e0 528ccce1 72acccc1 9b217c01 d360fc21 13027c21 131f7c00 4b000020 b90017e0,"      num = num / 10;
"
8b45fc 89c6 bf20204000 b800000000 e84bfeffff,b9401fe1 90000000 91202000 97ffff8c,"    printf(""Reverse of the number is : %d\n"", reverse);
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f4000,a8c27bfd d65f03c0,"  }
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main(){
"
bf08204000 e8d8feffff,90000000 9120c000 97ffffb2,"    printf(""Enter the day number\n"");
"
488d45fc 4889c6 bf1d204000 b800000000 e8e2feffff,910073e0 aa0003e1 90000000 91212000 97ffffb1,"    scanf(""%d"", &day);
"
8b45fc 83f807 0f8783000000 89c0 488b04c598204000 ffe0,b9401fe0 71001c1f 54000600 71001c1f 5400064c 7100181f 54000500 7100181f 540005cc 7100141f 54000400 7100141f 5400054c 7100101f 54000300 7100101f 540004cc 71000c1f 54000200 71000c1f 5400044c 7100041f 54000080 7100081f 540000c0 1400001d,"    switch(day)
"
bf20204000 b800000000 e8abfeffff,90000000 91214000 97ffff98,"        printf(""Day is Monday"");
"
eb75,1400001c,"        break;
"
bf2e204000 b800000000 e89afeffff,90000000 91218000 97ffff94,"        printf(""Day is Tuesday"");
"
eb64,14000018,"        break;
"
bf3d204000 b800000000 e889feffff,90000000 9121c000 97ffff90,"        printf(""Day is Wednesday"");
"
eb53,14000014,"        break;
"
bf4e204000 b800000000 e878feffff,90000000 91222000 97ffff8c,"        printf(""Day is Thrusday"");
"
eb42,14000010,"        break;
"
bf5e204000 b800000000 e867feffff,90000000 91226000 97ffff88,"        printf(""Day is Friday"");
"
eb31,1400000c,"        break;
"
bf6c204000 b800000000 e856feffff,90000000 9122a000 97ffff84,"        printf(""Day is Saturday"");
"
eb20,14000008,"        break;
"
bf7c204000 b800000000 e845feffff,90000000 9122e000 97ffff80,"        printf(""Day is Sunday"");
"
eb0f,14000004,"        break;
"
bf8a204000 b800000000 e834feffff,90000000 91232000 97ffff7c,"        printf(""Wrong choice"");
"
b800000000,52800000,"    return 0;
"
c9 c3 662e0f1f840000000000 0f1f00,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec20,a9bd7bfd 910003fd,"int main(){
"
bf08204000 e8d8feffff,90000000 9120e000 97ffffb2,"	printf(""Please provide the first numerator:\n"");
"
488d45f4 4889c6 bf2c204000 b800000000 e8e2feffff,910093e0 aa0003e1 90000000 91218000 97ffffb1,"	scanf(""%d"",&numerator1);
"
bf30204000 e8b8feffff,90000000 9121a000 97ffffaa,"	printf(""Please provide the first denominator:\n"");
"
488d45ec 4889c6 bf2c204000 b800000000 e8c2feffff,910073e0 aa0003e1 90000000 91218000 97ffffa9,"	scanf(""%d"",&denominator1);
"
bf58204000 e898feffff,90000000 91224000 97ffffa2," 	printf(""Please provide the second numerator:\n"");
"
488d45f0 4889c6 bf2c204000 b800000000 e8a2feffff,910083e0 aa0003e1 90000000 91218000 97ffffa1,"        scanf(""%d"",&numerator2);
"
bf80204000 e878feffff,90000000 9122e000 97ffff9a,"	printf(""Please provide the second denominator:\n"");
"
488d45e8 4889c6 bf2c204000 b800000000 e882feffff,910063e0 aa0003e1 90000000 91218000 97ffff99,"	scanf(""%d"",&denominator2);
"
8b55ec 8b45e8 39c2 7513,b9401fe1 b9401be0 6b00003f 54000101,"	if ( denominator1 == denominator2 ) {
"
8b55f4 8b45f0 01d0 8945fc,b94027e1 b94023e0 0b000020 b9002fe0,"		num_result = numerator1 + numerator2;
"
8b45ec 8945f8 eb25,b9401fe0 b9002be0 1400000d,"		denom_result = denominator1; /*  or 2, they are equal */
"
8b55f4 8b45e8 89d1 0fafc8 8b55f0 8b45ec 0fafc2 01c8 8945fc,b94027e1 b9401be0 1b007c21 b94023e2 b9401fe0 1b007c40 0b000020 b9002fe0,"		num_result = (numerator1 * denominator2) + (numerator2 * denominator1 );
"
8b55ec 8b45e8 0fafc2 8945f8,b9401fe1 b9401be0 1b007c20 b9002be0,"		denom_result = denominator1 * denominator2;
"
8b7de8 8b4df0 8b55ec 8b45f4 448b45fc 4883ec08 8b75f8 56 4589c1 4189f8 89c6 bfa8204000 b800000000 e801feffff 4883c410,b94027e0 b9401fe1 b94023e2 b9401be3 b9402be6 b9402fe5 2a0303e4 2a0203e3 2a0103e2 2a0003e1 90000000 91238000 97ffff79,"	printf(""The result of %d / %d  + %d / %d  is: %d / %d \n"", numerator1,denominator1, numerator2, denominator2,num_result,denom_result);
"
b800000000,52800000,"	return 0;
"
c9 c3 660f1f440000,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"  int main() {
"
bf08204000 e8d8feffff,90000000 911f0000 97ffffb2,"    printf(""Enter a character\n"");
"
488d45ff 4889c6 bf1a204000 b800000000 e8e2feffff,91007fe0 aa0003e1 90000000 911f6000 97ffffb1,"    scanf(""%c"", & ch);
"
0fb645ff 3c40 7e08 0fb645ff 3c5a 7e10 0fb645ff 3c60 7e19 0fb645ff 3c7a 7f11,39407fe0 7101001f 54000089 39407fe0 7101681f 540000e9 39407fe0 7101801f 54000109 39407fe0 7101e81f 540000a8,"    if ((ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122))
"
bf20204000 b800000000 e8a3feffff eb30,90000000 911f8000 97ffffa6 1400000e,"      printf(""Entered character is an alphabet"");
"
0fb645ff 3c2f 7e19 0fb645ff 3c39 7f11,39407fe0 7100bc1f 54000109 39407fe0 7100e41f 540000a8,"    else if (ch >= 48 && ch <= 57)
"
bf41204000 b800000000 e882feffff eb0f,90000000 91202000 97ffff9c 14000004,"      printf(""Entered character is a digit"");
"
bf60204000 b800000000 e871feffff,90000000 9120a000 97ffff98,"      printf(""Entered character is a special symbol"");
"
b800000000,52800000,"    return 0;
"
c9 c3 662e0f1f840000000000,a8c27bfd d65f03c0,"  }
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"  int main() {
"
bf08204000 e8c8feffff,90000000 91254000 97ffffa2,"    printf(""enter two number\n"");
"
488d55f4 488d45f8 4889c6 bf19204000 b800000000 e8defeffff,910053e1 910063e0 aa0103e2 aa0003e1 90000000 9125a000 97ffff9f,"    scanf(""%d%d"", & a, & b);
"
488b05c72e0000 4889c7 e8bffeffff,b0000080 91014000 f9400000 97ffff9f,"    fflush(stdin);
"
bf1e204000 e895feffff,90000000 9125c000 97ffff94,"    printf(""enter your choice\n"");
"
bf30204000 e88bfeffff,90000000 91262000 97ffff91,"    printf(""1. enter 1 for addition\n"");
"
bf48204000 e881feffff,90000000 91268000 97ffff8e,"    printf(""2. enter 2 for subtraction\n"");
"
bf63204000 e877feffff,90000000 91270000 97ffff8b,"    printf(""3. enter 3 for multiplication\n"");
"
bf81204000 e86dfeffff,90000000 91278000 97ffff88,"    printf(""4. Enter 4 for division\n"");
"
bfa0204000 e863feffff,90000000 9127e000 97ffff85,"    printf(""5. enter 5 for modulo division\n"");
"
488d45f3 4889c6 bfbf204000 b800000000 e87dfeffff,91004fe0 aa0003e1 90000000 91286000 97ffff84,"    scanf(""%c"", & ch);
"
0fb645f3 0fbec0 83e831 83f804 7750 89c0 488b04c5e8204000 ffe0,39404fe0 7100d41f 54000480 7100d41f 5400052c 7100d01f 54000360 7100d01f 540004ac 7100cc1f 54000240 7100cc1f 5400042c 7100c41f 54000080 7100c81f 540000e0 1400001c,"    switch (ch) {
"
8b55f8 8b45f4 01d0 8945fc,b9401be1 b94017e0 0b000020 b9001fe0,"      c = a + b;
"
eb46,1400001a,"      break;
"
8b55f8 8b45f4 29c2 8955fc,b9401be1 b94017e0 4b000020 b9001fe0,"      c = a - b;
"
eb39,14000015,"      break;
"
8b55f8 8b45f4 0fafc2 8945fc,b9401be1 b94017e0 1b007c20 b9001fe0,"      c = a * b;
"
eb2b,14000010,"      break;
"
8b45f8 8b4df4 99 f7f9 8945fc,b9401be1 b94017e0 1ac00c20 b9001fe0,"      c = a / b;
"
eb1d,1400000b,"      break;
"
8b45f8 8b4df4 99 f7f9 8955fc,b9401be0 b94017e1 1ac10c02 1b017c41 4b010000 b9001fe0,"      c = a % b; //Modulus division only works with integers.
"
eb0f,14000004,"      break;
"
bfc2204000 b800000000 e8effdffff,90000000 91288000 97ffff5c,"      printf(""wrong choice"");
"
8b45fc 89c6 bfcf204000 b800000000 e8dbfdffff,b9401fe1 90000000 9128c000 97ffff58,"    printf(""calculated value=%d"", c);
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f4000,a8c27bfd d65f03c0,"  }
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
c745fc05000000,528000a0 b9001fe0,"    int a = 5;
"
c645fb58,52800b00 39006fe0,"    char ch = 'X';    // Capital X
"
be04000000 bf04204000 b800000000 e8e3feffff,d2800081 90000000 911b6000 97ffffad,"    printf(""Size of a : %d Bytes\n"" ,sizeof(a));
"
be01000000 bf1a204000 b800000000 e8cffeffff,d2800021 90000000 911bc000 97ffffa9,"    printf(""Size of X : %d Bytes\n"",sizeof(ch));
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f840000000000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main(){
"
bf08204000 e8d8feffff,90000000 911ec000 97ffffb2,"    printf(""Enter a character\n"");
"
488d45ff 4889c6 bf1a204000 b800000000 e8e2feffff,91007fe0 aa0003e1 90000000 911f2000 97ffffb1,"    scanf(""%c"", &ch);
"
0fb645ff 0fbec0 83e841 83f834 0f97c2 84d2 7530 48ba1141100011411000 89c1 48d3ea 4889d0 83e001 4885c0 0f95c0 84c0 7411,39407fe0 51010400 7100d01f 1a9f97e1 12001c21 7100003f 54000201 d2882221 f2a00201 f2c82221 f2e00201 9ac02420 92400000 f100001f 1a9f07e0 12001c00 7100001f 540000a0,"    switch(ch)
"
bf1d204000 b800000000 e890feffff,90000000 911f4000 97ffffa0,"        printf(""Entered character is a vowel"");
"
eb0f,14000004,"        break;
"
bf40204000 b800000000 e87ffeffff,90000000 911fc000 97ffff9c,"        printf(""Entered character is a consonant"");
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f840000000000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf08204000 e8d8feffff,90000000 911ec000 97ffffb2,"    printf(""enter radius :\n"");
"
488d45f4 4889c6 bf17204000 b800000000 e8e2feffff,910053e0 aa0003e1 90000000 911f0000 97ffffb1,"    scanf(""%f"", &r);
"
f30f1045f4 660fefc9 f30f5ac8 f20f1005bd0e0000 f20f59c8 f30f1045f4 f30f5ac0 f20f59c1 f20f5ac0 f30f1145fc,bd4017e0 1e22c000 90000000 fd43f401 1e610801 bd4017e0 1e22c000 1e600820 1e624000 bd001fe0,"    a = 3.14*r*r;
"
f30f1045f4 660fefc9 f30f5ac8 f20f1005960e0000 f20f59c1 f20f5ac0 f30f1145f8,bd4017e0 1e22c000 90000000 fd43f801 1e610800 1e624000 bd001be0,"    c = 2*3.14*r;
"
660fefc0 f30f5a45f8 660fefd2 f30f5a55fc 66480f7ed0 660f28c8 66480f6ec0 bf20204000 b802000000 e852feffff,bd401fe0 1e22c002 bd401be0 1e22c000 1e604001 1e604040 90000000 911f2000 97ffff9b,"    printf(""Area = %f\n circumference = %f\n"",a,c);
"
b800000000,52800000,"    return 0;
"
c9 c3 662e0f1f840000000000 90,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
c745fc07000000 c745f802000000,528000e0 b9001fe0 52800040 b9001be0,"    int a=7, b=2,c;
"
8b45f8 8b55fc 89c1 d3e2 89d0 8945f4,b9401be0 b9401fe1 1ac02020 b90017e0,"    c = a<<b;
"
8b45f4 89c6 bf04204000 b800000000 e8d1feffff,b94017e1 90000000 911b6000 97ffffa9,"    printf(""Value of c = %d\n"",c);
"
b800000000,52800000,"    return 0;
"
c9 c3 662e0f1f840000000000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec30 897dec 488975e0 488955d8,a9bc7bfd 910003fd b9002fe0 f90013e1 f9000fe2,"int main(int argc, char **argv, char **environ){
"
c745fcffffffff,12800000 b9003fe0,"	int i = -1;
"
eb1f 8345fc01 8b45fc 4898 488d14c500000000 488b45d8 4801d0 488b00 4885c0 75c1 b800000000,14000007 b9403fe0 11000400 b9003fe0 b9803fe0 d37df000 f9400fe1 8b000020 f9400000 f100001f 54fffe21 52800000,"	while (environ[++i])
"
8b45fc 4898 488d14c500000000 488b45d8 4801d0 488b00 4889c7 e8cffeffff,b9803fe0 d37df000 f9400fe1 8b000020 f9400000 97ffffa9,"		printf(""%s\n"",environ[i]);
"
c9 c3 0f1f840000000000,a8c47bfd d65f03c0,"}
"
55 4889e5 4883ec20,a9bd7bfd 910003fd,"int main(){
"
bf08204000 e8d8feffff,90000000 91234000 97ffffb2,"    printf(""Enter basic salary of employee\n"");
"
488d45ec 4889c6 bf27204000 b800000000 e8e2feffff,910073e0 aa0003e1 90000000 9123c000 97ffffb1,"    scanf(""%f"", &BaseSalary);
"
f30f1045ec 660fefc9 f30f5ac8 f20f1005fd0e0000 f20f59c1 f20f5ac0 f30f1145fc,bd401fe0 1e22c000 90000000 fd44b801 1e610800 1e624000 bd002fe0,"    TA  = 0.05 * BaseSalary;
"
f30f1045ec 660fefc9 f30f5ac8 f20f1005e30e0000 f20f59c1 f20f5ac0 f30f1145f8,bd401fe0 1e22c000 b200e7e0 f2e7f660 9e670001 1e610800 1e624000 bd002be0,"    DA  = 0.075 * BaseSalary;
"
f30f1045ec 660fefc9 f30f5ac8 f20f1005c90e0000 f20f59c1 f20f5ac0 f30f1145f4,bd401fe0 1e22c000 90000000 fd44bc01 1e610800 1e624000 bd0027e0,"    HRA = 0.1 * BaseSalary;
"
f30f1045ec f30f5845fc f30f5845f8 f30f104df4 f30f58c1 f30f1145f0,bd401fe1 bd402fe0 1e202821 bd402be0 1e202820 bd4027e1 1e202820 bd0023e0,"    GrossSalary = BaseSalary + TA + DA + HRA;
"
f30f1045f0 0f2f059b0e0000 7214,bd4023e0 528a0000 72a8f860 1e270001 1e212010 5400004a 14000005,"    if (GrossSalary >= 100000)
"
bf2a204000 b800000000 e832feffff e996000000,90000000 9123e000 97ffff8d 1400003a,"        printf(""A grade employee"");
"
f30f1045f0 0f2f057d0e0000 721f f30f10056f0e0000 0f2f45f0 7611,bd4023e0 528f8000 72a8f240 1e270001 1e212010 5400004a 1400000c bd4023e0 528a0000 72a8f860 1e270001 1e212010 54000044 14000005,"    else if (GrossSalary >= 75000 && GrossSalary < 100000)
"
bf3b204000 b800000000 e802feffff eb69,90000000 91244000 97ffff7b 14000028,"        printf(""B grade employee"");
"
f30f1045f0 0f2f05540e0000 721f f30f1005460e0000 0f2f45f0 7611,bd4023e0 528a0000 72a8e860 1e270001 1e212010 5400004a 1400000c bd4023e0 528f8000 72a8f240 1e270001 1e212010 54000044 14000005,"    else if (GrossSalary >=50000 && GrossSalary < 75000)
"
bf4c204000 b800000000 e8d5fdffff eb3c,90000000 9124a000 97ffff69 14000016,"        printf(""C grade employee"");
"
f30f1045f0 0f2f052b0e0000 721f f30f10051d0e0000 0f2f45f0 7611,bd4023e0 52880000 72a8d380 1e270001 1e212010 5400004a 1400000c bd4023e0 528a0000 72a8e860 1e270001 1e212010 54000044 14000005,"    else if (GrossSalary >= 20000 && GrossSalary < 50000)
"
bf5d204000 b800000000 e8a8fdffff eb0f,90000000 91250000 97ffff57 14000004,"        printf(""D grade employee"");
"
bf6e204000 b800000000 e897fdffff,90000000 91256000 97ffff53,"        printf(""E grade employee"");
"
b800000000,52800000,"    return 0;
"
c9 c3,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main(){  
"
bf08204000 b800000000 e8e3feffff,90000000 9127c000 97ffffb6,"    printf(""Please Enter the Number = "");    
"
488d45f8 4889c6 bf23204000 b800000000 e8ddfeffff,910063e0 aa0003e1 90000000 91284000 97ffffad,"    scanf(""%ld"",&n);
"
488b45f8 4889c7 e807000000 b800000000,f9400fe0 94000004 52800000,"    convertNumbertoChar(n); /* It's important to break your code in bloks,
"
c9 c3,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8,a9bd7bfd 910003fd f9000fe0,"void convertNumbertoChar(long int n){   
"
48c745f800000000,f90017ff,"    long int r,sum = 0;
"
e981000000 48837de800 0f8f74ffffff,1400001f f9400fe0 f100001f 54fffc0c,"    while(n > 0){               // This loop change the position of number so we can print in the righ order
"
488b4de8 48ba6766666666666666 4889c8 48f7ea 48c1fa02 4889c8 48c1f83f 4829c2 4889d0 48c1e002 4801d0 4801c0 4829c1 4889ca 488955f0,f9400fe1 b203e7e0 f28ccce0 9b407c20 9342fc02 937ffc20 cb000042 aa0203e0 d37ef400 8b020000 d37ff800 cb000020 f90013e0,"        r = (n % 10);           // Decompose the number
"
488b55f8 4889d0 48c1e002 4801d0 4801c0 4889c2 488b45f0 4801d0 488945f8,f94017e1 aa0103e0 d37ef400 8b010000 d37ff800 aa0003e1 f94013e0 8b010000 f90017e0,"        sum = (sum * 10) + r;   // To compose the number     
"
488b4de8 48ba6766666666666666 4889c8 48f7ea 4889d0 48c1f802 48c1f93f 4889ca 4829d0 488945e8,f9400fe0 b203e7e1 f28ccce1 9b417c01 9342fc21 937ffc00 cb000020 f9000fe0,"        n = n / 10;             // n decrement
"
488b45f8 488945e8,f94017e0 f9000fe0,"    n = sum;                   
"
e943010000 48837de800 0f8fb2feffff,14000078 f9400fe0 f100001f 54fff0ec,"    while(n > 0){               // Now we can print the characters
"
488b4de8 48ba6766666666666666 4889c8 48f7ea 48c1fa02 4889c8 48c1f83f 4829c2 4889d0 48c1e002 4801d0 4801c0 4829c1 4889ca 488955f0,f9400fe1 b203e7e0 f28ccce0 9b407c20 9342fc02 937ffc20 cb000042 aa0203e0 d37ef400 8b020000 d37ff800 cb000020 f90013e0,"        r = n % 10;             // Selecting one number to print
"
48837df009 0f87c6000000 488b45f0 48c1e003 480570204000 488b00 ffe0,f94013e0 f100241f 54000a80 f94013e0 f100241f 54000b2c f94013e0 f100201f 54000940 f94013e0 f100201f 54000a6c f94013e0 f1001c1f 54000800 f94013e0 f1001c1f 540009ac f94013e0 f100181f 540006c0 f94013e0 f100181f 540008ec f94013e0 f100141f 54000580 f94013e0 f100141f 5400082c f94013e0 f100101f 54000440 f94013e0 f100101f 5400076c f94013e0 f1000c1f 54000300 f94013e0 f1000c1f 540006ac f94013e0 f100081f 540001c0 f94013e0 f100081f 540005ec f94013e0 f100001f 54000500 f94013e0 f100041f 54000521,"        switch(r){              // Print the corresponding character for each case    
"
bf27204000 b800000000 e8a2fdffff,90000000 91286000 97ffff3d,"        printf(""one "");    
"
e9af000000,14000029,"        break;    
"
bf2c204000 b800000000 e88efdffff,90000000 91288000 97ffff39,"        printf(""two "");    
"
e99b000000,14000025,"        break;    
"
bf31204000 b800000000 e87afdffff,90000000 9128a000 97ffff35,"        printf(""three "");    
"
e987000000,14000021,"        break;    
"
bf38204000 b800000000 e866fdffff,90000000 9128c000 97ffff31,"        printf(""four "");    
"
eb76,1400001d,"        break;    
"
bf3e204000 b800000000 e855fdffff,90000000 9128e000 97ffff2d,"        printf(""five "");    
"
eb65,14000019,"        break;    
"
bf44204000 b800000000 e844fdffff,90000000 91290000 97ffff29,"        printf(""six "");    
"
eb54,14000015,"        break;    
"
bf49204000 b800000000 e833fdffff,90000000 91292000 97ffff25,"        printf(""seven "");    
"
eb43,14000011,"        break;    
"
bf50204000 b800000000 e822fdffff,90000000 91294000 97ffff21,"        printf(""eight "");    
"
eb32,1400000d,"        break;    
"
bf57204000 b800000000 e811fdffff,90000000 91296000 97ffff1d,"        printf(""nine "");    
"
eb21,14000009,"        break;    
"
bf5d204000 b800000000 e800fdffff,90000000 91298000 97ffff19,"        printf(""zero "");    
"
eb10,14000005,"        break;    
"
bf63204000 b800000000 e8effcffff,90000000 9129a000 97ffff15,"        printf(""undefined"");    
"
90,d503201f,"        break;    
"
488b4de8 48ba6766666666666666 4889c8 48f7ea 4889d0 48c1f802 48c1f93f 4889ca 4829d0 488945e8,f9400fe0 b203e7e1 f28ccce1 9b417c01 9342fc21 937ffc00 cb000020 f9000fe0,"        n = n / 10;             //Decrementing n, ensuring the condition to the loop break
"
bf0a000000 e8a0fcffff,52800140 97ffff0b,"        printf(""\n"");       
"
90 c9 c3 662e0f1f840000000000 0f1f00,d503201f a8c37bfd d65f03c0,}  
55 4889e5 4883ec20 897dec 8975e8,a9bd7bfd 910003fd b9001fe0 b9001be1,"void PrintBits(int power, int num){
"
c745fc00000000,b9002fff,"    int firstOne = 0;
"
eb44 837dec00 7fb6,1400001b b9401fe0 7100001f 54fffc8c,"    while (power > 0) {
"
8b45e8 3b45ec 7c1d,b9401be1 b9401fe0 6b00003f 540001ab,"      if (num >= power) {
"
c745fc01000000,52800020 b9002fe0,"        firstOne = 1;
"
bf31000000 e8aafeffff,52800620 97ffffa5,"        printf(""1"");
"
8b45e8 99 f77dec 8955e8 eb10,b9401be0 b9401fe1 1ac10c02 b9401fe1 1b017c41 4b010000 b9001be0 14000006,"        num %= power;
"
837dfc01 750a,b9402fe0 7100041f 54000061,"      } else if (firstOne == 1) {
"
bf30000000 e88efeffff,52800600 97ffff98,"          printf(""0"");
"
8b45ec 89c2 c1ea1f 01d0 d1f8 8945ec,b9401fe0 531f7c01 0b000020 13017c00 b9001fe0,"      power /= 2;
"
bf0a000000 e86ffeffff,52800140 97ffff8e,"    printf(""\n"");
"
90 c9 c3,d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main() {
"
c745f800000000,b9001bff,"    int num = 0;
"
c745fc01000000,52800020 b9001fe0,"    int power = 1;
"
bf08204000 b800000000 e867feffff,90000000 91236000 97ffff7f,"    printf(""Please enter a numeric value: "");
"
488d45f8 4889c6 bf27204000 b800000000 e861feffff,910063e0 aa0003e1 90000000 9123e000 97ffff76,"    scanf(""%d"", & num);
"
8b45f8 89c6 bf2a204000 b800000000 e83dfeffff,b9401be0 2a0003e1 90000000 91240000 97ffff75,"    printf(""%d represented in binary is: "", num);
"
eb03 8b45f8 3945fc 7cf5,14000004 b9401be0 b9401fe1 6b00003f 54ffff4b,"    while (power < num) {
"
d165fc,b9401fe0 531f7800 b9001fe0,"      power *= 2;
"
8b45f8 85c0 750c,b9401be0 7100001f 540000a1,"    if (num == 0) {
"
bf48204000 e80ffeffff eb0f,90000000 91248000 97ffff5f 14000005,"      printf(""0\n"");
"
8b55f8 8b45fc 89d6 89c7 e814ffffff,b9401be0 2a0003e1 b9401fe0 97ffffb4,"      PrintBits(power, num);
"
b800000000,52800000,"    return (0);
"
c9 c3 0f1f8000000000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec30,a9bc7bfd 910003fd,"{
"
488d45d8 4889c6 bf04204000 b800000000 e8ecfeffff,910063e0 aa0003e1 90000000 9120a000 97ffffb0,"    scanf(""%lld"",&r);
"
48c745e800000000 e9ab000000 488345e801 488b45d8 483945e8 0f8c47ffffff,f90017ff 14000036 f94017e0 91000400 f90017e0 f9400fe0 f94017e1 eb00003f 54fff90b,"    for(i=0;i<r;i++)
"
bf0a000000 e8b5feffff,52800140 97ffffb4,"      printf(""\n"");
"
48c745f000000000 eb14 488345f001 488b45d8 4883e801 482b45e8 483945f0 7cda,f9001bff 14000007 f9401be0 91000400 f9001be0 f9400fe0 d1000401 f94017e0 cb000020 f9401be1 eb00003f 54fffe8b,"        for(j=0;j<r-1-i;j++)
"
bf09204000 b800000000 e8acfeffff,90000000 9120c000 97ffffab,"            printf(""  "");
"
48c745f800000000 eb4e 488345f801 488b45f8 483b45e8 7ea8,f9001fff 1400001a f9401fe0 91000400 f9001fe0 f9401fe1 f94017e0 eb00003f 54fffc8d,"        for(k=0;k<=i;k++){
"
48837de800 7407 48837df800 750a,f94017e0 f100001f 54000080 f9401fe0 f100001f 54000081,"            if(i==0 || k==0)
"
48c745e001000000 eb1b,d2800020 f90013e0 1400000a,"                coeff=1;
"
488b45e8 482b45f8 4883c001 480faf45e0 4899 48f77df8 488945e0,f94017e1 f9401fe0 cb000020 91000401 f94013e0 9b007c21 f9401fe0 9ac00c20 f90013e0,"                coeff=coeff*(i-k+1)/k;
"
488b45e0 4889c6 bf0c204000 b800000000 e842feffff,f94013e1 90000000 9120e000 97ffff89,"            printf(""%4lld"",coeff);
"
bf0a000000 e819feffff,52800140 97ffff84,"        printf(""\n"");
"
b800000000,52800000,"    return 0;
"
c9 c3 662e0f1f840000000000 0f1f440000,a8c47bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main() {
"
bf04204000 b800000000 e8e3feffff,90000000 911da000 97ffffb6,"  printf(""Enter a positive integer: "");
"
488d45f8 4889c6 bf1f204000 b800000000 e8ddfeffff,910063e0 aa0003e1 90000000 911e2000 97ffffad,"  scanf(""%d"", & number);
"
8b45f8 89c7 e81e000000 8945fc,b9401be0 94000009 b9001fe0,"  result = sum(number);
"
8b45fc 89c6 bf22204000 b800000000 e8acfeffff,b9401fe1 90000000 911e4000 97ffffaa,"  printf(""sum = %d"", result);
"
b800000000,52800000,"  return 0;
"
c9 c3,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10 897dfc,a9be7bfd 910003fd b9001fe0,"int sum(int num) {
"
837dfc00 7414,b9401fe0 7100001f 54000100,"  if (num != 0)
"
8b45fc 83e801 89c7 e8e2ffffff 8b55fc 01d0 eb03,b9401fe0 51000400 97fffff8 2a0003e1 b9401fe0 0b000020 14000002,"    return num + sum(num - 1); // sum() function calls itself
"
8b45fc,b9401fe0,"    return num;
"
c9 c3 662e0f1f840000000000 90,a8c27bfd d65f03c0,"}
"
55 4889e5 4881eca0000000,a9b67bfd 910003fd,"{
"
bf04204000 b800000000 e8e0feffff,90000000 91284000 97ffffba,"	printf(""Enter no. of elements:"");
"
488d856cffffff 4889c6 bf1b204000 b800000000 e8d7feffff,910053e0 aa0003e1 90000000 9128a000 97ffffb1,"	scanf(""%d"",&n);
"
bf1e204000 b800000000 e8b8feffff,90000000 9128c000 97ffffb2,"	printf(""\nEnter elements:"");
"
c745fc01000000 eb2a 8345fc01 8b856cffffff 3945fc 7ecb,52800020 b9009fe0 1400000c b9409fe0 11000400 b9009fe0 b94017e0 b9409fe1 6b00003f 54fffe4d,"	for(i=1;i<=n;i++)
"
488d8570ffffff 8b55fc 4863d2 48c1e202 4801d0 4889c6 bf1b204000 b800000000 e899feffff,910063e1 b9809fe0 d37ef400 8b000020 aa0003e1 90000000 9128a000 97ffffa3,"		scanf(""%d"",&heap[i]);
"
8b856cffffff 898570ffffff,b94017e0 b9001be0,"	heap[0]=n;
"
488d8570ffffff 4889c7 e8a6000000,910063e0 94000032,"	create(heap);
"
eb56 8b8570ffffff 83f801 7f9f,14000015 b9401be0 7100041f 54fffd4c,"	while(heap[0] > 1)
"
8b8570ffffff 8945f8,b9401be0 b9009be0,"		last=heap[0];
"
8b8574ffffff 8945f4,b9401fe0 b90097e0,"		temp=heap[1];
"
8b45f8 4898 8b848570ffffff 898574ffffff,b9809be0 d37ef400 910063e1 b8606820 b9001fe0,"		heap[1]=heap[last];
"
8b45f8 4898 8b55f4 89948570ffffff,b9809be0 d37ef400 910063e1 b94097e2 b8206822,"		heap[last]=temp;
"
8b8570ffffff 83e801 898570ffffff,b9401be0 51000400 b9001be0,"		heap[0]--;
"
488d8570ffffff be01000000 4889c7 e893000000,910063e0 52800021 94000036,"		down_adjust(heap,1);
"
bf2f204000 e8e2fdffff,90000000 91292000 97ffff79,"	printf(""\nArray after sorting:\n"");
"
c745fc01000000 eb21 8345fc01 8b856cffffff 3945fc 7ed4,52800020 b9009fe0 1400000c b9409fe0 11000400 b9009fe0 b94017e0 b9409fe1 6b00003f 54fffe4d,"	for(i=1;i<=n;i++)
"
8b45fc 4898 8b848570ffffff 89c6 bf45204000 b800000000 e8ccfdffff,b9809fe0 d37ef400 910063e1 b8606820 2a0003e1 90000000 91298000 97ffff76,"		printf(""%d "",heap[i]);
"
90 90 c9 c3,d503201f d503201f a8ca7bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8,a9bd7bfd 910003fd f9000fe0,"{
"
488b45e8 8b00 8945f8,f9400fe0 b9400000 b9002be0,"	n=heap[0]; //no. of elements
"
8b45f8 89c2 c1ea1f 01d0 d1f8 8945fc eb15 836dfc01 837dfc00 7fe5,b9402be0 531f7c01 0b000020 13017c00 b9002fe0 14000007 b9402fe0 51000400 b9002fe0 b9402fe0 7100001f 54ffff0c,"	for(i=n/2;i>=1;i--)
"
8b55fc 488b45e8 89d6 4889c7 e80e000000,b9402fe1 f9400fe0 9400000b,"		down_adjust(heap,i);
"
90 90 c9 c3,d503201f d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 48897de8 8975e4,d10083ff f90007e0 b90007e1,"{
"
c745f801000000,52800020 b9001be0,"	int j,temp,n,flag=1;
"
488b45e8 8b00 8945f4,f94007e0 b9400000 b90017e0,"	n=heap[0];
"
e9e6000000 8b45e4 01c0 3945f4 7c0a 837df801 0f8406ffffff,1400003e b94007e0 531f7800 b94017e1 6b00003f 5400008b b9401be0 7100041f 54fff780,"	while(2*i<=n && flag==1)
"
8b45e4 01c0 8945fc,b94007e0 531f7800 b9001fe0,"		j=2*i;	//j points to left child
"
8b45fc 3b45f4 7d38 8b45fc 4898 4883c001 488d148500000000 488b45e8 4801d0 8b10 8b45fc 4898 488d0c8500000000 488b45e8 4801c8 8b00 39c2 7e04,b9401fe1 b94017e0 6b00003f 5400022a b9801fe0 91000400 d37ef400 f94007e1 8b000020 b9400001 b9801fe0 d37ef400 f94007e2 8b000040 b9400000 6b00003f 5400008d,"		if(j+1<=n && heap[j+1] > heap[j])
"
8345fc01,b9401fe0 11000400 b9001fe0,"			j=j+1;
"
8b45e4 4898 488d148500000000 488b45e8 4801d0 8b10 8b45fc 4898 488d0c8500000000 488b45e8 4801c8 8b00 39c2 7e09,b98007e0 d37ef400 f94007e1 8b000020 b9400001 b9801fe0 d37ef400 f94007e2 8b000040 b9400000 6b00003f 5400006d,"		if(heap[i] > heap[j])
"
c745f800000000 eb65,b9001bff 14000019,"			flag=0;
"
8b45e4 4898 488d148500000000 488b45e8 4801d0 8b00 8945f0,b98007e0 d37ef400 f94007e1 8b000020 b9400000 b90013e0,"			temp=heap[i];
"
8b45fc 4898 488d148500000000 488b45e8 4801d0 8b55e4 4863d2 488d0c9500000000 488b55e8 4801ca 8b00 8902,b9801fe0 d37ef400 f94007e1 8b000021 b98007e0 d37ef400 f94007e2 8b000040 b9400021 b9000001,"			heap[i]=heap[j];
"
8b45fc 4898 488d148500000000 488b45e8 4801c2 8b45f0 8902,b9801fe0 d37ef400 f94007e1 8b000020 b94013e1 b9000001,"			heap[j]=temp;
"
8b45fc 8945e4,b9401fe0 b90007e0,"			i=j;
"
90 5d c3 0f1f8000000000,d503201f 910083ff d65f03c0,}
55 4889e5 4157 4156 4155 4154 53 4883ec58 4889e0 4889c3,a9b37bfd 910003fd a90153f3 a9025bf5 a90363f7 a9046bf9 f9002bfb 910003e0 aa0003f3,"{
"
bf08204000 e8c9feffff,90000000 91276000 97ffffab,"    printf(""enter the number of elements in an arrays\n"");
"
488d45a4 4889c6 bf32204000 b800000000 e8d3feffff,910293a0 aa0003e1 90000000 91282000 97ffffaa,"    scanf(""%d"",&n);
"
8b45a4 4863d0 4883ea01 488955c0 4863d0 48895590 48c7459800000000 4863d0 48895580 48c7458800000000 4898 488d148500000000 b810000000 4883e801 4801d0 b910000000 ba00000000 48f7f1 486bc010 4829c4 4889e0 4883c003 48c1e802 48c1e002 488945b8 8b45a4 4863d0 4883ea01 488955b0 4863d0 4989d6 41bf00000000 4863d0 4989d4 41bd00000000 4898 488d148500000000 b810000000 4883e801 4801d0 b910000000 ba00000000 48f7f1 486bc010 4829c4 4889e0 4883c003 48c1e802 48c1e002 488945a8,b940a7a0 93407c01 d1000421 f90063a1 93407c01 f9004ba1 f9004fbf a9490fa2 aa0203e1 d37bfc21 aa0303e4 d37be89b aa1b003b aa0203e1 d37be83a 93407c01 f90043a1 f90047bf a9480fa2 aa0203e1 d37bfc21 aa0303e4 d37be899 aa190039 aa0203e1 d37be838 93407c00 d37ef400 91003c00 d344fc00 d37cec00 cb2063ff 910003e0 91000c00 d342fc00 d37ef400 f9005fa0 b940a7a0 93407c01 d1000421 f9005ba1 93407c01 f9003ba1 f9003fbf a9470fa2 aa0203e1 d37bfc21 aa0303e4 d37be897 aa170037 aa0203e1 d37be836 93407c01 f90033a1 f90037bf a9460fa2 aa0203e1 d37bfc21 aa0303e4 d37be895 aa150035 aa0203e1 d37be834 93407c00 d37ef400 91003c00 d344fc00 d37cec00 cb2063ff 910003e0 91000c00 d342fc00 d37ef400 f90057a0,"    int a[n],b[n];
"
bf38204000 e8ddfdffff,90000000 91284000 97ffff59,"    printf(""enter the elements of 1st array\n"");
"
c745cc00000000 eb2a 8345cc01 8b45a4 3945cc 7cce,b900cfbf 1400000c b940cfa0 11000400 b900cfa0 b940a7a0 b940cfa1 6b00003f 54fffe4b,"    for(i=0;i<n;i++)
"
8b45cc 4898 488d148500000000 488b45b8 4801d0 4889c6 bf32204000 b800000000 e8cefdffff,b980cfa0 d37ef400 f9405fa1 8b000020 aa0003e1 90000000 91282000 97ffff53,"        scanf(""%d"",&a[i]);
"
bf58204000 e898fdffff,90000000 9128c000 97ffff45,"    printf(""enter the elements of 2nd array\n"");
"
c745c800000000 eb2a 8345c801 8b45a4 3945c8 7cce,b900cbbf 1400000c b940cba0 11000400 b900cba0 b940a7a0 b940cba1 6b00003f 54fffe4b,"    for(j=0;j<n;j++)
"
8b45c8 4898 488d148500000000 488b45a8 4801d0 4889c6 bf32204000 b800000000 e889fdffff,b980cba0 d37ef400 f94057a1 8b000020 aa0003e1 90000000 91282000 97ffff3f,"        scanf(""%d"",&b[j]);
"
bf78204000 b800000000 e85efdffff,90000000 91294000 97ffff39,"    printf(""The common numbers are: "");
"
c745cc00000000 eb55 8345cc01 8b45a4 3945cc 7ca3 4889dc b800000000,b900cfbf 1400001c b940cfa0 11000400 b900cfa0 b940a7a0 b940cfa1 6b00003f 54fffc4b 9100027f 52800000,"   for(i=0; i<n; i++){
"
c745c800000000 eb40 8345c801 8b45a4 3945c8 7cb8,b900cbbf 14000013 b940cba0 11000400 b900cba0 b940a7a0 b940cba1 6b00003f 54fffd6b,"	   for(j=0;j<n;j++){
"
488b45b8 8b55cc 4863d2 8b0c90 488b45a8 8b55c8 4863d2 8b0490 39c1 751e,f9405fa0 b980cfa1 b8617801 f94057a0 b980cba2 b8627800 6b00003f 54000101,"		   if(a[i]==b[j]){
"
488b45a8 8b55c8 4863d2 8b0490 89c6 bf91204000 b800000000 e810fdffff,f94057a0 b980cba1 b8617800 2a0003e1 90000000 9129c000 97ffff26,"			   printf(""%d\n"", b[j]);
"
488d65d8 5b 415c 415d 415e 415f 5d c3 90,910003bf a94153f3 a9425bf5 a94363f7 a9446bf9 f9402bfb a8cd7bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{ float a,c;
"
bf04204000 b800000000 e8e3feffff,90000000 911d4000 97ffffb6,"printf(""Enter the Number : "");
"
488d45f4 4889c6 bf18204000 b800000000 e8ddfeffff,910053e0 aa0003e1 90000000 911da000 97ffffad,"scanf(""%f"",&a);
"
f30f1045f4 f30f2cc0 8945fc,bd4017e0 5ea1b800 bd001fe0,"b=a/1;
"
f30f1045f4 660fefc9 f30f2a4dfc f30f5cc1 f30f1145f8,bd4017e1 bd401fe0 5e21d800 1e203820 bd001be0,"c=a-b;
"
8b45fc 89c6 bf1b204000 b800000000 e896feffff,b9401fe1 90000000 911dc000 97ffffa5,"printf(""Integer Part is : %d\n"",b);
"
660fefd2 f30f5a55f8 66480f7ed0 66480f6ec0 bf31204000 b801000000 e874feffff,bd401be0 1e22c000 90000000 911e2000 97ffffa0,"printf(""Decimal Part is : %f"",c);
"
90 c9 c3 90,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{ int a,b,c;
"
bf04204000 b800000000 e8e3feffff,90000000 911cc000 97ffffb6,"printf(""Enter two Numbers : "");
"
488d55f4 488d45f8 4889c6 bf19204000 b800000000 e8d9feffff,910053e1 910063e0 aa0103e2 aa0003e1 90000000 911d2000 97ffffab,"scanf(""%d %d"",&a,&b);
"
8b55f8 8b45f4 01d0 8945fc,b9401be1 b94017e0 0b000020 b9001fe0,"c=a+b;
"
8b45fc 89c6 bf1f204000 b800000000 e8aafeffff,b9401fe1 90000000 911d4000 97ffffa7,"printf(""The Sum is %d"",c);
"
90 c9 c3 0f1f8000000000,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 897dec,d10083ff b9000fe0,"{
"
f20f1005e30e0000 f20f1145f8,1e6e1000 fd000fe0,"	double r = 1; // initial guess for the root
"
eb24 f20f1045f8 f20f59c0 660fefc9 f20f2a4dec f20f5cc1 f30f7e0db20e0000 660f54c1 f20f100db60e0000 660f2fc1 77ac,1400000a fd400fe0 1e600801 b9400fe0 1e620000 1e603820 1e60c000 90000000 fd43cc01 1e612010 54fffdcc,"	while (fabs(r*r - x) > MAX_ERROR)
"
660fefc0 f20f2a45ec f20f5e45f8 f20f5845f8 f20f100dc90e0000 f20f5ec1 f20f1145f8,b9400fe0 1e620001 fd400fe0 1e601821 fd400fe0 1e602821 1e601000 1e601820 fd000fe0,"		r = (r + x/r) / 2; 
"
f20f1045f8 66480f7ec0,fd400fe0,"	return r;
"
66480f6ec0 5d c3,910083ff d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
488d45fc 4889c6 bf18204000 b800000000 e871feffff,910073e0 aa0003e1 90000000 911e2000 97ffff95,"	scanf(""%d"", &num);
"
8b45fc 89c7 e85dffffff 66480f7ec0 66480f6ec0 bf1b204000 b801000000 e83efeffff,b9401fe0 97ffffdd 90000000 911e4000 97ffff94,"	printf(""%lf \n"", squareRoot(num));
"
b800000000,52800000,"	return 0;
"
c9 c3 0f1f8000000000,a8c27bfd d65f03c0,}
55 4889e5 4883ec10,a9be7bfd 910003fd,"{ 
"
c745f800000000,b9001bff,"int i,n,c=0;
"
bf04204000 b800000000 e8dcfeffff,90000000 911e4000 97ffffb5,"printf(""Enter a Number : "");
"
488d45f4 4889c6 bf16204000 b800000000 e8d6feffff,910053e0 aa0003e1 90000000 911ea000 97ffffac,"scanf(""%d"",&n);
"
c745fc02000000 eb26 8345fc01 8b45f4 3945fc 7cd2,52800040 b9001fe0 14000013 b9401fe0 11000400 b9001fe0 b94017e0 b9401fe1 6b00003f 54fffd6b,"for(i=2;i<n;i++)
"
8b45f4 99 f77dfc 89d0 85c0 7515,b94017e0 b9401fe1 1ac10c02 b9401fe1 1b017c41 4b010000 7100001f 54000101,"  if(n%i==0)
"
bf19204000 b800000000 e8a1feffff,90000000 911ec000 97ffffa2,"    printf(""NOT a prime number"");
"
8345f801,b9401be0 11000400 b9001be0,"    c++;
"
eb0c,14000008,"    break;
"
837df800 7514,b9401be0 7100001f 540000c1,"if(c==0)
"
8b45f4 89c6 bf2c204000 b800000000 e875feffff,b94017e0 2a0003e1 90000000 911f2000 97ffff8f,"printf(""%d is a prime number"",n);
"
90 c9 c3 6690,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10 897dfc,a9be7bfd 910003fd b9001fe0,"int factorial(int num) {
"
837dfc01 7507,b9401fe0 7100041f 54000061,"  if (num == 1)
"
b801000000 eb11,52800020 14000007,"    return 1;
"
8b45fc 83e801 89c7 e8dbffffff 0faf45fc,b9401fe0 51000400 97fffff6 2a0003e1 b9401fe0 1b007c20,"    return num * factorial(num - 1);
"
c9 c3,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9bd7bfd 910003fd f9000bf3,"int main() {
"
bf04204000 b800000000 e8b8feffff,90000000 911dc000 97ffffa5,"  printf(""Type a positive number: "");
"
488d45fc 4889c6 bf1d204000 b800000000 e8b2feffff,9100b3e0 aa0003e1 90000000 911e4000 97ffff9c,"  scanf(""%d"", & number);
"
8b45fc 89c7 e89effffff 89c2 8b45fc 89c6 bf20204000 b800000000 e882feffff,b9402ff3 b9402fe0 97ffffe3 2a0003e2 2a1303e1 90000000 911e6000 97ffff98,"  printf(""%d! is equal to %d"", number, factorial(number));
"
b800000000,52800000,"  return 0;
"
c9 c3 662e0f1f840000000000 90,f9400bf3 a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{ int a,b,c;
"
bf04204000 b800000000 e8e3feffff,90000000 911cc000 97ffffb6,"printf(""Enter two Numbers : "");
"
488d55f4 488d45f8 4889c6 bf19204000 b800000000 e8d9feffff,910053e1 910063e0 aa0103e2 aa0003e1 90000000 911d2000 97ffffab,"scanf(""%d %d"",&a,&b);
"
8b45f8 8b4df4 99 f7f9 8945fc,b9401be1 b94017e0 1ac00c20 b9001fe0,"c=a/b;
"
8b45fc 89c6 bf1f204000 b800000000 e8a9feffff,b9401fe1 90000000 911d4000 97ffffa7,"printf(""Division is %d"",c);
"
90 c9 c3 660f1f440000,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec20 897dec,a9bd7bfd 910003fd b9001fe0,"{
"
bf00000000 e8d5feffff 89c7 e8befeffff,d2800000 97ffff96 97ffffad,"  srand(time(NULL));
"
8b45ec 8945fc,b9401fe0 b9002fe0,"  int n = (DiceSides - 1) + 1; //n in this case is the range of the random int
"
e8e3feffff 99 f77dfc 89d0 83c001 8945f8,97ffff96 b9402fe1 1ac10c02 b9402fe1 1b017c41 4b010000 11000400 b9002be0,"  int DiceRoll  = 1 + rand() % n;
"
8b45f8,b9402be0,"  return DiceRoll;
"
c9 c3,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec20 897dec 89f0 8845e8,a9bd7bfd 910003fd b9001fe0 39006fe1,"{
"
bf08204000 e868feffff,90000000 9122e000 97ffff91,"  printf(""Enter the number of sides your die has. \n"");
"
488d45f8 4889c6 bf31204000 b800000000 e892feffff,9100a3e0 aa0003e1 90000000 9123a000 97ffff90,"  scanf(""%d"",&DiceSides);
"
8b45f8 89c7 e88effffff 8945fc,b9402be0 97ffffe0 b9002fe0,"  int Dice = Diceroll(DiceSides);
"
8b45fc 89c6 bf34204000 b800000000 e841feffff,b9402fe1 90000000 9123c000 97ffff91,"  printf(""you rolled a %d \n"",Dice);
"
b800000000,52800000,"  return 0;
"
c9 c3 662e0f1f840000000000,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf08204000 e8d8feffff,90000000 911e2000 97ffffb2,"    printf(""Enter two no :\n"");
"
488d55f4 488d45f8 4889c6 bf17204000 b800000000 e8defeffff,910053e1 910063e0 aa0103e2 aa0003e1 90000000 911e6000 97ffffaf,"    scanf(""%d%d"",&a,&b);
"
8b45f8 8945fc,b9401be0 b9001fe0,"    c=a;
"
8b45f4 8945f8,b94017e0 b9001be0,"    a=b;
"
8b45fc 8945f4,b9401fe0 b90017e0,"    b=c;
"
8b55f4 8b45f8 89c6 bf20204000 b800000000 e8a5feffff,b9401be0 b94017e1 2a0103e2 2a0003e1 90000000 911e8000 97ffffa6,"    printf(""After swapping value of a = %d\n b =%d"",a,b);
"
b800000000,52800000,"    return 0;
"
c9 c3 662e0f1f840000000000 0f1f4000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
48c745f804204000,90000000 911ca000 f9000fe0,"char *cards = ""JQK"";
"
488b45f8 0fb64002 8845f7,f9400fe0 39400800 39005fe0,"char a_card = cards[2];
"
488b45f8 488d5002 488b45f8 0fb64001 8802,f9400fe0 91000800 f9400fe1 39400421 39000001,"cards[2] = cards[1];
"
488b45f8 488d5001 488b45f8 0fb600 8802,f9400fe0 91000400 f9400fe1 39400021 39000001,"cards[1] = cards[0];
"
488b45f8 0fb65002 488b45f8 8810,f9400fe0 39400801 f9400fe0 39000001,"cards[0] = cards[2];
"
488b45f8 488d5002 488b45f8 0fb64001 8802,f9400fe0 91000800 f9400fe1 39400421 39000001,"cards[2] = cards[1];
"
488b45f8 488d5001 0fb645f7 8802,f9400fe0 91000400 39405fe1 39000001,"cards[1] = a_card;
"
488b45f8 4889c7 e892feffff,f9400fe0 97ffff96,"puts (cards);
"
b800000000,52800000,"return 0;
"
c9 c3 662e0f1f840000000000 90,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8 488975e0,a9bd7bfd 910003fd f9000fe0 f9000be1,"{
"
48837de000 750a,f9400be0 f100001f 54000061,"	if(y == 0)
"
b801000000 e953010000,d2800020 1400005c,"		return 1;
"
48837de001 7509,f9400be0 f100041f 54000061,"	else if (y == 1)
"
488b45e8 e943010000,f9400fe0 14000057,"		return x;
"
488b45e0 4889c2 48c1ea3f 4801d0 48d1f8 4889c2 488b45e8 4889d6 4889c7 e8acffffff 488945f8,f9400be0 d37ffc01 8b000020 9341fc00 aa0003e1 f9400fe0 97ffffec f90017e0,"		long ans = fastexp(x, y/2);
"
488b45e0 83e001 4885c0 756f,f9400be0 92400000 f100001f 540003e1,"		if(y % 2 == 0)
"
488b4df8 48bae58fa212315f7089 4889c8 48f7ea 488d040a 48c1f81d 4889ca 48c1fa3f 4829d0 4869d007ca9a3b 4889c8 4829d0 480faf45f8 4889c1 48bae58fa212315f7089 4889c8 48f7ea 488d040a 48c1f81d 4889ca 48c1fa3f 4829d0 4869d007ca9a3b 4889c8 4829d0 e9a1000000,f94017e0 d291fca1 f2a25441 f2cbe621 f2f12e01 9b417c01 8b000021 935dfc22 937ffc01 cb010041 d29940e2 f2a77342 9b027c21 cb010001 f94017e0 9b007c21 d291fca0 f2a25440 f2cbe620 f2f12e00 9b407c20 8b010000 935dfc02 937ffc20 cb000040 d29940e2 f2a77342 9b027c00 cb000020 1400002d,"			return (ans % m * ans % m) % m;
"
488b4df8 48bae58fa212315f7089 4889c8 48f7ea 488d040a 48c1f81d 4889ca 48c1fa3f 4829d0 4869d007ca9a3b 4889c8 4829d0 480faf45f8 4889c1 48bae58fa212315f7089 4889c8 48f7ea 488d040a 48c1f81d 4889ca 48c1fa3f 4829d0 4869d007ca9a3b 4889c8 4829d0 480faf45e8 4889c1 48bae58fa212315f7089 4889c8 48f7ea 488d040a 48c1f81d 4889ca 48c1fa3f 4829d0 4869d007ca9a3b 4889c8 4829d0,f94017e0 d291fca1 f2a25441 f2cbe621 f2f12e01 9b417c01 8b000021 935dfc22 937ffc01 cb010041 d29940e2 f2a77342 9b027c21 cb010001 f94017e0 9b007c20 d291fca1 f2a25441 f2cbe621 f2f12e01 9b417c01 8b000021 935dfc22 937ffc01 cb010041 d29940e2 f2a77342 9b027c21 cb010001 f9400fe0 9b007c21 d291fca0 f2a25440 f2cbe620 f2f12e00 9b407c20 8b010000 935dfc02 937ffc20 cb000040 d29940e2 f2a77342 9b027c00 cb000020,"			return ((ans % m * ans % m) % m * x % m) % m;
"
c9 c3,a8c37bfd d65f03c0,"}
"
55 4889e5 53 4883ec38,a9bb7bfd 910003fd f9000bf3,"{
"
c745ec01000000 e9af000000 8345ec01 817dec80841e00 0f8e44ffffff,52800020 b9004fe0 14000036 b9404fe0 11000400 b9004fe0 b9404fe1 52909000 72a003c0 6b00003f 54fff8ed,"	for(int i = 1; i < 2000001; i++)
"
8b45ec 83e801 4898 488b0cc560404000 48bae58fa212315f7089 4889c8 48f7ea 488d040a 48c1f81d 4889ca 48c1fa3f 4829d0 4869d007ca9a3b 4889c8 4829d0 8b55ec 4863ca 4869c9992fb844 48c1e920 c1f91c 89d6 c1fe1f 29f1 69f107ca9a3b 89d1 29f1 4863d1 480fafc2 4889c1 48bae58fa212315f7089 4889c8 48f7ea 488d040a 48c1f81d 4889ca 48c1fa3f 4829d0 4869d007ca9a3b 4889c8 4829d0 8b55ec 4863d2 488904d560404000,b9404fe0 51000401 b0000080 9100e000 93407c21 f8617800 d291fca1 f2a25441 f2cbe621 f2f12e01 9b417c01 8b000021 935dfc22 937ffc01 cb010041 d29940e2 f2a77342 9b027c21 cb010001 b9404fe0 5285f322 72a89702 9b227c02 d360fc42 131c7c43 131f7c02 4b020062 529940e3 72a77343 1b037c42 4b020002 93407c40 9b007c20 d291fca1 f2a25441 f2cbe621 f2f12e01 9b417c01 8b000021 935dfc22 937ffc01 cb010041 d29940e2 f2a77342 9b027c21 cb010001 b0000080 9100e000 b9804fe2 f8227801,"		fact[i] = ((fact[i-1] % m) * (i % m)) % m;
"
bf08204000 b800000000 e8a4fcffff,90000000 912d2000 97ffff12,"	printf(""Enter the number of test cases: "");
"
488d45dc 4889c6 bf29204000 b800000000 e89efcffff,9100f3e0 aa0003e1 90000000 912dc000 97ffff09,"	scanf(""%d"", &T);
"
e988010000 8b45dc 8d50ff 8955dc 85c0 0f8567feffff,14000065 b9403fe0 51000401 b9003fe1 7100001f 54fff301,"	while(T--)
"
bf30204000 b800000000 e87afcffff,90000000 912de000 97ffff09,"		printf(""Enter the two numbers in the form of xCy: "");
"
488d55c8 488d45d0 4889c6 bf5b204000 b800000000 e870fcffff,9100a3e1 9100c3e0 aa0103e2 aa0003e1 90000000 912ea000 97fffefe,"		scanf(""%ld%ld"", &n, &r);
"
488b45d0 488b0cc560404000 48bae58fa212315f7089 4889c8 48f7ea 488d040a 48c1f81d 4889c2 4889c8 48c1f83f 4889d3 4829c3 4869c307ca9a3b 4889cb 4829c3 488b45c8 488b0cc560404000 48bae58fa212315f7089 4889c8 48f7ea 488d040a 48c1f81d 4889ca 48c1fa3f 4829d0 4869d007ca9a3b 4889c8 4829d0 488b4dd0 488b55c8 4829d1 488b14cd60404000 480fafc2 4889c1 48bae58fa212315f7089 4889c8 48f7ea 488d040a 48c1f81d 4889ca 48c1fa3f 4829d0 4869d007ca9a3b 4889c8 4829d0 be05ca9a3b 4889c7 e894fcffff 480fafd8 4889de 48bae58fa212315f7089 4889f0 48f7ea 488d0432 48c1f81d 4889c2 4889f0 48c1f83f 4889d1 4829c1 4869c107ca9a3b 4829c6 4889f1 48bae58fa212315f7089 4889c8 48f7ea 488d040a 48c1f81d 4889ca 48c1fa3f 4829d0 488945e0 488b45e0 4869c007ca9a3b 4829c1 4889ca 488955e0,f9401be1 b0000080 9100e000 f8617800 d291fca1 f2a25441 f2cbe621 f2f12e01 9b417c01 8b000021 935dfc22 937ffc01 cb010053 d29940e1 f2a77341 9b017e61 cb010013 f94017e1 b0000080 9100e000 f8617800 d291fca1 f2a25441 f2cbe621 f2f12e01 9b417c01 8b000021 935dfc22 937ffc01 cb010041 d29940e2 f2a77342 9b027c21 cb010001 f9401be2 f94017e0 cb000042 b0000080 9100e000 f8627800 9b007c20 d291fca1 f2a25441 f2cbe621 f2f12e01 9b417c01 8b000021 935dfc22 937ffc01 cb010042 d29940e1 f2a77341 9b017c41 cb010002 d29940a1 f2a77341 aa0203e0 97ffff0e 9b007e61 d291fca0 f2a25440 f2cbe620 f2f12e00 9b407c20 8b010000 935dfc02 937ffc20 cb000040 d29940e2 f2a77342 9b027c00 cb000020 d291fca1 f2a25441 f2cbe621 f2f12e01 9b417c01 8b000021 935dfc22 937ffc01 cb010042 d29940e1 f2a77341 9b017c41 cb010000 f90023e0,"		ans = (fact[n]%m * fastexp((fact[r]%m * fact[n-r]%m) % m, m - 2) % m) % m;
"
488b45e0 4889c6 bf62204000 b800000000 e801fbffff,f94023e1 90000000 912ec000 97fffea8,"		printf(""%ld\n"", ans);
"
b800000000,52800000,"	return 0;
"
488b5df8 c9 c3 0f1f440000,f9400bf3 a8c57bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf08204000 e8d8feffff,90000000 911e8000 97ffffb2,"    printf(""Enter Two Numbers\n"");
"
488d55f8 488d45fc 4889c6 bf1a204000 b800000000 e8defeffff,910063e1 910073e0 aa0103e2 aa0003e1 90000000 911ee000 97ffffaf,"    scanf(""%d %d"",&a,&b); /*Taking input of Two Variables*/
"
8b55fc 8b45f8 01d0 8945fc,b9401fe1 b9401be0 0b000020 b9001fe0,"    a=a+b; /*swapping */
"
8b55fc 8b45f8 29c2 8955f8,b9401fe1 b9401be0 4b000020 b9001be0,"    b=a-b; /* the two */
"
8b55fc 8b45f8 29c2 8955fc,b9401fe1 b9401be0 4b000020 b9001fe0,"    a=a-b; /*numbers*/
"
8b55f8 8b45fc 89c6 bf20204000 b800000000 e896feffff,b9401fe0 b9401be1 2a0103e2 2a0003e1 90000000 911f0000 97ffffa0,"    printf(""the number after swapping are %d %d\n"",a,b);/*printing*/
"
b800000000,52800000,"    return 0;
"
c9 c3 662e0f1f840000000000 0f1f440000,a8c27bfd d65f03c0,}
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf08204000 e8c8feffff,90000000 913a4000 97ffffa2,"		printf(""\nEnter what you wanna do:\n1.Binsert\n2.Einsert\n3.Minsert\n4.Display\n5.Bdelete\n6.Edelete\n7.Mdelete\n8.Copy\n9.DeleteLL\n10.Reverse\n11.Quit\n"");
"
488d45fc 4889c6 bf8d204000 b800000000 e8e2feffff,910073e0 aa0003e1 90000000 913c6000 97ffffa5,"		scanf(""%d"",&opt);
"
8b45fc 83f807 77d8 89c0 488b04c5e0204000 ffe0,b9401fe0 71001c1f 54000ae0 71001c1f 54fffe8c 7100181f 54000a20 7100181f 54fffe0c 7100141f 54000960 7100141f 54fffd8c 7100101f 54000640 7100101f 54fffd0c 71000c1f 54000460 71000c1f 54fffc8c 7100041f 54000080 7100081f 540001a0 1400004b,"		switch(opt)
"
bf90204000 b800000000 e89ffeffff,90000000 913c8000 97ffff8c,"					printf(""\nEnter the element"");
"
488d45f8 4889c6 bf8d204000 b800000000 e8a9feffff,910063e0 aa0003e1 90000000 913c6000 97ffff83,"					scanf(""%d"",&ele);
"
8b45f8 89c7 e813010000,b9401be0 94000042,"					Binsert(ele);
"
e909010000,14000040,"					break;
"
bf90204000 b800000000 e86bfeffff,90000000 913c8000 97ffff81,"					printf(""\nEnter the element"");
"
488d45f8 4889c6 bf8d204000 b800000000 e875feffff,910063e0 aa0003e1 90000000 913c6000 97ffff78,"					scanf(""%d"",&ele);
"
488b154e2e0000 8b45f8 4889d6 89c7 e81f010000,b9401be2 d0000080 91018000 f9400000 aa0003e1 2a0203e0 9400004b,"					Einsert(ele,head);
"
e9cb000000,14000030,"					break;
"
bf90204000 b800000000 e82dfeffff,90000000 913c8000 97ffff71,"					printf(""\nEnter the element"");
"
488d45f8 4889c6 bf8d204000 b800000000 e837feffff,910063e0 aa0003e1 90000000 913c6000 97ffff68,"					scanf(""%d"",&ele);
"
8b45f8 89c7 e84f010000,b9401be0 9400005c,"					Minsert(ele);
"
e997000000,14000025,"					break;
"
bfa3204000 b800000000 e8f9fdffff,90000000 913ce000 97ffff66,"					printf(""\nEnter the LL(1/2)"");
"
488d45f8 4889c6 bf8d204000 b800000000 e803feffff,910063e0 aa0003e1 90000000 913c6000 97ffff5d,"					scanf(""%d"",&ele);
"
8b45f8 83f801 7511,b9401be0 7100041f 540000c1,"					if(ele==1)
"
488b05d42d0000 4889c7 e8de010000,d0000080 91018000 f9400000 9400008e,"						Display(head);
"
eb59 eb48,14000015 14000010,"					break;
"
488b05cb2d0000 4889c7 e8cd010000,d0000080 9101a000 f9400000 94000089,"						Display(head2);
"
b800000000 e80e020000,9400009e,"					Bdelete();
"
eb3c,1400000e,"					break;
"
b800000000 e836020000,940000ae,"					Edelete();
"
eb30,1400000c,"					break;
"
bfb8204000 b800000000 e892fdffff,90000000 913d4000 97ffff4d,"					printf(""\nEnter the element you wanna delete:"");
"
488d45f8 4889c6 bf8d204000 b800000000 e89cfdffff,910063e0 aa0003e1 90000000 913c6000 97ffff44,"					scanf(""%d"",&ele);
"
8b45f8 89c7 e85e020000,b9401be0 940000bc,"					Mdelete(ele);
"
90,d503201f,"					break;
"
e98afeffff,17ffff94,"	{
"
55 4889e5 4883ec20 897dec,a9bd7bfd 910003fd b9001fe0,"{
"
488b055a2d0000 488945f8,d0000080 91018000 f9400000 f90017e0,"	node* p=head;
"
bf10000000 e85cfdffff 488945f0,d2800200 97ffff23 f90013e0,"	node* temp=(node*)malloc(sizeof(node));
"
488b45f0 8b55ec 8910,f94013e0 b9401fe1 b9000001,"	temp->info=ele;
"
488b15382d0000 488b45f0 48895008,d0000080 91018000 f9400001 f94013e0 f9000401,"	temp->link=head;
"
488b45f0 488905252d0000,d0000080 91018000 f94013e1 f9000001,"	head=temp;
"
90 c9 c3,d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec20 897dec 488975e0,a9bd7bfd 910003fd b9001fe0 f9000be1,"{
"
bf10000000 e819fdffff 488945f0,d2800200 97ffff0d f90013e0,"	node* temp=(node*)malloc(sizeof(node));
"
488b45f0 8b55ec 8910,f94013e0 b9401fe1 b9000001,"	temp->info=ele;
"
488b45e0 488945f8,f9400be0 f90017e0,"	p=temph;
"
eb0c 488b45f8 488b4008 4885c0 75e7,14000004 f94017e0 f9400400 f100001f 54ffff41,"	while(p->link!=NULL)
"
488b45f8 488b4008 488945f8,f94017e0 f9400400 f90017e0,"		p=p->link;
"
488b45f0 48c7400800000000,f94013e0 f900041f,"	temp->link=NULL;
"
488b45f8 488b55f0 48895008,f94017e0 f94013e1 f9000401,"	p->link=temp;
"
90 c9 c3,d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec30 897ddc,a9bc7bfd 910003fd b9001fe0,"{
"
488b05ac2c0000 4885c0 750f,d0000080 91018000 f9400000 f100001f 54000081,"	if(head==NULL)
"
8b45dc 89c7 e831ffffff,b9401fe0 97ffffc2,"		Binsert(ele);
"
e9a8000000,14000036,"		return;
"
488b05912c0000 8b00 3945dc 7d0f,d0000080 91018000 f9400000 b9400000 b9401fe1 6b00003f 5400008a,"	if (head->info>ele)
"
8b45dc 89c7 e814ffffff,b9401fe0 97ffffb8,"		Binsert(ele);
"
e98b000000,1400002c,"		return;
"
bf10000000 e881fcffff 488945e8,d2800200 97fffee0 f90017e0,"	node *p,*q,*temp=(node*)malloc(sizeof(node));
"
488b45e8 8b55dc 8910,f94017e0 b9401fe1 b9000001,"	temp->info=ele;
"
488b055d2c0000 488945f8,d0000080 91018000 f9400000 f9001fe0,"	p=head;
"
488b05522c0000 488b4008 488945f0,d0000080 91018000 f9400000 f9400400 f9001be0,"	q=head->link;
"
eb3d 48837df000 75bc,14000013 f9401be0 f100001f 54fffd81,"	while(q!=NULL)											//q->link!=null?????????????????????????????????????????? works??????????????????????????????????
"
488b45f0 8b00 3945dc 7f1a,f9401be0 b9400000 b9401fe1 6b00003f 5400010c,"		if(q->info>=ele)
"
488b45f8 488b55e8 48895008,f9401fe0 f94017e1 f9000401,"			p->link=temp;
"
488b45e8 488b55f0 48895008,f94017e0 f9401be1 f9000401,"			temp->link=q;
"
eb33,14000010,"			return;
"
488b45f8 488b4008 488945f8,f9401fe0 f9400400 f9001fe0,"		p=p->link;
"
488b45f0 488b4008 488945f0,f9401be0 f9400400 f9001be0,"		q=q->link;
"
488b15fd2b0000 8b45dc 4889d6 89c7 e8cefeffff,d0000080 91018000 f9400000 aa0003e1 b9401fe0 97ffffa5,"	Einsert(ele,head);
"
c9 c3,a8c47bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8,a9bd7bfd 910003fd f9000fe0,"{
"
488b45e8 488945f8,f9400fe0 f90017e0,"	node* p=temph;
"
eb23 48837df800 75d6,1400000a f94017e0 f100001f 54fffea1,"	while(p!=NULL)
"
488b45f8 8b00 89c6 bf20214000 b800000000 e8c1fbffff,f94017e0 b9400000 2a0003e1 90000000 913de000 97fffec1,"		printf(""%d->"",p->info);
"
488b45f8 488b4008 488945f8,f94017e0 f9400400 f90017e0,"		p=p->link;
"
bf0a000000 e884fbffff,52800140 97fffebd,"	printf(""\n"");
"
90 c9 c3,d503201f a8c37bfd d65f03c0,"}				
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
488b05922b0000 488945f8,d0000080 91018000 f9400000 f9000fe0,"	node* p=head;
"
488b05872b0000 488b4008 4889057c2b0000,d0000080 91018000 f9400000 f9400401 d0000080 91018000 f9000001,"	head=head->link;
"
488b45f8 4889c7 e840fbffff,f9400fe0 97fffe9f,"	free(p);
"
90 c9 c3,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
488b055e2b0000 488945f8,d0000080 91018000 f9400000 f9000fe0,"	p=head;
"
eb0c 488b45f8 488b4008 488b4008 4885c0 75e3,14000004 f9400fe0 f9400400 f9400400 f100001f 54ffff21,"	while(p->link->link!=NULL)
"
488b45f8 488b4008 488945f8,f9400fe0 f9400400 f9000fe0,"		p=p->link;
"
488b45f8 488b4008 488945f0,f9400fe0 f9400400 f9000be0,"	q=p->link;
"
488b45f8 48c7400800000000,f9400fe0 f900041f,"	p->link=NULL;
"
488b45f0 4889c7 e8e7faffff,f9400be0 97fffe86,"	free(q);
"
90 c9 c3,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec20 897dec,a9bd7bfd 910003fd b9001fe0,"{
"
488b05022b0000 8b00 3945ec 750c,d0000080 91018000 f9400000 b9400000 b9401fe1 6b00003f 54000061,"	if (head->info==ele)
"
b800000000 e850ffffff,97ffffcb,"		Bdelete();
"
eb52,1400001b,"		return;
"
488b05e82a0000 488945f8 488b05dd2a0000 488b4008 488945f0,d0000080 91018000 f9400000 f90017e0 d0000080 91018000 f9400000 f9400400 f90013e0,"	node *p=head,*q=head->link;
"
eb29 488b45f0 488b4008 4885c0 75ca,1400000d f94013e0 f9400400 f100001f 54fffe21,"	while(q->link!=NULL)										//q->link!=null?????????????????????????????????????????? doesnt work 
"
488b45f0 8b00 3945ec 751e,f94013e0 b9400000 b9401fe1 6b00003f 54000101,"		if(q->info==ele)
"
488b45f0 488b5008 488b45f8 48895008,f94013e0 f9400401 f94017e0 f9000401,"			p->link=q->link;
"
488b45f0 4889c7 e87cfaffff,f94013e0 97fffe62,"			free(q);
"
eb0d,14000005,"			return;
"
c9 c3,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8,a9bd7bfd 910003fd f9000fe0,"{
"
488b45e8 488945f8 488b45e8 488b4008 488945f0,f9400fe0 f90017e0 f9400fe0 f9400400 f90013e0,"	node *p=temph,*q=temph->link;
"
eb20 48837df000 75d9,14000008 f94013e0 f100001f 54fffee1,"	while(q!=NULL)
"
488b45f8 4889c7 e83dfaffff,f94017e0 97fffe50,"		free(p);
"
488b45f0 488945f8,f94013e0 f90017e0,"		p=q;
"
488b45f0 488b4008 488945f0,f94013e0 f9400400 f90013e0,"		q=q->link;
"
488b45f8 4889c7 e816faffff,f94017e0 97fffe46,"	free(p);
"
48c745e800000000,f9000fff,"	temph=NULL;
"
90 c9 c3,d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
488b05342a0000 4889c7 e889ffffff,d0000080 9101a000 f9400000 97ffffe2,"	DeleteLL(head2);
"
488b051d2a0000 488945f8,d0000080 91018000 f9400000 f9000fe0,"	p=head;
"
488b051a2a0000 488945f0,d0000080 9101a000 f9400000 f9000be0,"	q=head2;
"
eb17 48837df800 75e2,14000009 f9400fe0 f100001f 54fffec1,"	while(p!=NULL)
"
488b150d2a0000 488b45f8 8b00 4889d6 89c7 e8d3fcffff,f9400fe0 b9400002 d0000080 9101a000 f9400000 aa0003e1 2a0203e0 97ffff09,"		Einsert(p->info,head2);
"
90 90 c9 c3,d503201f d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 48897de8 8975e4,d10083ff f90007e0 b90007e1,"{
"
488b45e8 488b4008 488945f8,f94007e0 f9400400 f9000fe0,"	p= head->link;
"
c745f400000000,b90017ff,"	x=0;
"
eb10 8b45f4 3b45e4 75e8 48837df800 75e1,14000007 b94017e1 b94007e0 6b00003f 54fffee1 f9400fe0 f100001f 54fffe81,"	while(x!=ind||p!=NULL)
"
488b45f8 488b4008 488945f8,f9400fe0 f9400400 f9000fe0,"		p=p->link;
"
8345f401,b94017e0 11000400 b90017e0,"		x++;
"
488b45f8,f9400fe0,"	return p;
"
5d c3 0f1f440000,910083ff d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf08204000 e8d8feffff,90000000 911fc000 97ffffb2,"    printf(""enter year for checking leap year or not\n"");
"
488d45fc 4889c6 bf31204000 b800000000 e8e2feffff,910073e0 aa0003e1 90000000 91208000 97ffffb1,"    scanf(""%d"",&y);
"
8b55fc 4863c2 4869c01f85eb51 48c1e820 c1f805 89d1 c1f91f 29c8 6bc864 89d0 29c8 85c0 740a 8b45fc 83e003 85c0 7429 8b55fc 4863c2 4869c01f85eb51 48c1e820 c1f807 89d1 c1f91f 29c8 69c890010000 89d0 29c8 85c0 7516 8b45fc 89c6 bf34204000 b800000000 e865feffff eb14 8b45fc 89c6 bf44204000 b800000000 e84ffeffff,b9401fe1 5290a3e0 72aa3d60 9b207c20 d360fc00 13057c02 131f7c20 4b000040 52800c82 1b027c00 4b000020 7100001f 540000a0 b9401fe0 12000400 7100001f 540001c0 b9401fe1 5290a3e0 72aa3d60 9b207c20 d360fc00 13077c02 131f7c20 4b000040 52803202 1b027c00 4b000020 7100001f 540000e1 b9401fe0 2a0003e1 90000000 9120a000 97ffff92 14000006 b9401fe0 2a0003e1 90000000 9120e000 97ffff8c,"    (((y%100!=0)&&(y%4==0))||(y%400==0))?printf(""%d is leap year"",y):printf(""%d is not a leap year"",y);
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f840000000000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8 488975e0,a9bd7bfd 910003fd f9000fe0 f9000be1,"{
"
488b45e0 483b45e8 7e1c,f9400be1 f9400fe0 eb00003f 540001ad,"	if (d2 > d1) {
"
488b45e0 482945e8,f9400fe1 f9400be0 cb000020 f9000fe0,"		d1 = d1 - d2;
"
488b45e8 480145e0,f9400be1 f9400fe0 8b000020 f9000be0,"		d2 = d1 + d2;
"
488b45e0 482b45e8 488945e8,f9400be1 f9400fe0 cb000020 f9000fe0,"		d1 = d2 - d1;
"
48837de000 7506,f9400be0 f100001f 54000061,"	if (d2 == 0) {
"
488b45e8 eb21,f9400fe0 1400000b,"		return d1;
"
488b45e8 4899 48f77de0 488955f8,f9400fe0 f9400be1 9ac10c02 f9400be1 9b017c41 cb010000 f90017e0,"	long rem = d1 % d2;
"
488b55f8 488b45e0 4889d6 4889c7 e89cffffff,f94017e1 f9400be0 97ffffde,"	return get_gcd_euclidian(d2, rem);
"
c9 c3,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8 488975e0,a9bd7bfd 910003fd f9000fe0 f9000be1,"{
"
48837de800 7407 48837de000 7507,f9400fe0 f100001f 54000080 f9400be0 f100001f 54000061,"	if (val1 == 0 || val2 == 0) {
"
b800000000 eb2e,d2800000 1400000c,"		return 0;
"
488b45e8 480faf45e0 488945f8,f9400fe1 f9400be0 9b007c20 f90017e0,"	long prod = (long) (val1*val2);
"
488b55e0 488b45e8 4889d6 4889c7 e855ffffff 488945f0,f9400be1 f9400fe0 97ffffc9 f90013e0,"	long gcd = get_gcd_euclidian(val1, val2);
"
488b45f8 4899 48f77df0,f94017e1 f94013e0 9ac00c20,"	return (prod/gcd);
"
c9 c3,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec20 897dec 488975e0,a9bd7bfd 910003fd b9001fe0 f9000be1,"{
"
48c745f800000000,f90017ff,"	long ip1 = 0;
"
48c745f000000000,f90013ff,"	long ip2 = 0;
"
488d55f0 488d45f8 4889c6 bf04204000 b800000000 e816feffff,910083e1 9100a3e0 aa0103e2 aa0003e1 90000000 9120a000 97ffff6c,"	scanf(""%ld %ld"", &ip1, &ip2);
"
488b55f0 488b45f8 4889d6 4889c7 e85fffffff 4889c6 bf0c204000 b800000000 e8e1fdffff,f94017e0 f94013e1 97ffffd8 aa0003e1 90000000 9120c000 97ffff69,"	printf(""%ld"", get_lcm_euclidian(ip1, ip2));
"
b800000000,52800000,"	return 0;
"
c9 c3 662e0f1f840000000000,a8c37bfd d65f03c0,}
55 4889e5 4883ec10,a9be7bfd 910003fd,"{ float agp,b,da,gs;
"
bf04204000 e8d8feffff,90000000 911f2000 97ffffb2,"printf(""Enter the Basic Salary : \n"");
"
488d45f4 4889c6 bf1e204000 b800000000 e8e2feffff,910053e0 aa0003e1 90000000 911fa000 97ffffb1,"scanf(""%f"",&b);
"
bf21204000 e8b8feffff,90000000 911fc000 97ffffaa,"printf(""Enter the AGP : \n"");
"
488d45f8 4889c6 bf1e204000 b800000000 e8c2feffff,910063e0 aa0003e1 90000000 911fa000 97ffffa9,"scanf(""%f"",&agp);
"
bf32204000 e898feffff,90000000 91202000 97ffffa2,"printf(""Enter the DA in Percentage : \n"");
"
488d45f0 4889c6 bf1e204000 b800000000 e8a2feffff,910043e0 aa0003e1 90000000 911fa000 97ffffa1,"scanf(""%f"",&da);
"
f30f104df4 f30f1045f8 f30f58c8 f30f1045f0 f30f101d9b0e0000 0f28d0 f30f5ed3 f30f1005900e0000 f30f58c2 f30f59c1 f30f1145fc,bd4017e1 bd401be0 1e202821 bd4013e0 52a85900 1e270002 1e221802 1e2e1000 1e202840 1e200820 bd001fe0,"gs=(b+agp)*(1+(da/100));
"
660fefe4 f30f5a65fc 66480f7ee0 66480f6ec0 bf50204000 b801000000 e839feffff,bd401fe0 1e22c000 90000000 9120a000 97ffff95,"printf(""Gross Salary is %f"",gs);
"
90 c9 c3 660f1f440000,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
8b45f8 89c6 bf04204000 b800000000 e8defeffff,b9401be0 2a0003e1 90000000 911ea000 97ffffb4,"    printf(""enter principleAmount\n"",principleAmount);
"
488d45f8 4889c6 bf1b204000 b800000000 e8d8feffff,910063e0 aa0003e1 90000000 911f0000 97ffffab,"    scanf(""%d"",&principleAmount);
"
8b45f4 89c6 bf1e204000 b800000000 e8b4feffff,b94017e0 2a0003e1 90000000 911f2000 97ffffaa,"    printf(""enter number of year\n"",numberOfYears);
"
488d45f4 4889c6 bf1b204000 b800000000 e8aefeffff,910053e0 aa0003e1 90000000 911f0000 97ffffa1,"    scanf(""%d"",&numberOfYears);
"
8b45f0 89c6 bf34204000 b800000000 e88afeffff,b94013e0 2a0003e1 90000000 911f8000 97ffffa0,"    printf(""enter rate of interest\n"",rateOfInterest);
"
488d45f0 4889c6 bf1b204000 b800000000 e884feffff,910043e0 aa0003e1 90000000 911f0000 97ffff97,"    scanf(""%d"",&rateOfInterest);
"
8b55f8 8b45f4 0fafd0 8b45f0 0fafc2 4863d0 4869d21f85eb51 48c1ea20 89d1 c1f905 99 89c8 29d0 8945fc,b9401be1 b94017e0 1b007c21 b94013e0 1b007c20 5290a3e1 72aa3d61 9b217c01 d360fc21 13057c21 131f7c00 4b000020 b9001fe0,"    SimpleInterest=(principleAmount*numberOfYears*rateOfInterest)/100;
"
8b45fc 89c6 bf4c204000 b800000000 e836feffff b800000000,b9401fe1 90000000 911fe000 97ffff8a 52800000,"    printf(""Simple interest is %d"",SimpleInterest);
"
c9 c3 662e0f1f840000000000 0f1f440000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main(){
"
c745fc01000000,52800020 b9001fe0,"  int num, mask = 0x1;
"
bf04204000 b800000000 e8dcfeffff,90000000 911e2000 97ffffb8,"  printf(""Enter a number: "");
"
488d45f8 4889c6 bf15204000 b800000000 e8d6feffff,910063e0 aa0003e1 90000000 911e8000 97ffffaf,"  scanf(""%d"", &num);
"
8b45f8 2345fc 8945f8,b9401be1 b9401fe0 0a000020 b9001be0,"  num &= mask;
"
8b45f8 85c0 750c,b9401be0 7100001f 540000a1,"  if ( 0 == num)
"
bf18204000 e89cfeffff eb0a,90000000 911ea000 97ffffa1 14000004,"    printf(""Even Number\n"");
"
bf24204000 e890feffff,90000000 911ee000 97ffff9d,"    printf(""Odd Number\n"");
"
b800000000,52800000,"  return 0;
"
c9 c3 660f1f840000000000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
c745fc0e000000,528001c0 b9001fe0,"    int a=14, b;
"
8b45fc f7d0 8945f8,b9401fe0 2a2003e0 b9001be0,"    b = ~a;
"
8b45f8 89c6 bf04204000 b800000000 e8dffeffff,b9401be1 90000000 911b4000 97ffffac,"    printf(""Value of c = %d\n"",b);
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f840000000000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf04204000 e8d8feffff,90000000 911e0000 97ffffb2,"        printf(""Enter temp in fahrenheit :\n"");
"
488d45f8 4889c6 bf1f204000 b800000000 e8e2feffff,910063e0 aa0003e1 90000000 911e8000 97ffffb1,"        scanf(""%f"", &f);
"
f30f1045f8 f30f1015c10e0000 0f28c8 f30f5cca f30f1005b60e0000 f30f59c1 f30f100dae0e0000 f30f5ec1 f30f1145fc,bd401be1 0f026440 1e203821 1e229000 1e200821 1e245000 1e201820 bd001fe0,"        c = (f-32)*5/9;
"
660fefdb f30f5a5dfc 66480f7ed8 66480f6ec0 bf22204000 b801000000 e87ffeffff b800000000,bd401fe0 1e22c000 90000000 911ea000 97ffffa8 52800000,"        printf(""Temp in celcius is : %f"",c);
"
c9 c3 0f1f840000000000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"  int main() {
"
bf04204000 e8d8feffff,90000000 91208000 97ffffb2,"    printf(""enter a number\n"");
"
488d45fc 4889c6 bf13204000 b800000000 e8e2feffff,910073e0 aa0003e1 90000000 9120c000 97ffffb1,"    scanf(""%d"", & n);
"
8b45fc 83e001 85c0 7507 8b45fc 85c0 7f35,b9401fe0 12000000 7100001f 54000081 b9401fe0 7100001f 540002ec,"    if (n % 2 == 0 && n > 0)
"
8b45fc 83e001 85c0 7407 8b45fc 85c0 7836,b9401fe0 12000000 7100001f 54000080 b9401fe0 7100001f 540002ab,"    else if (n % 2 != 0 && n < 0)
"
8b45fc 83e001 85c0 7507 8b45fc 85c0 7837,b9401fe0 12000000 7100001f 54000081 b9401fe0 7100001f 5400026b,"    else if (n % 2 == 0 && n < 0)
"
8b45fc 83e001 85c0 7450 8b45fc 85c0 7e49,b9401fe0 12000000 7100001f 54000300 b9401fe0 7100001f 540002ad,"    else if (n % 2 != 0 && n > 0)
"
eb36,14000010,"      goto d;
"
90,d503201f,"      goto a;
"
bf16204000 b800000000 e87cfeffff,90000000 9120e000 97ffff94,"      printf(""number is even and positive"");
"
eb46,14000014,"    goto stop;
"
90,d503201f,"      goto b;
"
bf32204000 b800000000 e86afeffff,90000000 91216000 97ffff8f,"      printf(""number is odd and negative"");
"
eb34,1400000f,"    goto stop;
"
90,d503201f,"      goto c;
"
bf4d204000 b800000000 e858feffff,90000000 9121e000 97ffff8a,"      printf(""number is even and negative"");
"
eb22,1400000a,"    goto stop;
"
bf69204000 b800000000 e847feffff,90000000 91226000 97ffff86,"      printf(""number is odd and positive"");
"
eb11,14000006,"    goto stop;
"
90,d503201f,"      goto e;
"
bf84204000 b800000000 e835feffff,90000000 9122e000 97ffff81,"      printf(""special number"");
"
90,d503201f,"    goto stop;
"
b800000000,52800000,"      return 0;
"
c9 c3 662e0f1f840000000000 0f1f00,a8c27bfd d65f03c0,"  }
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{ float a,r;
"
bf08204000 b800000000 e8e3feffff,90000000 911d2000 97ffffb6,"printf(""Enter the Radius : "");
"
488d45f8 4889c6 bf1c204000 b800000000 e8ddfeffff,910063e0 aa0003e1 90000000 911d8000 97ffffad,"scanf(""%f"",&r);
"
f30f1045f8 660fefc9 f30f5ac8 f20f1005b80e0000 f20f59c8 f30f1045f8 f30f5ac0 f20f59c1 f20f5ac0 f30f1145fc,bd401be0 1e22c000 90000000 fd43bc01 1e610801 bd401be0 1e22c000 1e600820 1e624000 bd001fe0,"a=3.14*r*r;
"
660fefd2 f30f5a55fc 66480f7ed0 66480f6ec0 bf1f204000 b801000000 e87cfeffff,bd401fe0 1e22c000 90000000 911da000 97ffffa2,"printf(""Area is %f"",a);
"
90 c9 c3 660f1f840000000000,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 4881ecb00f0000,d13f03ff a9007bfd 910003fd,"{
"
bf08204000 e8d5feffff,90000000 91234000 97ffffb1,"  printf(""Enter number of elements\n"");
"
488d45f0 4889c6 bf21204000 b800000000 e8dffeffff,913ec3e0 aa0003e1 90000000 9123c000 97ffffb0,"  scanf(""%d"", &n);
"
8b45f0 89c6 bf24204000 b800000000 e8bbfeffff,b94fb3e0 2a0003e1 90000000 9123e000 97ffffaf,"  printf(""Enter %d integers\n"", n);
"
c745fc00000000 eb2a 8345fc01 8b45f0 3945fc 7cce,b90fbfff 1400000c b94fbfe0 11000400 b90fbfe0 b94fb3e0 b94fbfe1 6b00003f 54fffe4b,"  for (c = 0; c < n; c++)
"
488d8550f0ffff 8b55fc 4863d2 48c1e202 4801d0 4889c6 bf21204000 b800000000 e89cfeffff,910043e1 b98fbfe0 d37ef400 8b000020 aa0003e1 90000000 9123c000 97ffffa1,"    scanf(""%d"", &array[c]);
"
c745fc01000000 eb71 8345fc01 8b45f0 3945fc 7c87,52800020 b90fbfe0 1400002f b94fbfe0 11000400 b90fbfe0 b94fb3e0 b94fbfe1 6b00003f 54fff9eb,"  for (c = 1 ; c <= n - 1; c++) {
"
8b45fc 8945f8,b94fbfe0 b90fbbe0,"    d = c;
"
eb40 837df800 7e1f 8b45f8 83e801 4898 8b948550f0ffff 8b45f8 4898 8b848550f0ffff 39c2 7f9b,1400001a b94fbbe0 7100001f 540001ad b94fbbe0 51000400 93407c00 d37ef400 910043e1 b8606821 b98fbbe0 d37ef400 910043e2 b8606840 6b00003f 54fffb2c,"    while ( d > 0 && array[d-1] > array[d]) {
"
8b45f8 4898 8b848550f0ffff 8945f4,b98fbbe0 d37ef400 910043e1 b8606820 b90fb7e0,"      t          = array[d];
"
8b45f8 83e801 4898 8b948550f0ffff 8b45f8 4898 89948550f0ffff,b94fbbe0 51000400 93407c00 d37ef400 910043e1 b8606822 b98fbbe0 d37ef400 910043e1 b8206822,"      array[d]   = array[d-1];
"
8b45f8 83e801 4898 8b55f4 89948550f0ffff,b94fbbe0 51000400 93407c00 d37ef400 910043e1 b94fb7e2 b8206822,"      array[d-1] = t;
"
836df801,b94fbbe0 51000400 b90fbbe0,"      d--;
"
bf38204000 e8e4fdffff,90000000 91244000 97ffff5e,"  printf(""Sorted list in ascending order:\n"");
"
c745fc00000000 eb21 8345fc01 8b45f0 3945fc 7cd7,b90fbfff 1400000c b94fbfe0 11000400 b90fbfe0 b94fb3e0 b94fbfe1 6b00003f 54fffe4b,"  for (c = 0; c <= n - 1; c++) {
"
8b45fc 4898 8b848550f0ffff 89c6 bf58204000 b800000000 e8cefdffff,b98fbfe0 d37ef400 910043e1 b8606820 2a0003e1 90000000 9124c000 97ffff5c,"    printf(""%d\n"", array[c]);
"
b800000000,52800000,"  return 0;
"
c9 c3 662e0f1f840000000000 90,a9407bfd 913f03ff d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
c745fc0e000000 c745f807000000,528001c0 b9001fe0 528000e0 b9001be0,"    int a=14, b= 7, c;
"
8b45fc 2345f8 8945f4,b9401fe1 b9401be0 0a000020 b90017e0,"    c =a&b;
"
8b45f4 89c6 bf04204000 b800000000 e8d7feffff,b94017e1 90000000 911b6000 97ffffa9,"    printf(""Value of c = %d\n"",c);
"
b800000000,52800000,"    return 0;
"
c9 c3,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf08204000 e8d8feffff,90000000 911e8000 97ffffb2,"    printf(""Enter two no :\n"");
"
488d55f8 488d45fc 4889c6 bf17204000 b800000000 e8defeffff,910063e1 910073e0 aa0103e2 aa0003e1 90000000 911ec000 97ffffaf,"    scanf(""%d%d"",&a,&b);
"
8b55fc 8b45f8 31d0 8945fc,b9401fe1 b9401be0 4a000020 b9001fe0,"    a = a^b;
"
8b55fc 8b45f8 31d0 8945f8,b9401fe1 b9401be0 4a000020 b9001be0,"    b = a^b;
"
8b55fc 8b45f8 31d0 8945fc,b9401fe1 b9401be0 4a000020 b9001fe0,"    a=  a^b;
"
8b55f8 8b45fc 89c6 bf20204000 b800000000 e896feffff,b9401fe0 b9401be1 2a0103e2 2a0003e1 90000000 911ee000 97ffffa0,"    printf(""After swapping value of a and b : %d,%d"",a,b);
"
b800000000,52800000,"    return 0;
"
c9 c3 662e0f1f840000000000 0f1f440000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main(void) {
"
c745fc00000000,b9001fff,"    int num = 0; // This is the Number that will be incremented.
"
c745f801000000,52800020 b9001be0,"    int increment = 1; // This is what we'll be using to increment(add) onto num.
"
eb24 837dfc63 7ed6,1400000b b9401fe0 71018c1f 54fffe8d,"    while(num < 100) {
"
bf01000000 e8e8feffff,52800020 97ffffa7,"        sleep(1); // Wait 1 second each time, num has it's Value incremented
"
8b45f8 0145fc,b9401fe1 b9401be0 0b000020 b9001fe0,"        num += increment; // Increment num
"
8b45fc 89c6 bf04204000 b800000000 e8befeffff,b9401fe1 90000000 911cc000 97ffffab,"        printf(""%d\n"", num); // Print the current Value of num
"
b800000000,52800000,"    return 0;
"
c9 c3 90,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec20,a9bd7bfd 910003fd,"{
"
bf04204000 e8d8feffff,90000000 91202000 97ffffb2,"    printf(""Enter marks of 5 subjects : \n"");
"
488d7de0 488d75e4 488d4de8 488d55ec 488d45f0 4989f9 4989f0 4889c6 bf21204000 b800000000 e8ccfeffff,910043e4 910053e3 910063e2 910073e1 910083e0 aa0403e5 aa0303e4 aa0203e3 aa0103e2 aa0003e1 90000000 9120a000 97ffffa9,"    scanf(""%d%d%d%d%d"",&a,&b,&c,&d,&e);
"
8b55f0 8b45ec 01c2 8b45e8 01c2 8b45e4 01c2 8b45e0 01d0 660fefc0 f30f2ac0 f30f1145fc,b94023e1 b9401fe0 0b000021 b9401be0 0b000021 b94017e0 0b000021 b94013e0 0b000020 1e270000 5e21d800 bd002fe0,"    total  = a+b+c+d+e;
"
f30f1045fc f30f100db30e0000 f30f5ec1 f30f1145f8,1e229000 bd402fe1 1e201820 bd002be0,"    average = total/5;
"
f30f1045fc f30f1015a10e0000 0f28c8 f30f5eca f30f1005960e0000 f30f59c1 f30f1145f4,52a87f40 1e270001 bd402fe0 1e211800 52a85900 1e270001 1e210800 bd0027e0,"    percentage  = (total/500)*100;
"
660fefdb f30f5a5dfc 66480f7ed8 66480f6ec0 bf2c204000 b801000000 e83bfeffff,bd402fe0 1e22c000 90000000 9120e000 97ffff90,"    printf(""Total marks = %f\n"", total);
"
660fefe4 f30f5a65f8 66480f7ee0 66480f6ec0 bf3e204000 b801000000 e819feffff,bd402be0 1e22c000 90000000 91214000 97ffff8b,"    printf(""Average marks = %f\n"",average );
"
660fefed f30f5a6df4 66480f7ee8 66480f6ec0 bf52204000 b801000000 e8f7fdffff,bd4027e0 1e22c000 90000000 9121a000 97ffff86,"    printf(""Net percentage = %f\n"",percentage);
"
b800000000,52800000,"    return 0;
"
c9 c3,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec20,a9bd7bfd 910003fd,"int main() {
"
c745e005000000 c745e40f000000 c745e818000000 c745ec20000000 c745f038000000 c745f459000000,90000000 91204000 910043e2 aa0003e3 a9400460 a9000440 f9400860 f9000840,"	int arr[] = {5, 15, 24, 32, 56, 89};
"
c745fc06000000,528000c0 b9002fe0,"	int size_of_array = sizeof(arr) / sizeof(int);
"
8b45fc 8d50ff 488d45e0 89d1 ba00000000 be18000000 4889c7 e847000000 89c6 bf04204000 b800000000 e8a2feffff,b9402fe0 51000401 910043e0 2a0103e3 52800002 52800301 94000013 2a0003e1 90000000 91202000 97ffffa0,"	printf(""%d\n"", binarySearch(arr, 24, 0, size_of_array-1));
"
8b45fc 8d50ff 488d45e0 89d1 ba00000000 be76000000 4889c7 e818000000 89c6 bf04204000 b800000000 e873feffff,b9402fe0 51000401 910043e0 2a0103e3 52800002 52800ec1 94000008 2a0003e1 90000000 91202000 97ffff95,"	printf(""%d\n"", binarySearch(arr, 118, 0, size_of_array-1));
"
b800000000,52800000,"	return 0;
"
c9 c3,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec30 48897de8 8975e4 8955e0 894ddc,a9bc7bfd 910003fd f90017e0 b90027e1 b90023e2 b9001fe3,"int binarySearch(int array[], int number, int start, int end) {
"
8b45e0 3b45dc 7c21,b94023e1 b9401fe0 6b00003f 5400016b,"	if(start >= end) {
"
8b45e0 4898 488d148500000000 488b45e8 4801d0 8b00 3945e4 0f95c0 0fb6c0 eb78,b98023e0 d37ef400 f94017e1 8b000020 b9400000 b94027e1 6b00003f 1a9f07e0 12001c00 14000023,"		return array[start] == number ? 0 : 1;
"
8b45dc 89c2 c1ea1f 01d0 d1f8 8945fc,b9401fe0 531f7c01 0b000020 13017c00 b9003fe0,"	int tmp = (int) end / 2;
"
8b45fc 4898 488d148500000000 488b45e8 4801d0 8b00 3945e4 7507,b9803fe0 d37ef400 f94017e1 8b000020 b9400000 b94027e1 6b00003f 54000061,"	if(number == array[tmp]) {
"
b800000000 eb47,52800000 14000014,"		return 0;
"
8b45fc 4898 488d148500000000 488b45e8 4801d0 8b00 3945e4 7e17,b9803fe0 d37ef400 f94017e1 8b000020 b9400000 b94027e1 6b00003f 540000ed,"	} else if(number > array[tmp]) {
"
8b4dfc 8b55e0 8b75e4 488b45e8 4889c7 e861ffffff eb15,b9403fe3 b94023e2 b94027e1 f94017e0 97ffffd1 14000006,"		return binarySearch(array, number, start, tmp);
"
8b4ddc 8b55fc 8b75e4 488b45e8 4889c7 e84affffff,b9401fe3 b9403fe2 b94027e1 f94017e0 97ffffcb,"		return binarySearch(array, number, tmp, end);
"
c9 c3 0f1f4000,a8c47bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main(){
"
bf04204000 b800000000 e8e3feffff,90000000 9120c000 97ffffb6,"    printf(""Enter number: "");
"
488d45fc 4889c6 bf13204000 b800000000 e8ddfeffff,910073e0 aa0003e1 90000000 91210000 97ffffad,"    scanf(""%d"", &input);
"
bf16204000 b800000000 e8befeffff,90000000 91212000 97ffffae,"    printf(""Enter base: "");
"
488d45f8 4889c6 bf13204000 b800000000 e8b8feffff,910063e0 aa0003e1 90000000 91210000 97ffffa5,"    scanf(""%d"", &base);
"
8b55f8 8b45fc 89c6 bf23204000 b800000000 e891feffff,b9401fe0 b9401be1 2a0103e2 2a0003e1 90000000 91216000 97ffffa2,"    printf(""%d to base %d : "", input, base);
"
8b55f8 8b45fc 89d6 89c7 e807000000,b9401fe0 b9401be1 94000004,"    printDigit(input, base);
"
b800000000,52800000,"    return 0;
"
c9 c3,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec20 897dec 8975e8,a9bd7bfd 910003fd b9001fe0 b9001be1,"void printDigit(int num, int base){
"
837dec00 7e54,b9401fe0 7100001f 540003ed,"    if(num > 0){
"
8b45ec 99 f77de8 8955fc,b9401fe0 b9401be1 1ac10c02 b9401be1 1b017c41 4b010000 b9002fe0,"        int digit = num % base;
"
8b45fc 2945ec,b9401fe1 b9402fe0 4b000020 b9001fe0,"        num = num - digit;
"
8b45ec 99 f77de8 8945ec,b9401fe1 b9401be0 1ac00c20 b9001fe0,"        num = num / base;
"
8b55e8 8b45ec 89d6 89c7 e8c3ffffff,b9401be1 b9401fe0 97ffffe8,"        printDigit(num, base);
"
837dfc09 7e0f,b9402fe0 7100241f 540000ad,"        if(digit > 9){
"
8b45fc 83c037 89c7 e81bfeffff eb17,b9402fe0 1100dc00 97ffff81 14000007,"            printf(""%c"", 55 + digit);
"
8b45fc 89c6 bf13204000 b800000000 e815feffff eb01,b9402fe1 90000000 91210000 97ffff78 14000002,"            printf(""%d"", digit);
"
90,d503201f,"        return;
"
c9 c3,a8c37bfd d65f03c0,}
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf04204000 e8d8feffff,90000000 911da000 97ffffb2,"    printf(""Enter Uppercase letter :\n"");
"
488d45fe 4889c6 bf1d204000 b800000000 e8e2feffff,91007be0 aa0003e1 90000000 911e2000 97ffffb1,"    scanf(""%c"", &a);
"
0fb645fe 83c020 8845ff,39407be0 11008000 39007fe0,"    u = a + 32;
"
0fbe45ff 89c6 bf20204000 b800000000 e8b3feffff,39407fe0 2a0003e1 90000000 911e4000 97ffffad,"    printf(""Lowercase is : %c"", u);
"
b800000000,52800000,"    return 0;
"
c9 c3 662e0f1f840000000000 6690,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec20,a9bd7bfd 910003fd,"	{
"
c745f800000000,b9002bff,"	int i,j = 0,num[MAX];
"
bf08204000 e8d1feffff,90000000 91250000 97ffffb1,"	printf(""Enter numbers in the range of 1 to 9 \n"");
"
c745fc00000000 eb59 837dfc04 7ea1,b9002fff 1400001e b9402fe0 7100101f 54fffc2d,"	for(i = 0; i<MAX; )
"
488d45e0 8b55fc 4863d2 48c1e202 4801d0 4889c6 bf2e204000 b800000000 e8c5feffff,910043e1 b9802fe0 d37ef400 8b000020 aa0003e1 90000000 9125a000 97ffffab,"		scanf(""%d"",&num[i]);
"
8b45fc 4898 8b4485e0 83e801 83f808 7706,b9802fe0 d37ef400 910043e1 b8606820 51000400 7100201f 540000a8,"		switch (num[i])
"
8345fc01,b9402fe0 11000400 b9002fe0,"			case 9: i++;
"
eb08,14000004,"			break;
"
c745f801000000,52800020 b9002be0,"                 j = 1;
"
90,d503201f,"                 break;
"
837df801 7511,b9402be0 7100041f 540000a1,"		if(j == 1)
"
bf31204000 b800000000 e881feffff,90000000 9125c000 97ffff9b,"            printf(""NO MORE INPUT"");
"
eb06,14000004,"            break;
"
bf3f204000 e85ffeffff,90000000 91260000 97ffff8c,"		printf(""Multiple of 3's \n\n"");
"
8b55fc 488d45e0 89d6 4889c7 b800000000 e831000000,910043e0 b9402fe1 9400000d,"		printMultiple(num, i);
"
bf51204000 e83ffeffff,90000000 91266000 97ffff86,"		printf(""\n\n\n"");
"
bf54204000 e835feffff,90000000 91268000 97ffff83,"		printf(""EVEN numbers\n\n\n"");
"
8b55fc 488d45e0 89d6 4889c7 b800000000 e897000000 b800000000,910043e0 b9402fe1 94000030 52800000,"		printEven(num, i);
"
c9 c3,a8c37bfd d65f03c0,"	}
"
55 4889e5 4883ec20 48897de8 8975e4,a9bd7bfd 910003fd f9000fe0 b90017e1,"	{
"
c745fc00000000 eb6d 8345fc01 8b45fc 3b45e4 7c8b,b9002fff 14000020 b9402fe0 11000400 b9002fe0 b9402fe1 b94017e0 6b00003f 54fffbcb,"		for(i = 0; i<len; i++)
"
8b45fc 4898 488d148500000000 488b45e8 4801d0 8b10 4863c2 4869c056555555 48c1e820 89d1 c1f91f 29c8 8945f8 8b4df8 89c8 01c0 01c8 29c2 8955f8,b9802fe0 d37ef400 f9400fe1 8b000020 b9400001 528aaac0 72aaaaa0 9b207c20 d360fc02 131f7c20 4b000042 2a0203e0 531f7800 0b020000 4b000020 b9002be0,"            int ans3 = num[i]%3;
"
837df800 7527,b9402be0 7100001f 54000141,"            switch (ans3)
"
8b45fc 4898 488d148500000000 488b45e8 4801d0 8b00 89c6 bf63204000 b800000000 e8a7fdffff,b9802fe0 d37ef400 f9400fe1 8b000020 b9400000 2a0003e1 90000000 9126c000 97ffff63,"                printf(""%d \n"", num[i]);
"
90 c9 c3,d503201f a8c37bfd d65f03c0,"	}
"
55 4889e5 4883ec20 48897de8 8975e4,a9bd7bfd 910003fd f9000fe0 b90017e1,"	{
"
c745fc00000000 eb59 8345fc01 8b45fc 3b45e4 7c9f,b9002fff 14000019 b9402fe0 11000400 b9002fe0 b9402fe1 b94017e0 6b00003f 54fffcab,"		for(i = 0; i<len; i++)
"
8b45fc 4898 488d148500000000 488b45e8 4801d0 8b10 89d0 c1f81f c1e81f 01c2 83e201 29c2 8955f8,b9802fe0 d37ef400 f9400fe1 8b000020 b9400000 7100001f 12000000 5a80a400 b9002be0,"            int ans_even = num[i]%2;
"
837df800 7527,b9402be0 7100001f 54000141,"            switch (ans_even)
"
8b45fc 4898 488d148500000000 488b45e8 4801d0 8b00 89c6 bf63204000 b800000000 e82bfdffff,b9802fe0 d37ef400 f9400fe1 8b000020 b9400000 2a0003e1 90000000 9126c000 97ffff3e,"                printf(""%d \n"", num[i]);
"
90 c9 c3 662e0f1f840000000000 6690,d503201f a8c37bfd d65f03c0,"	}
"
55 4889e5 4883ec20,a9bd7bfd 910003fd,"{
"
48c745f001000000,d2800020 f90013e0,"    unsigned long long factorial = 1;
"
bf08204000 b800000000 e8dbfeffff,90000000 911e0000 97ffffb4,"    printf(""Enter a number: "");
"
488d45ec 4889c6 bf19204000 b800000000 e8d5feffff,910073e0 aa0003e1 90000000 911e6000 97ffffab,"    scanf(""%d"",&n);
"
8b45ec 85c0 7911,b9401fe0 7100001f 540000aa,"    if (n < 0)
"
bf20204000 b800000000 e8affeffff eb3e,90000000 911e8000 97ffffa9 14000015,"        printf(""Error! Factorial of a negative number doesn't exist."");
"
c745fc01000000 eb15 8345fc01 8b45ec 3945fc 7ee3,52800020 b9002fe0 14000008 b9402fe0 11000400 b9002fe0 b9401fe0 b9402fe1 6b00003f 54fffecd,"        for(i=1; i<=n; ++i)
"
8b45fc 4898 488b55f0 480fafc2 488945f0,b9802fe0 f94013e1 9b007c20 f90013e0,"            factorial *= i;              // factorial = factorial*i;
"
8b45ec 488b55f0 89c6 bf55204000 b800000000 e86ffeffff,b9401fe0 f94013e2 2a0003e1 90000000 911f6000 97ffff94,"        printf(""Factorial of %d = %llu"", n, factorial);
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f840000000000,a8c37bfd d65f03c0,"}
"
55 4889e5,a9bf7bfd 910003fd,"{
"
488b05072f0000 c70005000000,b0000080 9100e000 f9400000 528000a1 b9000001,"    (*first).data = 5;
"
488b05fa2e0000 488b15fb2e0000 48895008,b0000080 9100e000 f9400000 b0000081 91010021 f9400021 f9000401,"    (*first).next = second;
"
488b05e82e0000 8b00 89c6 bf04204000 b800000000 e8cdfeffff b800000000,b0000080 9100e000 f9400000 b9400000 2a0003e1 90000000 911be000 97ffffa1 52800000,"    printf(""%d"", (*first).data);
"
5d c3 660f1f440000,a8c17bfd d65f03c0,"}
"
55 4889e5 4881ec00020100,d10803ff d14043ff a9007bfd 910003fd,"int main(){
"
bf04204000 b800000000 e8e0feffff,90000000 91272000 97ffffb4,"	printf(""Enter no of test cases: "");
"
488d850cfefeff 4889c6 bf1d204000 b800000000 e8d7feffff,910053e0 aa0003e1 90000000 9127a000 97ffffab,"	scanf(""%d"", &testcases);
"
e970010000 8b850cfefeff 8d50ff 89950cfefeff 85c0 0f8579feffff b800000000,14000097 b94017e0 51000401 b90017e1 7100001f 54ffecc1 52800000,"	while(testcases--){
"
bf20204000 b800000000 e8b3feffff,90000000 9127c000 97ffffab,"		printf(""Enter number:"");
"
488d8508fefeff 4889c6 bf1d204000 b800000000 e8aafeffff,910043e0 aa0003e1 90000000 9127a000 97ffffa2,"		scanf(""%d"", &num);
"
c745fc00000000 eb14 8345fc01 817dfc73400000 7ee3,914043e0 b901fc1f 1400000b 914043e0 b941fc00 11000400 914043e1 b901fc20 914043e0 b941fc01 52880e60 6b00003f 54fffe4d,"		for(int i=0; i<16500; i++)
"
8b45fc 4898 c7848510fefeff00000000,914043e0 b981fc00 d37ef400 910063e1 b820683f,"			ans[i]=0;
"
c78510fefeff01000000,52800020 b9001be0,"		ans[0]=1;
"
c745f402000000 e990000000 8345f401 8b8508fefeff 3945f4 0f8e61ffffff,52800040 914043e1 b901f420 14000044 914043e0 b941f400 11000400 914043e1 b901f420 b94013e0 914043e1 b941f421 6b00003f 54fff72d,"		for(int i=2; i<=num; i++){
"
c745f800000000,914043e0 b901f81f,"			carry=0;
"
c745f000000000 eb73 8345f001 817df073400000 7e84,914043e0 b901f01f 14000035 914043e0 b941f000 11000400 914043e1 b901f020 914043e0 b941f001 52880e60 6b00003f 54fff90d,"			for(int j=0; j<16500; j++){
"
8b45f0 4898 8b848510fefeff 8b55f4 0fafc2 8945e8,914043e0 b981f000 d37ef400 910063e1 b8606820 914043e1 b941f421 1b007c20 914043e1 b901e820,"				 m= i*ans[j];
"
8b45f8 0145e8,914043e0 b941e801 914043e0 b941f800 0b000020 914043e1 b901e820,"				 m+= carry;
"
8b4de8 4863c1 4869c067666666 48c1e820 89c2 c1fa02 89c8 c1f81f 29c2 89d0 c1e002 01d0 01c0 29c1 89ca 8b45f0 4898 89948510fefeff,914043e0 b941e802 528ccce0 72acccc0 9b207c40 d360fc00 13027c01 131f7c40 4b000021 2a0103e0 531e7400 0b010000 531f7800 4b000041 914043e0 b981f000 d37ef400 910063e2 b8206841,"				 ans[j]=m%10;
"
8b45e8 4863d0 4869d267666666 48c1ea20 89d1 c1f902 99 89c8 29d0 8945f8,914043e0 b941e800 528ccce1 72acccc1 9b217c01 d360fc21 13027c21 131f7c00 4b000020 914043e1 b901f820,"				 carry=m/10;
"
c745ec73400000,52880e60 914043e1 b901ec20,"		int i=16500-1;
"
eb04 8b45ec 4898 8b848510fefeff 85c0 7506 837dec00 79e6,14000006 914043e0 b981ec00 d37ef400 910063e1 b8606820 7100001f 540000a1 914043e0 b941ec00 7100001f 54fffe2a,"		while(ans[i]==0 && i>=0){
"
836dec01,914043e0 b941ec00 51000400 914043e1 b901ec20,"			i--;
"
8b8508fefeff 89c6 bf2e204000 b800000000 e885fdffff,b94013e0 2a0003e1 90000000 91280000 97ffff2d,"		printf(""\t%d! ="", num);
"
eb21 837dec00 79d9,1400000f 914043e0 b941ec00 7100001f 54fffdea,"		while(i>=0){
"
8b45ec 4898 8b848510fefeff 89c6 bf1d204000 b800000000 e866fdffff,914043e0 b981ec00 d37ef400 910063e1 b8606820 2a0003e1 90000000 9127a000 97ffff23,"			printf(""%d"", ans[i]);
"
836dec01,914043e0 b941ec00 51000400 914043e1 b901ec20,"			i--;
"
bf0a000000 e842fdffff,52800140 97ffff1c,"		printf(""\n"");
"
c9 c3 0f1f4000,a9407bfd 910803ff 914043ff d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
c745fc05000000 c745f80a000000,528000a0 b9001fe0 52800140 b9001be0,"	int num1=5, num2=10;
"
488d55f8 488d45fc 4889c6 bf08204000 b800000000 e8dafeffff,910063e1 910073e0 aa0103e2 aa0003e1 90000000 911c8000 97ffffaa,"	printf(""The numbers are: %d and %d"", &num1,&num2);
"
8b55fc 8b45f8 01d0 8945fc,b9401fe1 b9401be0 0b000020 b9001fe0,"	num1=num1+num2; //num1=15 and num2=10
"
8b55fc 8b45f8 29c2 8955f8,b9401fe1 b9401be0 4b000020 b9001be0,"	num2=num1-num2; //num1=15 and num2=5
"
8b55fc 8b45f8 29c2 8955fc,b9401fe1 b9401be0 4b000020 b9001fe0,"	num1=num1-num2; //num1=10 and num2=5
"
488d55f8 488d45fc 4889c6 bf28204000 b800000000 e89ffeffff,910063e1 910073e0 aa0103e2 aa0003e1 90000000 911d0000 97ffff97,"	printf(""The numbers have been swapped with new positions: %d and %d"", &num1,&num2);
"
b800000000,52800000,"	return 0;
"
c9 c3 0f1f840000000000,a8c27bfd d65f03c0,}
55 4889e5 53 4883ec38 4889e0 4889c3,a9bb7bfd 910003fd f9000bf3 910003e8 aa0803f3,"{
"
488b05e42e0000 488d50ff 488955d8 4889c2 4989d0 41b900000000 4889c2 4889d6 bf00000000 4889c2 b810000000 4883e801 4801d0 b910000000 ba00000000 48f7f1 486bc010 4829c4 4889e0 4883c000 488945d0,b0000088 91010108 f9400108 d1000509 f9001fa9 aa0803e9 aa0903e6 d2800007 d37dfcc9 d37df0e3 aa030123 d37df0c2 aa0803e2 aa0203e4 d2800005 d37dfc82 d37df0a1 aa010041 d37df080 aa0803e0 91003c00 d344fc00 d37cec00 cb2063ff 910003e0 91000000 f9001ba0,"	char number[max];
"
48c745e000000000,f90023bf,"	long long int len,i,count=0;
"
bf08204000 b800000000 e880feffff,90000000 91224000 97ffff9b,"	printf(""Enter a Number: "");
"
488b45d0 4889c6 bf19204000 b800000000 e87afeffff,f9401ba1 90000000 9122a000 97ffff93,"	scanf(""%s"",number);
"
488b45d0 4889c7 e84efeffff 488945c8,f9401ba0 97ffff81 f90017a0,"	len=strlen(number);
"
48c745e800000000 eb30 488345e801 488b45c8 4889c2 48c1ea3f 4801d0 48d1f8 483945e8 7cb9,f90027bf 14000013 f94027a0 91000400 f90027a0 f94017a0 d37ffc01 8b000020 9341fc00 aa0003e1 f94027a0 eb01001f 54fffceb,"	for(i=0;i<len/2;i++)
"
488b55d0 488b45e8 4801d0 0fb610 488b45c8 482b45e8 488d48ff 488b45d0 0fb60408 38c2 7505,f9401ba1 f94027a0 8b000020 39400001 f94017a2 f94027a0 cb000040 d1000400 f9401ba2 38606840 6b00003f 54000081,"		if(number[i]==number[len-i-1])
"
488345e001,f94023a0 91000400 f90023a0,"				count++;
"
488b45c8 4889c2 48c1ea3f 4801d0 48d1f8 483945e0 7518,f94017a0 d37ffc01 8b000020 9341fc00 aa0003e1 f94023a0 eb01001f 540000c1,"	if(count==len/2)
"
488b45d0 4889c6 bf20204000 b800000000 e8dcfdffff eb16,f9401ba1 90000000 9122c000 97ffff6c 14000005,"		printf(""The entered number %s is a palindrome\n"",number);
"
488b45d0 4889c6 bf48204000 b800000000 e8c4fdffff,f9401ba1 90000000 91236000 97ffff67,"		printf(""The entered number %s is not a palindrome\n"",number);
"
b800000000 4889dc,52800000 9100027f,"	return 0;
"
488b5df8 c9 c3 660f1f440000,910003bf f9400bf3 a8c57bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main() {
"
c745f800000000,b9001bff,"   unsigned int number, temp, droot = 0;
"
bf04204000 b800000000 e8dcfeffff,90000000 911f0000 97ffffb5,"   printf(""Enter a positive number: "");
"
488d45f0 4889c6 bf1e204000 b800000000 e8d6feffff,910043e0 aa0003e1 90000000 911f8000 97ffffac,"   scanf(""%u"", &number);
"
8b45f0 8945fc,b94013e0 b9001fe0,"   temp = number;
"
eb5e 837dfc00 759c,14000021 b9401fe0 7100001f 54fffbc1,"   while(temp != 0) {
"
8b4dfc 89ca b8cdcccccc 480fafc2 48c1e820 89c2 c1ea03 89d0 c1e002 01d0 01c0 29c1 89ca 8955f4,b9401fe2 529999a0 72b99980 9ba07c40 d360fc00 53037c01 2a0103e0 531e7400 0b010000 531f7800 4b000041 b90017e1,"      int digit = temp % 10;
"
8b45f4 0145f8,b94017e0 b9401be1 0b000020 b9001be0,"      droot += digit;
"
8b45fc 89c2 b8cdcccccc 480fafc2 48c1e820 c1e803 8945fc,b9401fe1 529999a0 72b99980 9ba07c20 d360fc00 53037c00 b9001fe0,"      temp /=10;
"
837dfc00 7513 837df809 760d,b9401fe0 7100001f 540000e1 b9401be0 7100241f 54000089,"      if(temp == 0 && droot > 9) {
"
8b45f8 8945fc,b9401be0 b9001fe0,"         temp = droot;
"
c745f800000000,b9001bff,"         droot = 0;
"
8b45f0 8b55f8 89c6 bf21204000 b800000000 e843feffff,b94013e0 b9401be2 2a0003e1 90000000 911fa000 97ffff84,"   printf(""The digital root of %u is %u\n"", number, droot);
"
b800000000,52800000,"   return 0;
"
c9 c3 662e0f1f840000000000 6690,a8c27bfd d65f03c0,"}
"
55 4889e5 4881ece0000000,a9b17bfd 910003fd,"int main() {
"
bf04204000 b800000000 e8e0feffff,90000000 91268000 97ffffb6,"  printf(""How many elements?"");
"
488d852cffffff 4889c6 bf17204000 b800000000 e8d7feffff,910073e0 aa0003e1 90000000 9126e000 97ffffad,"  scanf(""%d"", & n);
"
bf1a204000 b800000000 e8b8feffff,90000000 91270000 97ffffae,"  printf(""\nEnter array elements:"");
"
c745fc00000000 eb2a 8345fc01 8b852cffffff 3945fc 7ccb,b900efff 1400000c b940efe0 11000400 b900efe0 b9401fe0 b940efe1 6b00003f 54fffe4b,"  for (i = 0; i < n; i++)
"
488d8530ffffff 8b55fc 4863d2 48c1e202 4801d0 4889c6 bf17204000 b800000000 e899feffff,910083e1 b980efe0 d37ef400 8b000020 aa0003e1 90000000 9126e000 97ffffa0,"    scanf(""%d"", & a[i]);
"
8b852cffffff 8d50ff 488d8530ffffff be00000000 4889c7 e84b000000,b9401fe0 51000401 910083e0 2a0103e2 52800001 94000018,"  quick_sort(a, 0, n - 1);
"
bf31204000 b800000000 e84efeffff,90000000 91276000 97ffff94,"  printf(""\nArray after sorting:"");
"
c745fc00000000 eb21 8345fc01 8b852cffffff 3945fc 7cd4,b900efff 1400000c b940efe0 11000400 b900efe0 b9401fe0 b940efe1 6b00003f 54fffe4b,"  for (i = 0; i < n; i++)
"
8b45fc 4898 8b848530ffffff 89c6 bf47204000 b800000000 e828feffff,b980efe0 d37ef400 910083e1 b8606820 2a0003e1 90000000 9127c000 97ffff8a,"    printf(""%d "", a[i]);
"
b800000000,52800000,"  return 0;
"
c9 c3,a8cf7bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8 8975e4 8955e0,a9bd7bfd 910003fd f9000fe0 b90017e1 b90013e2,"void quick_sort(int a[], int l, int u) {
"
8b45e4 3b45e0 7d45,b94017e1 b94013e0 6b00003f 5400024a,"  if (l < u) {
"
8b55e0 8b4de4 488b45e8 89ce 4889c7 e834000000 8945fc,b94013e2 b94017e1 f9400fe0 94000011 b9002fe0,"    j = partition(a, l, u);
"
8b45fc 8d50ff 8b4de4 488b45e8 89ce 4889c7 e8b8ffffff,b9402fe0 51000400 2a0003e2 b94017e1 f9400fe0 97ffffed,"    quick_sort(a, l, j - 1);
"
8b45fc 8d4801 8b55e0 488b45e8 89ce 4889c7 e8a1ffffff,b9402fe0 11000400 b94013e2 2a0003e1 f9400fe0 97ffffe7,"    quick_sort(a, j + 1, u);
"
90 c9 c3,d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 48897de8 8975e4 8955e0,d10083ff f90007e0 b90007e1 b90003e2,"int partition(int a[], int l, int u) {
"
8b45e4 4898 488d148500000000 488b45e8 4801d0 8b00 8945f4,b98007e0 d37ef400 f94007e1 8b000020 b9400000 b90017e0,"  v = a[l];
"
8b45e4 8945fc,b94007e0 b9001fe0,"  i = l;
"
8b45e0 83c001 8945f8,b94003e0 11000400 b9001be0,"  j = u + 1;
"
8345fc01,b9401fe0 11000400 b9001fe0,"      i++;
"
8b45fc 4898 488d148500000000 488b45e8 4801d0 8b00 3945f4 7e08 8b45fc 3b45e0 7ed9,b9801fe0 d37ef400 f94007e1 8b000020 b9400000 b94017e1 6b00003f 540000ad b9401fe1 b94003e0 6b00003f 54fffe4d,"    while (a[i] < v && i <= u);
"
836df801,b9401be0 51000400 b9001be0,"      j--;
"
8b45f8 4898 488d148500000000 488b45e8 4801d0 8b00 3945f4 7ce1,b9801be0 d37ef400 f94007e1 8b000020 b9400000 b94017e1 6b00003f 54fffecb,"    while (v < a[j]);
"
8b45fc 3b45f8 7d5f,b9401fe1 b9401be0 6b00003f 540002ea,"    if (i < j) {
"
8b45fc 4898 488d148500000000 488b45e8 4801d0 8b00 8945f0,b9801fe0 d37ef400 f94007e1 8b000020 b9400000 b90013e0,"      temp = a[i];
"
8b45f8 4898 488d148500000000 488b45e8 4801d0 8b55fc 4863d2 488d0c9500000000 488b55e8 4801ca 8b00 8902,b9801be0 d37ef400 f94007e1 8b000021 b9801fe0 d37ef400 f94007e2 8b000040 b9400021 b9000001,"      a[i] = a[j];
"
8b45f8 4898 488d148500000000 488b45e8 4801c2 8b45f0 8902,b9801be0 d37ef400 f94007e1 8b000020 b94013e1 b9000001,"      a[j] = temp;
"
8b45fc 3b45f8 0f8c47ffffff,b9401fe1 b9401be0 6b00003f 54fff92b,"  } while (i < j);
"
8b45f8 4898 488d148500000000 488b45e8 4801d0 8b55e4 4863d2 488d0c9500000000 488b55e8 4801ca 8b00 8902,b9801be0 d37ef400 f94007e1 8b000021 b98007e0 d37ef400 f94007e2 8b000040 b9400021 b9000001,"  a[l] = a[j];
"
8b45f8 4898 488d148500000000 488b45e8 4801c2 8b45f4 8902,b9801be0 d37ef400 f94007e1 8b000020 b94017e1 b9000001,"  a[j] = v;
"
8b45f8,b9401be0,"  return (j);
"
5d c3 660f1f440000,910083ff d65f03c0,"}
"
55 4889e5,a9bf7bfd 910003fd,"{
"
bf04204000 e8dcfeffff,90000000 911fc000 97ffffb2,"    printf(""Enter information:\n"");
"
bf17204000 b800000000 e8ddfeffff,90000000 91202000 97ffffb7,"    printf(""Enter name: "");
"
be60404000 bf24204000 b800000000 e8d9feffff,b0000080 91012001 90000000 91206000 97ffffae,"    scanf(""%s"", s.name);
"
bf27204000 b800000000 e8bafeffff,90000000 91208000 97ffffaf,"    printf(""Enter roll number: "");
"
be94404000 bf3b204000 b800000000 e8b6feffff,b0000080 9101f001 90000000 9120e000 97ffffa6,"    scanf(""%d"", &s.roll);
"
bf3e204000 b800000000 e897feffff,90000000 91210000 97ffffa7,"    printf(""Enter marks: "");
"
be98404000 bf4c204000 b800000000 e893feffff,b0000080 91020001 90000000 91214000 97ffff9e,"    scanf(""%f"", &s.marks);
"
bf4f204000 e869feffff,90000000 91216000 97ffff97,"    printf(""Displaying Information:\n"");
"
bf67204000 b800000000 e86afeffff,90000000 9121c000 97ffff9c,"    printf(""Name: "");
"
bf60404000 e850feffff,b0000080 91012000 97ffff91,"    puts(s.name);
"
8b05ae2e0000 89c6 bf6e204000 b800000000 e849feffff,b0000080 91012000 b9403400 2a0003e1 90000000 9121e000 97ffff92,"    printf(""Roll number: %d\n"",s.roll);
"
f30f1005992e0000 660fefc9 f30f5ac8 66480f7ec8 66480f6ec0 bf7f204000 b801000000 e820feffff,b0000080 91012000 bd403800 1e22c000 90000000 91224000 97ffff8b,"    printf(""Marks: %.1f\n"", s.marks);
"
b800000000,52800000,"    return 0;
"
5d c3 660f1f840000000000,a8c17bfd d65f03c0,"}
"
55 4889e5 53 4883ec38 4889e0 4889c3,a9bb7bfd 910003fd f9000bf3 910003e8 aa0803f3,"int main() {
"
c745e003000000 c745dc04000000,52800068 b90043a8 52800088 b9003fa8,"    int r = 3, c = 4, i, j, count;
"
8b45e0 4863d0 4883ea01 488955d0 4863d0 4989d0 41b900000000 4863d0 4889d6 bf00000000 4898 488d14c500000000 b810000000 4883e801 4801d0 b910000000 ba00000000 48f7f1 486bc010 4829c4 4889e0 4883c007 48c1e803 48c1e003 488945c8,b94043a8 93407d09 d1000529 f9001ba9 93407d09 aa0903e6 d2800007 d37afcc9 d37ae4e3 aa030123 d37ae4c2 93407d02 aa0203e4 d2800005 d37afc82 d37ae4a1 aa010041 d37ae480 93407d00 d37df000 91003c00 d344fc00 d37cec00 cb2063ff 910003e0 91001c00 d343fc00 d37df000 f90017a0,"    int * arr[r];
"
c745ec00000000 eb26 8345ec01 8b45ec 3b45e0 7cd2,b9004fbf 1400000b b9404fa0 11000400 b9004fa0 b9404fa1 b94043a0 6b00003f 54fffe6b,"    for (i = 0; i < r; i++)
"
8b45dc 4898 48c1e002 4889c7 e871feffff 4889c1 488b45c8 8b55ec 4863d2 48890cd0,b9803fa0 d37ef400 97ffff84 aa0003e2 f94017a0 b9804fa1 f8217802,"        arr[i] = (int * ) malloc(c * sizeof(int));
"
c745e400000000,b90047bf,"    count = 0;
"
c745ec00000000 eb3d 8345ec01 8b45ec 3b45e0 7cbb,b9004fbf 14000018 b9404fa0 11000400 b9004fa0 b9404fa1 b94043a0 6b00003f 54fffccb,"    for (i = 0; i < r; i++)
"
c745e800000000 eb28 8345e801 8b45e8 3b45dc 7cd0,b9004bbf 1400000f b9404ba0 11000400 b9004ba0 b9404ba1 b9403fa0 6b00003f 54fffdeb,"        for (j = 0; j < c; j++)
"
8345e401 488b45c8 8b55ec 4863d2 488b04d0 8b55e8 4863d2 48c1e202 4801c2 8b45e4 8902,b94047a0 11000400 b90047a0 f94017a0 b9804fa1 f8617801 b9804ba0 d37ef400 8b000020 b94047a1 b9000001,"            arr[i][j] = ++count; // Or *(*(arr+i)+j) = ++count 
"
c745ec00000000 eb47 8345ec01 8b45ec 3b45e0 7cb1,b9004fbf 14000018 b9404fa0 11000400 b9004fa0 b9404fa1 b94043a0 6b00003f 54fffccb,"    for (i = 0; i < r; i++)
"
c745e800000000 eb32 8345e801 8b45e8 3b45dc 7cc6,b9004bbf 1400000f b9404ba0 11000400 b9004ba0 b9404ba1 b9403fa0 6b00003f 54fffdeb,"        for (j = 0; j < c; j++)
"
488b45c8 8b55ec 4863d2 488b04d0 8b55e8 4863d2 48c1e202 4801d0 8b00 89c6 bf04204000 b800000000 e8affdffff,f94017a0 b9804fa1 f8617801 b9804ba0 d37ef400 8b000020 b9400000 2a0003e1 90000000 9122c000 97ffff58,"            printf(""%d "", arr[i][j]);
"
b800000000 4889dc,52800000 9100027f,"    return 0;
"
488b5df8 c9 c3 660f1f840000000000,910003bf f9400bf3 a8c57bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main(){
"
c745fc01000000,52800020 b9001fe0,"	int num, i = 1;
"
bf08204000 e8d1feffff,90000000 911e6000 97ffffb0,"    printf(""Enter a number to calculate the multiplication table up to 10:\n"");
"
488d45f8 4889c6 bf47204000 b800000000 e8dbfeffff,910063e0 aa0003e1 90000000 911f6000 97ffffaf,"	scanf(""%d"", &num);
"
c745fc01000000 eb24 8345fc01 837dfc0a 7ed6,52800020 b9001fe0 1400000d b9401fe0 11000400 b9001fe0 b9401fe0 7100281f 54fffe4d,"	for(i = 1; i <= 10; i++){
"
8b45f8 0faf45fc 89c1 8b55f8 8b45fc 89c6 bf4a204000 b800000000 e8a2feffff,b9401be2 b9401be1 b9401fe0 1b007c20 2a0003e3 b9401fe1 90000000 911f8000 97ffffa7,"		printf(""%d x %d = %d\n"", i, num, num * i);
"
b800000000,52800000,"	return 0;
"
c9 c3 90,a8c27bfd d65f03c0,}
55 4889e5 4883ec20,a9bd7bfd 910003fd,"int main() {
"
bf08204000 e8d8feffff,90000000 911fe000 97ffffb2,"   printf(""Enter two numbers :\n"");
"
488d55e4 488d45e8 4889c6 bf1c204000 b800000000 e8defeffff,910053e1 910063e0 aa0103e2 aa0003e1 90000000 91204000 97ffffaf,"   scanf(""%d%d"", & number1, & number2);
"
8b55e8 8b45e4 01d0 8945fc,b9401be1 b94017e0 0b000020 b9002fe0,"   addition = number1 + number2;
"
8b55e8 8b45e4 29c2 8955f8,b9401be1 b94017e0 4b000020 b9002be0,"   subtraction = number1 - number2;
"
8b55e8 8b45e4 0fafc2 8945f4,b9401be1 b94017e0 1b007c20 b90027e0,"   multiplication = number1 * number2;
"
8b45e8 8b4de4 99 f7f9 8945f0,b9401be1 b94017e0 1ac00c20 b90023e0,"   division = number1 / number2;
"
8b45e8 8b4de4 99 f7f9 8955ec,b9401be0 b94017e1 1ac10c02 1b017c41 4b010000 b9001fe0,"   modulo = number1 % number2;
"
8b45fc 89c6 bf28204000 b800000000 e880feffff,b9402fe1 90000000 91206000 97ffff99,"   printf(""Addition of number 1 and number 2 : %d\n"", addition);
"
8b45f8 89c6 bf50204000 b800000000 e86cfeffff,b9402be1 90000000 91210000 97ffff95,"   printf(""Subtraction of number 1 and number 2 : %d\n"", subtraction);
"
8b45f4 89c6 bf80204000 b800000000 e858feffff,b94027e1 90000000 9121c000 97ffff91,"   printf(""Multiplication of number 1 and number 2 : %d\n"", multiplication);
"
8b45f0 89c6 bfb0204000 b800000000 e844feffff,b94023e1 90000000 91228000 97ffff8d,"   printf(""Division of number 1 and number 2 : %d\n"", division);
"
8b45ec 89c6 bfd8204000 b800000000 e830feffff,b9401fe1 90000000 91232000 97ffff89,"   printf(""Modulo of number 1 and number 2 : %d\n"", modulo);
"
b800000000,52800000,"   return 0;
"
c9 c3 660f1f840000000000,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{ int a,b,t;
"
bf04204000 b800000000 e8e3feffff,90000000 911d2000 97ffffb6,"printf(""Enter two Numbers : "");
"
488d55f4 488d45f8 4889c6 bf19204000 b800000000 e8d9feffff,910053e1 910063e0 aa0103e2 aa0003e1 90000000 911d8000 97ffffab,"scanf(""%d %d"",&a,&b);
"
8b45f4 8945fc,b94017e0 b9001fe0,"t=b;
"
8b45f8 8945f4,b9401be0 b90017e0,"b=a;
"
8b45fc 8945f8,b9401fe0 b9001be0,"a=t;
"
8b55f4 8b45f8 89c6 bf1f204000 b800000000 e8a0feffff,b9401be0 b94017e1 2a0103e2 2a0003e1 90000000 911da000 97ffffa2,"printf(""Swap is %d %d"",a,b);
"
90 c9 c3 662e0f1f840000000000 0f1f00,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
c745fc00000000,b9001fff,"  int rem = 0;
"
488d45f8 4889c6 bf04204000 b800000000 e8e5feffff,910063e0 aa0003e1 90000000 911d8000 97ffffaf,"  scanf (""%d"", &t);
"
eb3a 8b45f8 8d50ff 8955f8 85c0 75b9,14000012 b9401be0 51000401 b9001be1 7100001f 54fffd61,"  while (t--)
"
488d55f0 488d45f4 4889c6 bf07204000 b800000000 e8c9feffff,910043e1 910053e0 aa0103e2 aa0003e1 90000000 911da000 97ffffa7,"      scanf (""%d%d"",&A,&B);
"
8b45f4 8b4df0 99 f7f9 8955fc,b94017e0 b94013e1 1ac10c02 1b017c41 4b010000 b9001fe0,"      rem = A % B;
"
8b45fc 89c6 bf0c204000 b800000000 e899feffff,b9401fe1 90000000 911dc000 97ffffa1,"      printf(""%d\n"", rem);
"
b800000000,52800000,"  return 0;
"
c9 c3 0f1f440000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec20,a9bd7bfd 910003fd,"{
"
bf08204000 e8d8feffff,90000000 91206000 97ffffb2,"	printf(""Select your choice: \n"");
"
bf1d204000 e8cefeffff,90000000 9120c000 97ffffaf,"	printf(""1. Celcius to Fahrenheit\n"");
"
bf36204000 e8c4feffff,90000000 91214000 97ffffac,"	printf(""2. Fahrenheit to Celcius\n"");
"
bf4f204000 b800000000 e8c5feffff,90000000 9121c000 97ffffb1,"	printf(""Enter your choice: "");
"
488d45e4 4889c6 bf63204000 b800000000 e8bffeffff,910053e0 aa0003e1 90000000 91222000 97ffffa8,"	scanf(""%d"", &choice);
"
8b45e4 83f801 740a 83f802 7442 e986000000,b94017e0 7100041f 54000080 7100081f 54000200 1400001f,"	switch(choice)
"
bf68204000 b800000000 e88efeffff,90000000 91224000 97ffffa3,"			printf(""Enter the temperature in Celcius: "");
"
488d45f0 4889c6 bf8b204000 b800000000 e888feffff,910083e0 aa0003e1 90000000 9122e000 97ffff9a,"			scanf(""%lf"", &c);
"
f20f104df0 f20f10051b0f0000 f20f58c1 f20f1145f8,fd4013e0 d2e80800 9e670001 1e612800 fd0017e0,"			result = (9 / 5) * c + 32;
"
eb53,14000014,"			break;
"
bf90204000 b800000000 e851feffff,90000000 91230000 97ffff95,"			printf(""Enter the temperature in Fahrenheit: "");
"
488d45e8 4889c6 bf8b204000 b800000000 e84bfeffff,910063e0 aa0003e1 90000000 9122e000 97ffff8c,"			scanf(""%lf"", &f);
"
f20f1045e8 f20f1015de0e0000 660f28c8 f20f5cca 660fefc0 f20f59c1 f20f1145f8,fd400fe0 d2e80800 9e670001 1e613800 2f00e401 1e610800 fd0017e0,"			result = (5 / 9) * (f - 32);
"
eb0a,14000004,"			break;
"
bfb6204000 e8fdfdffff,90000000 9123a000 97ffff7d,"			printf(""Invalid case!\n"");
"
488b45f8 66480f6ec0 bfc8204000 b801000000 e8f5fdffff,fd4017e0 90000000 9123e000 97ffff81,"	printf(""The resultant temperature is: %lf"", result);
"
b800000000,52800000,"	return 0;
"
c9 c3 662e0f1f840000000000 0f1f4000,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
c745fc01000000 eb2d 8345fc01 837dfc05 7ecd,52800020 b9001fe0 14000012 b9401fe0 11000400 b9001fe0 b9401fe0 7100141f 54fffdad,"	for(i=1;i<=5;i++)
"
c745f801000000 eb0e 8345f801 8b45f8 3b45fc 7eea,52800020 b9001be0 14000006 b9401be0 11000400 b9001be0 b9401be1 b9401fe0 6b00003f 54ffff0d,"		for(j=1;j<=i;j++)
"
bf2a000000 e8d6feffff,52800540 97ffffb1,"			printf(""*"");
"
bf0a000000 e8c0feffff,52800140 97ffffa8,"		printf(""\n"");
"
c745fc01000000 eb55 8345fc01 837dfc05 7ea5,52800020 b9001fe0 14000020 b9401fe0 11000400 b9001fe0 b9401fe0 7100141f 54fffbed,"	for (i=1;i<=5;i++)
"
8b45fc 8945f8 eb0e 8345f801 837df804 7eec,b9401fe0 b9001be0 14000006 b9401be0 11000400 b9001be0 b9401be0 7100101f 54ffff2d,"		for (j=i;j<5;j++)
"
bf20000000 e89bfeffff,52800400 97ffff9a,"		    printf("" "");
"
c745f401000000 eb18 8345f401 8b45fc 01c0 3945f4 7cde,52800020 b90017e0 14000008 b94017e0 11000400 b90017e0 b9401fe0 531f7800 b94017e1 6b00003f 54fffeab,"		for (k=1;k<(i*2);k++)
"
8b45f4 89c6 bf04204000 b800000000 e884feffff,b94017e1 90000000 9121c000 97ffff89,"		    printf(""%d"",k);
"
bf0a000000 e85cfeffff,52800140 97ffff83,"        printf(""\n"");
"
c745fc04000000 eb58 836dfc01 837dfc00 7fa2,52800080 b9001fe0 14000021 b9401fe0 51000400 b9001fe0 b9401fe0 7100001f 54fffbcc,"    for (i=4;i>=1;i--)
"
c745f805000000 eb0e 836df801 8b45f8 3b45fc 7fea,528000a0 b9001be0 14000006 b9401be0 51000400 b9001be0 b9401be1 b9401fe0 6b00003f 54ffff0c,"		for (j=5;j>i;j--)
"
bf20000000 e836feffff,52800400 97ffff75,"		    printf("" "");
"
c745f401000000 eb18 8345f401 8b45fc 01c0 3945f4 7cde,52800020 b90017e0 14000008 b94017e0 11000400 b90017e0 b9401fe0 531f7800 b94017e1 6b00003f 54fffeab,"		    for (k=1;k<(i*2);k++)
"
8b45f4 89c6 bf04204000 b800000000 e81dfeffff,b94017e1 90000000 9121c000 97ffff63,"		    printf(""%d"",k);
"
bf0a000000 e8f5fdffff,52800140 97ffff5d,"        printf(""\n"");
"
b800000000,52800000,"	return 0;
"
c9 c3 0f1f4000,a8c27bfd d65f03c0,"}
"
55 4889e5 48897de8 488975e0,d10083ff f90007e0 f90003e1,"int SubString(char *haystack, char *needle ){
"
c745fc00000000,b9001fff,"	int bigIndex = 0;
"
c745f800000000,b9001bff,"	int littleIndex = 0;
"
eb56 8b45fc 4863d0 488b45e8 4801d0 0fb600 84c0 75b8,1400001e b9801fe0 f94007e1 8b000020 39400000 7100001f 54fffd41,"	while (haystack[bigIndex] != '\0'){
"
8b45f8 4898 488d5001 488b45e0 4801d0 0fb600 84c0 7507,b9801be0 91000400 f94003e1 8b000020 39400000 7100001f 54000061,"			if (needle[littleIndex + 1] == '\0')
"
b801000000 eb51,52800020 1400001c,"				return (1);
"
8345f801,b9401be0 11000400 b9001be0,"			littleIndex++;
"
8b55fc 8b45f8 01d0 4863d0 488b45e8 4801d0 0fb610 8b45f8 4863c8 488b45e0 4801c8 0fb600 38c2 74b5,b9401fe1 b9401be0 0b000020 93407c00 f94007e1 8b000020 39400001 b9801be0 f94003e2 8b000040 39400000 6b00003f 54fffd00,"		while (haystack[bigIndex + littleIndex] == needle[littleIndex]){
"
c745f800000000,b9001bff,"		littleIndex = 0;\
"
8345fc01,b9401fe0 11000400 b9001fe0,"		bigIndex++;
"
b800000000,52800000,"	return (0);
"
5d c3,910083ff d65f03c0,"}
"
55 4889e5 4881ece0000000,a9b27bfd 910003fd,"int main(){
"
bf08204000 b800000000 e853feffff,90000000 91212000 97ffff8e,"	printf(""Please enter your Haystack string (< 100 characters): "");
"
488d8520ffffff 4889c6 bf3f204000 b800000000 e84afeffff,910043e0 aa0003e1 90000000 91220000 97ffff85,"	scanf(""%s"", haystack);
"
bf48204000 b800000000 e82bfeffff,90000000 91222000 97ffff86,"	printf(""Please enter your Needle string (< 100 characters): "");
"
488d4590 4889c6 bf3f204000 b800000000 e825feffff,9101e3e0 aa0003e1 90000000 91220000 97ffff7d,"	scanf(""%s"", needle);
"
488d5590 488d8520ffffff 4889d6 4889c7 e805ffffff 85c0 740c,9101e3e1 910043e0 97ffffc0 7100001f 540000a0,"	if (SubString(haystack, needle))
"
bf7d204000 e8e1fdffff eb0a,90000000 91230000 97ffff71 14000004,"		printf(""Needle was found in Haystack!\n"");
"
bf9b204000 e8d5fdffff,90000000 91238000 97ffff6d,"		printf(""Needle not found in Haystack\n"");
"
b800000000,52800000,"	return (0);
"
c9 c3 662e0f1f840000000000 0f1f4000,a8ce7bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
c745fc05000000 c745f80a000000,528000a0 b9001fe0 52800140 b9001be0,"	int num1=5, num2=10;
"
488d55f8 488d45fc 4889c6 bf08204000 b800000000 e8dafeffff,910063e1 910073e0 aa0103e2 aa0003e1 90000000 911c8000 97ffffaa,"	printf(""The numbers are: %d and %d"", &num1,&num2);
"
8b55fc 8b45f8 01d0 8945fc,b9401fe1 b9401be0 0b000020 b9001fe0,"	num1=num1+num2; //num1=15 and num2=10
"
8b55fc 8b45f8 29c2 8955f8,b9401fe1 b9401be0 4b000020 b9001be0,"	num2=num1-num2; //num1=15 and num2=5
"
8b55fc 8b45f8 29c2 8955fc,b9401fe1 b9401be0 4b000020 b9001fe0,"	num1=num1-num2; //num1=10 and num2=5
"
488d55f8 488d45fc 4889c6 bf28204000 b800000000 e89ffeffff,910063e1 910073e0 aa0103e2 aa0003e1 90000000 911d0000 97ffff97,"	printf(""The numbers have been swapped with new positions: %d and %d"", &num1,&num2);
"
b800000000,52800000,"	return 0;
"
c9 c3 0f1f840000000000,a8c27bfd d65f03c0,}
55 4889e5 48897de8 488975e0,d10083ff f90007e0 f90003e1,"void swap_ref(int* a, int* b){
"
488b45e8 8b00 8945fc,f94007e0 b9400000 b9001fe0," int temp = *a;
"
488b45e0 8b10 488b45e8 8910,f94003e0 b9400001 f94007e0 b9000001," *a = *b;
"
488b45e0 8b55fc 8910,f94003e0 b9401fe1 b9000001," *b = temp;
"
90 5d c3,d503201f 910083ff d65f03c0,"}
"
55 4889e5 897dec 8975e8,d10083ff b9000fe0 b9000be1,"{
"
8b45ec 8945fc,b9400fe0 b9001fe0," int temp = a;
"
8b45e8 8945ec,b9400be0 b9000fe0," a = b;
"
8b45fc 8945e8,b9401fe0 b9000be0," b = temp;
"
90 5d c3,d503201f 910083ff d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main(void) {
"
c745f401000000,52800020 b90017e0,"  int a = 1;
"
c745f002000000,52800040 b90013e0,"  int b = 2;
"
8b45f4 89c6 bf04204000 b800000000 e894feffff,b94017e0 2a0003e1 90000000 911f8000 97ffff90,"  printf(""%d\n"", a);
"
8b45f0 89c6 bf04204000 b800000000 e880feffff,b94013e0 2a0003e1 90000000 911f8000 97ffff8b,"  printf(""%d\n"", b);
"
488d55f0 488d45f4 4889d6 4889c7 e863ffffff,910043e1 910053e0 97ffffd2,"  swap_ref(&a, &b);
"
8b45f4 89c6 bf04204000 b800000000 e859feffff,b94017e0 2a0003e1 90000000 911f8000 97ffff83,"  printf(""%d\n"", a);
"
8b45f0 89c6 bf04204000 b800000000 e845feffff,b94013e0 2a0003e1 90000000 911f8000 97ffff7e,"  printf(""%d\n"", b);
"
c745fc05000000,528000a0 b9001fe0,"  int c = 5;
"
c745f80a000000,52800140 b9001be0,"  int d = 10;
"
8b45fc 89c6 bf04204000 b800000000 e823feffff,b9401fe1 90000000 911f8000 97ffff76,"  printf(""%d\n"", c);
"
8b45f8 89c6 bf04204000 b800000000 e80ffeffff,b9401be1 90000000 911f8000 97ffff72,"  printf(""%d\n"", d);
"
8b55f8 8b45fc 89d6 89c7 e823ffffff,b9401be1 b9401fe0 97ffffc9,"  swap(c, d);
"
8b45fc 89c6 bf04204000 b800000000 e8ecfdffff,b9401fe1 90000000 911f8000 97ffff6b,"  printf(""%d\n"", c);
"
8b45f8 89c6 bf04204000 b800000000 e8d8fdffff b800000000,b9401be1 90000000 911f8000 97ffff67 52800000,"  printf(""%d\n"", d);
"
c9 c3 90,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec50 48897dc8 488975c0 488955b8,a9ba7bfd 910003fd f90017e0 f90013e1 f9000fe2,"{
"
488b45b8 4883c001 48c1e003 4889c7 e8d2feffff 488945d8,f9400fe0 91000400 d37df000 97ffff92 f9001fe0,"	long long *count_arr = malloc((m + 1) * sizeof(long long));
"
488b45c0 48c1e003 4889c7 e8befeffff 488945d0,f94013e0 d37df000 97ffff8e f9001be0,"	long long *sorted_arr = malloc(n * sizeof(long long));
"
48c745f800000000,f9002fff,"	long i_arr = 0;
"
48c745f000000000 e9b4000000 488345f001 488b45f0 483b45b8 0f8e3effffff,f9002bff 14000036 f9402be0 91000400 f9002be0 f9402be1 f9400fe0 eb00003f 54fff90d,"	for (long i = 0; i <= m; ++i) {
"
48c745e800000000 eb51 488345e801 488b45e8 483b45c0 7ca5,f90027ff 14000017 f94027e0 91000400 f90027e0 f94027e1 f94013e0 eb00003f 54fffceb,"		for (long j = 0; j < n; ++j) {
"
488b45e8 488d14c500000000 488b45c8 4801d0 488b00 483945f0 7530,f94027e0 d37df000 f94017e1 8b000020 f9400000 f9402be1 eb00003f 54000181,"			if (arr[j] == i) {
"
488b45f0 488d14c500000000 488b45d8 4801d0 488b10 488b45f0 488d0cc500000000 488b45d8 4801c8 4883c201 488910,f9402be0 d37df000 f9401fe1 8b000020 f9400001 f9402be0 d37df000 f9401fe2 8b000040 91000421 f9000001,"				count_arr[i] += 1;
"
48c745e000000000 eb24 488345e001 488b45f0 488d14c500000000 488b45d8 4801d0 488b00 483945e0 7cc0,f90023ff 1400000d f94023e0 91000400 f90023e0 f9402be0 d37df000 f9401fe1 8b000020 f9400000 f94023e1 eb00003f 54fffdab,"		for (long j = 0; j < count_arr[i]; ++j) {
"
488b45f8 488d14c500000000 488b45d0 4801c2 488b45f0 488902,f9402fe0 d37df000 f9401be1 8b000020 f9402be1 f9000001,"			sorted_arr[i_arr] = i;
"
488345f801,f9402fe0 91000400 f9002fe0,"			i_arr += 1;
"
488b45c8 4889c7 e8a7fdffff,f94017e0 97ffff5f,"	free(arr);
"
488b45d0,f9401be0,"	return sorted_arr;
"
c9 c3,a8c67bfd d65f03c0,"}
"
55 4889e5 4883ec30,a9bc7bfd 910003fd,"{
"
48c745e000000000,f90013ff,"	long n = 0;
"
bf08204000 b800000000 e8a2fdffff,90000000 91290000 97ffff5e,"	printf(""Enter the number of elements to be sorted: "");
"
488d45e0 4889c6 bf34204000 b800000000 e8acfdffff,910083e0 aa0003e1 90000000 9129c000 97ffff55,"	scanf(""%ld"", &n);
"
48c745d800000000,f9000fff,"	long m = 0;
"
bf38204000 b800000000 e875fdffff,90000000 9129e000 97ffff55,"	printf(""Enter the maximum value of the numbers to be sorted: "");
"
488d45d8 4889c6 bf34204000 b800000000 e87ffdffff,910063e0 aa0003e1 90000000 9129c000 97ffff4c,"	scanf(""%ld"", &m);
"
bf70204000 b800000000 e850fdffff,90000000 912ac000 97ffff4d,"	printf(""Enter the values to be sorted: "");
"
488b45e0 48c1e003 4889c7 e850fdffff 488945e8,f94013e0 d37df000 97ffff32 f90017e0,"	long long *arr = malloc(n * sizeof(long long));
"
48c745f800000000 eb2a 488345f801 488b45e0 483945f8 7ccc,f9001fff 1400000c f9401fe0 91000400 f9001fe0 f94013e0 f9401fe1 eb00003f 54fffe4b,"	for (long i = 0; i < n; ++i) {
"
488b45f8 488d14c500000000 488b45e8 4801d0 4889c6 bf90204000 b800000000 e82dfdffff,f9401fe0 d37df000 f94017e1 8b000020 aa0003e1 90000000 912b4000 97ffff3b,"		scanf(""%lld"", &arr[i]);
"
488b55d8 488b4de0 488b45e8 4889ce 4889c7 e8fdfdffff 488945e8,f94013e0 f9400fe1 aa0103e2 aa0003e1 f94017e0 97ffff80 f90017e0,"	arr = count_sort_naive(arr, n, m);
"
bf95204000 e8c9fcffff,90000000 912b6000 97ffff22,"	printf(""After sorting\n"");
"
48c745f000000000 eb2d 488345f001 488b45e0 483945f0 7cc9 b800000000,f9001bff 1400000d f9401be0 91000400 f9001be0 f94013e0 f9401be1 eb00003f 54fffe2b 52800000,"	for (long i = 0; i < n; ++i) {
"
488b45f0 488d14c500000000 488b45e8 4801d0 488b00 4889c6 bfa3204000 b800000000 e8a7fcffff,f9401be0 d37df000 f94017e1 8b000020 f9400000 aa0003e1 90000000 912ba000 97ffff23,"		printf(""%lld "", arr[i]);
"
c9 c3 90,a8c47bfd d65f03c0,}
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf04204000 e8d8feffff,90000000 911f2000 97ffffb2,"    printf(""enter three integer number\n"");
"
488d4df4 488d55f8 488d45fc 4889c6 bf1f204000 b800000000 e8dafeffff,910053e2 910063e1 910073e0 aa0203e3 aa0103e2 aa0003e1 90000000 911fa000 97ffffad,"    scanf(""%d%d%d"",&a,&b,&c);
"
8b55fc 8b45f8 39c2 7e2c,b9401fe1 b9401be0 6b00003f 540001ad,"    if(a>b)
"
8b55fc 8b45f4 39c2 7e11,b9401fe1 b94017e0 6b00003f 540000ad,"    if(a>c)
"
bf26204000 b800000000 e8a7feffff eb3b,90000000 911fc000 97ffffa6 14000010,"        printf(""a is greatest"");
"
bf34204000 b800000000 e896feffff eb2a,90000000 91200000 97ffffa2 1400000c,"        printf(""c is greatest"");
"
8b55f8 8b45f4 39c2 7e11,b9401be1 b94017e0 6b00003f 540000ad,"    if(b>c)
"
bf42204000 b800000000 e87bfeffff eb0f,90000000 91204000 97ffff9a 14000004,"        printf(""b is greatest"");
"
bf34204000 b800000000 e86afeffff,90000000 91200000 97ffff96,"        printf(""c is greatest"");
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f00,a8c27bfd d65f03c0,"}
"
55 4889e5,a9bf7bfd 910003fd,"int main() {
"
bf04204000 b800000000 e8f7feffff,90000000 911ae000 97ffffb2,"   printf(""Hello, World!"");
"
b800000000,52800000,"   return 0;
"
5d c3,a8c17bfd d65f03c0,"}
"
55 4889e5 4157 4156 4155 4154 4883ec60 48897d98 897594 895590 894d8c 4889e0 4889c6,a9b87bfd 910003fd f9000bf3 f9001fa0 b90037a1 b90033a2 b9002fa3 910003e0 aa0003e3,"{
"
8b4590 83c001 2b4594 8945c8,b94033a0 11000401 b94037a0 4b000020 b9006ba0,"    int n1=m+1-f;
"
8b458c 2b4590 8945c4,b9402fa1 b94033a0 4b000020 b90067a0,"    int n2=l-m;
"
8b45c8 4863d0 4883ea01 488955b8 4863d0 4989d6 41bf00000000 4863d0 4989d4 41bd00000000 4898 488d148500000000 b810000000 4883e801 4801d0 bf10000000 ba00000000 48f7f7 486bc010 4829c4 4889e0 4883c003 48c1e802 48c1e002 488945b0 8b45c4 4863d0 4883ea01 488955a8 4863d0 4989d2 41bb00000000 4863d0 4989d0 41b900000000 4898 488d148500000000 b810000000 4883e801 4801d0 bf10000000 ba00000000 48f7f7 486bc010 4829c4 4889e0 4883c003 48c1e802 48c1e002 488945a0,b9406ba0 93407c01 d1000421 f9002fa1 93407c01 aa0103f2 d2800013 d37bfe41 d37bea6b aa0b002b d37bea4a 93407c01 aa0103f0 d2800011 d37bfe01 d37bea29 aa090029 d37bea08 93407c00 d37ef400 91003c00 d344fc00 d37cec00 cb2063ff 910003e0 91000c00 d342fc00 d37ef400 f9002ba0 b94067a0 93407c01 d1000421 f90027a1 93407c01 aa0103ee d280000f d37bfdc1 d37be9e7 aa070027 d37be9c6 93407c01 aa0103ec d280000d d37bfd81 d37be9a5 aa050025 d37be984 93407c00 d37ef400 91003c00 d344fc00 d37cec00 cb2063ff 910003e0 91000c00 d342fc00 d37ef400 f90023a0,"    int t1[n1],t2[n2];
"
c745dc00000000 eb2c 8345dc01 8b45dc 3b45c8 7ccc,b9007fbf 1400000f b9407fa0 11000400 b9007fa0 b9407fa1 b9406ba0 6b00003f 54fffdeb,"    for (int i = 0; i<n1; i++) 
"
8b5594 8b45dc 01d0 4898 488d148500000000 488b4598 4801d0 8b08 488b45b0 8b55dc 4863d2 890c90,b94037a1 b9407fa0 0b000020 93407c00 d37ef400 f9401fa1 8b000020 b9400002 f9402ba0 b9807fa1 b8217802,"        t1[i]=a[f+i]; 
"
c745d800000000 eb2f 8345d801 8b45d8 3b45c4 7cc9,b9007bbf 14000010 b9407ba0 11000400 b9007ba0 b9407ba1 b94067a0 6b00003f 54fffdcb,"    for (int j = 0; j<n2; j++) 
"
8b4590 8d5001 8b45d8 01d0 4898 488d148500000000 488b4598 4801d0 8b08 488b45a0 8b55d8 4863d2 890c90,b94033a0 11000401 b9407ba0 0b000020 93407c00 d37ef400 f9401fa1 8b000020 b9400002 f94023a0 b9807ba1 b8217802,"        t2[j]=a[m+1+j]; 
"
c745d400000000 c745d000000000 8b4594 8945cc,b90077bf b90073bf b94037a0 b9006fa0,"    int i=0,j=0,k=f;
"
eb74 8b45d4 3b45c8 7d3a 8b45d0 3b45c4 0f8c78ffffff,14000023 b94077a1 b9406ba0 6b00003f 5400028a b94073a1 b94067a0 6b00003f 54fffaeb,"    while(i<n1 && j<n2)
"
488b45b0 8b55d4 4863d2 8b0c90 488b45a0 8b55d0 4863d2 8b0490 39c1 7e2a,f9402ba0 b98077a1 b8617801 f94023a0 b98073a2 b8627800 6b00003f 540001ad,"        if(t1[i]>t2[j])
"
8b45cc 4898 488d148500000000 488b4598 488d0c02 488b45a0 8b55d0 4863d2 8b0490 8901,b9806fa0 d37ef400 f9401fa1 8b000020 f94023a1 b98073a2 b8627821 b9000001,"            a[k]=t2[j];
"
8345d001 eb28,b94073a0 11000400 b90073a0 1400000c,"            j++;
"
8b45cc 4898 488d148500000000 488b4598 488d0c02 488b45b0 8b55d4 4863d2 8b0490 8901,b9806fa0 d37ef400 f9401fa1 8b000020 f9402ba1 b98077a2 b8627821 b9000001,"            a[k]=t1[i];
"
8345d401,b94077a0 11000400 b90077a0,"            i++;
"
8345cc01,b9406fa0 11000400 b9006fa0,"        k++;
"
eb2c 8b45d4 3b45c8 7ccc,1400000f b94077a1 b9406ba0 6b00003f 54fffdeb,"    while(i<n1)
"
8b45cc 4898 488d148500000000 488b4598 488d0c02 488b45b0 8b55d4 4863d2 8b0490 8901,b9806fa0 d37ef400 f9401fa1 8b000020 f9402ba1 b98077a2 b8627821 b9000001,"        a[k]=t1[i];
"
8345d401 8345cc01,b94077a0 11000400 b90077a0 b9406fa0 11000400 b9006fa0,"        i++;k++;
"
eb2c 8b45d0 3b45c4 7ccc 4889f4,1400000f b94073a1 b94067a0 6b00003f 54fffdeb 9100007f,"    while(j<n2)
"
8b45cc 4898 488d148500000000 488b4598 488d0c02 488b45a0 8b55d0 4863d2 8b0490 8901,b9806fa0 d37ef400 f9401fa1 8b000020 f94023a1 b98073a2 b8627821 b9000001,"        a[k]=t2[j];
"
8345d001 8345cc01,b94073a0 11000400 b90073a0 b9406fa0 11000400 b9006fa0,"        j++;k++;
"
90 488d65e0 415c 415d 415e 415f 5d c3,d503201f 910003bf f9400bf3 a8c87bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8 8975e4 8955e0,a9bd7bfd 910003fd f9000fe0 b90017e1 b90013e2,"{
"
8b45e4 3b45e0 7d54,b94017e1 b94013e0 6b00003f 540002ea,"    if(f<l)
"
8b55e4 8b45e0 01d0 89c2 c1ea1f 01d0 d1f8 8945fc,b94017e1 b94013e0 0b000020 531f7c01 0b000020 13017c00 b9002fe0,"        int m=(f+l)/2;
"
8b55fc 8b4de4 488b45e8 89ce 4889c7 e8beffffff,b9402fe2 b94017e1 f9400fe0 97ffffed,"        sort(a,f,m);
"
8b45fc 8d4801 8b55e0 488b45e8 89ce 4889c7 e8a7ffffff,b9402fe0 11000400 b94013e2 2a0003e1 f9400fe0 97ffffe7,"        sort(a,m+1,l);
"
8b4de0 8b55fc 8b75e4 488b45e8 4889c7 e8fbfcffff,b94013e3 b9402fe2 b94017e1 f9400fe0 97ffff12,"        merge(a,f,m,l);
"
90 c9 c3,d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 4157 4156 4155 4154 53 4883ec38,a9b77bfd 910003fd a90153f3 a9025bf5 a90363f7 a9046bf9 f9002bfb,"{
"
488d45b4 4889c6 bf04204000 b800000000 e8dbfbffff,9101d3a0 aa0003e1 90000000 9130c000 97fffeb9,"	int n;scanf(""%d"",&n);
"
e90b010000 8b45b4 8d50ff 8955b4 85c0 0f85e4feffff b800000000,1400004b b94077a0 51000401 b90077a1 7100001f 54fff641 52800000,"	while(n--)
"
4889e0 4889c3,910003e0 aa0003f3,"	{
"
488d45b0 4889c6 bf04204000 b800000000 e8bafbffff,9101c3a0 aa0003e1 90000000 9130c000 97fffeb1,"	    int num;scanf(""%d"",&num);
"
8b45b0 4863d0 4883ea01 488955c0 4863d0 4989d4 41bd00000000 4863d0 4989d6 41bf00000000 4898 488d148500000000 b810000000 4883e801 4801d0 b910000000 ba00000000 48f7f1 486bc010 4829c4 4889e0 4883c003 48c1e802 48c1e002 488945b8,b94073a0 93407c01 d1000421 f90043a1 93407c01 aa0103f8 d2800019 d37bff01 d37beb35 aa150035 d37beb14 93407c01 aa0103fa d280001b d37bff41 d37beb77 aa170037 d37beb56 93407c00 d37ef400 91003c00 d344fc00 d37cec00 cb2063ff 910003e0 91000c00 d342fc00 d37ef400 f9003fa0,"	    int a[num];
"
c745cc00000000 eb2a 8345cc01 8b45b0 3945cc 7cce,b9008fbf 1400000c b9408fa0 11000400 b9008fa0 b94073a0 b9408fa1 6b00003f 54fffe4b,"	    for(int i=0;i<num;i++)
"
8b45cc 4898 488d148500000000 488b45b8 4801d0 4889c6 bf04204000 b800000000 e828fbffff,b9808fa0 d37ef400 f9403fa1 8b000020 aa0003e1 90000000 9130c000 97fffe8a,"	        scanf(""%d"",&a[i]);
"
488d45ac 4889c6 bf04204000 b800000000 e806fbffff,9101b3a0 aa0003e1 90000000 9130c000 97fffe7e,"	    int r;scanf(""%d"",&r);
"
8b45b0 8d50ff 488b45b8 be00000000 4889c7 e87cfeffff,b94073a0 51000400 2a0003e2 52800001 f9403fa0 97ffff92,"	    sort(a,0,num-1);
"
8b45ac 8d50ff 488b45b8 4863d2 8b0490 89c6 bf07204000 b800000000 e8befaffff 4889dc,b9406fa0 51000401 f9403fa0 93407c21 b8617800 2a0003e1 90000000 9130e000 97fffe73 9100027f,"	    printf(""%d\n"",a[r-1]);
"
488d65d8 5b 415c 415d 415e 415f 5d c3 660f1f440000,910003bf a94153f3 a9425bf5 a94363f7 a9446bf9 f9402bfb a8c97bfd d65f03c0,"}
"
55 4889e5 4883ec20,a9bd7bfd 910003fd,"int main(){
"
c745ec01000000,52800020 b9001fe0,"    int z = 1;
"
bf90010000 e8f1feffff 488945e0,d2803200 97ffffa5 f9000be0,"    primes = malloc(sizeof(int) * limit);	//allocating 100 spaces in memory with the starting address to prime pointer
"
48c745f802000000 eb1e 488345f801 48837df863 76db,d2800040 f90017e0 1400000a f94017e0 91000400 f90017e0 f94017e0 f1018c1f 54fffea9,"    for (i = 2;i < limit; i++)			//initializing the 100 memory spaces
"
488b45f8 488d148500000000 488b45e0 4801d0 c70001000000,f94017e0 d37ef400 f9400be1 8b000020 52800021 b9000001,"        primes[i] = 1;
"
48c745f802000000 eb5a 488345f801 48837df863 769f,d2800040 f90017e0 1400001d f94017e0 91000400 f90017e0 f94017e0 f1018c1f 54fffc49,"    for (i = 2;i < limit; i++)			//Filling the array with prime numbers as per the method proposed by seive of eratosthenes
"
488b45f8 488d148500000000 488b45e0 4801d0 8b00 85c0 743c,f94017e0 d37ef400 f9400be1 8b000020 b9400000 7100001f 54000260,"        if (primes[i])
"
488b45f8 488945f0 eb23 488345f001 488b45f8 480faf45f0 4883f863 76ce,f94017e0 f90013e0 1400000b f94013e0 91000400 f90013e0 f94017e1 f94013e0 9b007c20 f1018c1f 54fffe49,"            for (j = i;i * j < limit; j++)
"
488b45f8 480faf45f0 488d148500000000 488b45e0 4801d0 c70000000000,f94017e1 f94013e0 9b007c20 d37ef400 f9400be1 8b000020 b900001f,"                primes[i * j] = 0;
"
bf08204000 e829feffff,90000000 91218000 97ffff7c,"    printf(""\nPrime numbers in range 1 to 100 are: \n"");
"
48c745f802000000 eb34 488345f801 48837df863 76c5,d2800040 f90017e0 1400000f f94017e0 91000400 f90017e0 f94017e0 f1018c1f 54fffe09,"    for (i = 2;i < limit; i++)			//Printing the prime numbers in the range from 1 to 100
"
488b45f8 488d148500000000 488b45e0 4801d0 8b00 85c0 7416,f94017e0 d37ef400 f9400be1 8b000020 b9400000 7100001f 540000a0,"        if (primes[i])
"
488b45f8 4889c6 bf2f204000 b800000000 e800feffff,f94017e1 90000000 91222000 97ffff72,"            printf(""%d\n"", i);
"
b800000000,52800000,"return 0;
"
c9 c3 662e0f1f840000000000 0f1f00,a8c37bfd d65f03c0,}
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
c745f401000000,52800020 b90017e0,"    int i, j, rows ,num=1;
"
bf04204000 b800000000 e8dcfeffff,90000000 911f2000 97ffffb4,"    printf(""Enter number of rows: "");
"
488d45f0 4889c6 bf1b204000 b800000000 e8d6feffff,910043e0 aa0003e1 90000000 911f8000 97ffffab,"    scanf(""%d"",&rows);
"
c745fc01000000 eb3b 8345fc01 8b45f0 3945fc 7ebd,52800020 b9001fe0 14000017 b9401fe0 11000400 b9001fe0 b94013e0 b9401fe1 6b00003f 54fffced,"    for(i=1; i<=rows; i++)
"
c745f801000000 eb1c 8345f801 8b45f8 3b45fc 7edc,52800020 b9001be0 1400000b b9401be0 11000400 b9001be0 b9401be1 b9401fe0 6b00003f 54fffe6d,"        for(j=1; j<=i; j++)
"
8b45f4 89c6 bf1e204000 b800000000 e8a0feffff,b94017e1 90000000 911fa000 97ffffa5,"            printf(""%3d "",num);
"
8345f401,b94017e0 11000400 b90017e0,"            num++;
"
bf0a000000 e876feffff,52800140 97ffff9d,"        printf(""\n"");
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f00,a8c27bfd d65f03c0,}
55 4889e5 4883ec10,a9be7bfd 910003fd,"{ 
"
c745f401000000,52800020 b90017e0,"   unsigned int i = 1; 
"
488d45f4 488945f8,910053e0 f9000fe0,"   char *c = (char*)&i; 
"
488b45f8 0fb600 84c0 740c,f9400fe0 39400000 7100001f 540000a0,"   if (*c)     
"
bf04204000 e8defeffff eb0a,90000000 911ba000 97ffffaa 14000004,"       printf(""Little endian\n""); 
"
bf12204000 e8d2feffff,90000000 911be000 97ffffa6,"       printf(""Big endian\n""); 
"
b800000000,52800000,"   return 0; 
"
c9 c3 662e0f1f840000000000 90,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main(){
"
bf08204000 e8d8feffff,90000000 9121a000 97ffffb2,"    printf(""Enter number of duty hours\n"");
"
488d45f8 4889c6 bf23204000 b800000000 e8e2feffff,910063e0 aa0003e1 90000000 91222000 97ffffb1,"    scanf(""%d"", &hour);
"
8b45f8 85c0 7e14 8b45f8 83f808 7f0c,b9401be0 7100001f 540000ed b9401be0 7100201f 5400008c,"    if (hour >= 1 && hour <= 8)
"
c745fc64000000 e99d000000,52800c80 b9001fe0 1400003c,"        amount = 100;
"
8b45f8 83f808 7e20 8b45f8 83f80c 7f18,b9401be0 7100201f 540001ad b9401be0 7100301f 5400014c,"    else if (hour >= 9 && hour <= 12)
"
8b45f8 8d50f8 89d0 c1e002 01d0 c1e002 83c064 8945fc eb75,b9401be0 51002001 2a0103e0 531e7400 0b010000 531e7400 11019000 b9001fe0 1400002d,"        amount = 100 + (hour - 8)*20;
"
8b45f8 83f80c 7e22 8b45f8 83f810 7f1a,b9401be0 7100301f 540001ad b9401be0 7100401f 5400014c,"    else if (hour >= 13 && hour <= 16)
"
8b45f8 8d50f4 89d0 c1e002 01d0 c1e003 05b4000000 8945fc eb4b,b9401be0 51003001 2a0103e0 531e7400 0b010000 531d7000 1102d000 b9001fe0 1400001e,"        amount = 180 + (hour - 12)*40;
"
8b45f8 83f810 7e1b 8b45f8 83f814 7f13,b9401be0 7100401f 540001ad b9401be0 7100501f 5400014c,"    else if (hour >= 17 && hour <= 20)
"
8b45f8 83e810 6bc03c 0554010000 8945fc eb28,b9401be0 51004001 2a0103e0 531c6c00 4b010000 531e7400 11055000 b9001fe0 1400000f,"        amount = 340 + (hour - 16)*60;
"
8b45f8 83f814 7e20 8b45f8 83f818 7f18,b9401be0 7100501f 5400018d b9401be0 7100601f 5400012c,"    else if (hour >= 21 && hour <= 24)
"
8b45f8 8d50ec 89d0 c1e002 01d0 c1e004 0544020000 8945fc,b9401be0 51005001 2a0103e0 531e7400 0b010000 531c6c00 11091000 b9001fe0,"        amount = 580 + (hour - 20)*80;
"
8b45fc 89c6 bf28204000 b800000000 e806feffff,b9401fe1 90000000 91224000 97ffff6d,"    printf(""Amount incurred by worker : %d"", amount);
"
b800000000,52800000,"    return 0;
"
c9 c3 662e0f1f840000000000 0f1f440000,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec30,a9bc7bfd 910003fd,"{
"
48c745f800000000 48c745f000000000,f9001fff f9001bff,"	long long int a, b, k, l, sum=0, i=0;
"
bf08204000 e8c8feffff,90000000 911f8000 97ffffb0,"	printf(""ENTER TWO NUMBERS:\n"");
"
488d55d0 488d45d8 4889c6 bf1b204000 b800000000 e8cefeffff,910043e1 910063e0 aa0103e2 aa0003e1 90000000 911fe000 97ffffad,"	scanf(""%lld %lld"", &a, &b);
"
488b45d8 488945e8,f9400fe0 f90017e0,"	k=a;
"
488b45d0 488945e0,f9400be0 f90013e0,"	l=b;
"
eb44 488b45d8 4885c0 7fb3,14000014 f9400fe0 f100001f 54fffd6c,"	while(a>0)
"
488b55d8 4889d0 48c1f83f 48c1e83f 4801c2 83e201 4829c2 4889d0 4883f801 7508,f9400fe0 f100001f 92400000 da80a400 f100041f 540000a1,"		if(a%2==1){
"
488b45d0 480145f8,f9400be0 f9401fe1 8b000020 f9001fe0,"			sum = sum + b;
"
488b45d8 48d1f8 488945d8,f9400fe0 9341fc00 f9000fe0,"			a = a>>1;
"
488b45d0 4801c0 488945d0,f9400be0 d37ff800 f9000be0,"			b = b<<1; 
"
488345f001,f9401be0 91000400 f9001be0,"			i++;
"
488b4df8 488b55e0 488b45e8 4889c6 bf28204000 b800000000 e841feffff,f9401fe3 f94013e2 f94017e1 90000000 91202000 97ffff90,"	printf(""PRODUCT OF %lld AND %lld IS = %lld \n"",k,l,sum);
"
b800000000,52800000,"	return 0;
"
c9 c3 662e0f1f840000000000,a8c47bfd d65f03c0,}
55 4889e5 4883ec20 48897de8 488975e0,a9bd7bfd 910003fd f9000fe0 f9000be1,"{
"
48837de000 750a,f9400be0 f100001f 54000061,"	if(y == 0)
"
b801000000 e9ce000000,d2800020 14000045,"		return 1;
"
48837de001 7509,f9400be0 f100041f 54000061,"	else if(y == 1)
"
488b45e8 e9be000000,f9400fe0 14000040,"		return x;
"
488b45e0 4889c2 48c1ea3f 4801d0 48d1f8 4889c2 488b45e8 4889d6 4889c7 e8acffffff 488945f8,f9400be0 d37ffc01 8b000020 9341fc00 aa0003e1 f9400fe0 97ffffec f90017e0,"		long long ans = modder(x, y/2);
"
488b45e0 83e001 4885c0 752c,f9400be0 92400000 f100001f 54000221,"		if(y % 2 == 0)
"
488b0d9f2e0000 488b45f8 4899 48f7f9 4889d6 488b0d8c2e0000 488b45f8 4899 48f7f9 4889d0 480fafc6 eb5f,b0000080 91010000 f9400001 f94017e0 9ac10c02 9b017c41 cb010002 b0000080 91010000 f9400001 f94017e0 9ac10c03 9b017c61 cb010000 9b007c40 14000024,"			return (ans % m) * (ans % m);
"
488b0d732e0000 488b45f8 4899 48f7f9 4889d6 488b0d602e0000 488b45f8 4899 48f7f9 4889d0 480fafc6 488b0d492e0000 4899 48f7f9 4889d6 488b0d3a2e0000 488b45e8 4899 48f7f9 4889d0 480fafc6 488b0d232e0000 4899 48f7f9 4889d0,b0000080 91010000 f9400001 f94017e0 9ac10c02 9b017c41 cb010002 b0000080 91010000 f9400001 f94017e0 9ac10c03 9b017c61 cb010000 9b007c40 b0000081 91010021 f9400021 9ac10c02 9b017c41 cb010002 b0000080 91010000 f9400001 f9400fe0 9ac10c03 9b017c61 cb010000 9b007c40 b0000081 91010021 f9400021 9ac10c02 9b017c41 cb010000,"			return (((ans % m) * (ans % m)) % m * (x % m)) % m; 
"
c9 c3,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec20,a9bd7bfd 910003fd,"{
"
bf08204000 b800000000 e8f2fdffff,90000000 9121c000 97ffff67,"	printf(""Enter three numbers, x to the power of y modulo m: "");
"
488d55e8 488d45f0 b940404000 4889c6 bf3c204000 b800000000 e8e3fdffff,910063e2 910083e1 b0000080 91010003 90000000 9122a000 97ffff5c,"	scanf(""%lld%lld%lld"", &x, &y, &m);
"
488b55e8 488b45f0 4889d6 4889c7 e8c6feffff 488945f8,f94013e0 f9400fe1 97ffffa3 f90017e0,"	result = modder(x, y);
"
488b45f8 4889c6 bf49204000 b800000000 e8a6fdffff,f94017e1 90000000 9122e000 97ffff58,"	printf(""The resultant is: %lld\n"", result);	
"
b800000000,52800000,"	return 0;
"
c9 c3 662e0f1f840000000000 0f1f440000,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf04204000 b800000000 e8e3feffff,90000000 911ca000 97ffffb6,"    printf(""Enter a character: "");
"
488d45ff 4889c6 bf18204000 b800000000 e8ddfeffff,91007fe0 aa0003e1 90000000 911d0000 97ffffad,"    scanf(""%c"", &c);
"
0fb645ff 0fbed0 0fb645ff 0fbec0 89c6 bf1b204000 b800000000 e8aefeffff,39407fe0 2a0003e1 39407fe0 2a0003e2 90000000 911d2000 97ffffaa,"    printf(""ASCII value of %c = %d"", c, c);
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f8000000000,a8c27bfd d65f03c0,"}
"
55 4889e5 4881ecb0010000,a9a47bfd 910003fd,"{
"
bf08204000 e8d5feffff,90000000 91268000 97ffffa2,"    printf(""\n\n\t\tStudytonight - Best place to learn\n\n\n"");
"
c745f400000000,b901b7ff,"    int counter = 0;
"
bf38204000 e8c4feffff,90000000 91274000 97ffff9e,"    printf(""\nEnter the number of rows and columns of the matrix \n\n"");
"
488d55f0 488d45ec 4889c6 bf6e204000 b800000000 e8cafeffff,9106c3e1 9106b3e0 aa0103e2 aa0003e1 90000000 91282000 97ffff9b,"    scanf(""%d%d"",&m,&n);
"
8b55ec 8b45f0 0fafc2 89c6 bf78204000 b800000000 e8a0feffff,b941afe1 b941b3e0 1b007c20 2a0003e1 90000000 91284000 97ffff98,"    printf(""\nEnter the %d elements of the matrix \n\n"", m*n);
"
c745fc00000000 e980000000 8345fc01 8b45ec 3945fc 0f8c74ffffff,b901bfff 1400002a b941bfe0 11000400 b901bfe0 b941afe0 b941bfe1 6b00003f 54fffa8b,"    for(c = 0; c < m; c++)   // to iterate the rows
"
c745f800000000 eb6b 8345f801 8b45f0 3945f8 7c8d,b901bbff 14000021 b941bbe0 11000400 b901bbe0 b941b3e0 b941bbe1 6b00003f 54fffbab,"        for(d = 0; d < n; d++)   // to iterate the columns
"
488d8d50feffff 8b45f8 4863f0 8b45fc 4863d0 4889d0 48c1e002 4801d0 4801c0 4801f0 48c1e002 4801c8 4889c6 bfa0204000 b800000000 e85ffeffff,910063e2 b981bbe3 b981bfe1 aa0103e0 d37ef400 8b010000 d37ff800 8b000060 d37ef400 8b000040 aa0003e1 90000000 9128e000 97ffff82,"            scanf(""%d"", &matrix[c][d]);
"
8b45f8 4863c8 8b45fc 4863d0 4889d0 48c1e002 4801d0 4801c0 4801c8 8b848550feffff 85c0 7504,b981bbe2 b981bfe1 aa0103e0 d37ef400 8b010000 d37ff800 8b020000 d37ef400 910063e1 b8606820 7100001f 54000081,"            if(matrix[c][d] == 0)
"
8345f401,b941b7e0 11000400 b901b7e0,"            counter++;  // same as counter=counter +1
"
bfa3204000 e8eefdffff,90000000 91290000 97ffff5e,"    printf(""\n\nThe entered matrix is: \n\n"");
"
c745fc00000000 eb57 8345fc01 8b45ec 3945fc 7ca1,b901bfff 1400001d b941bfe0 11000400 b901bfe0 b941afe0 b941bfe1 6b00003f 54fffc2b,"    for(c = 0; c < m; c++)   // to iterate the rows
"
c745f800000000 eb38 8345f801 8b45f0 3945f8 7cc0,b901bbff 14000012 b941bbe0 11000400 b901bbe0 b941b3e0 b941bbe1 6b00003f 54fffd8b,"        for(d = 0; d < n; d++)   // to iterate the columns
"
8b45f8 4863c8 8b45fc 4863d0 4889d0 48c1e002 4801d0 4801c0 4801c8 8b848550feffff 89c6 bfbe204000 b800000000 e8b8fdffff,b981bbe2 b981bfe1 aa0103e0 d37ef400 8b010000 d37ff800 8b020000 d37ef400 910063e1 b8606820 2a0003e1 90000000 91298000 97ffff54,"            printf(""%d\t"", matrix[c][d]);
"
bf0a000000 e882fdffff,52800140 97ffff4f,"    printf(""\n""); // to take the control to the next row
"
8b55ec 8b45f0 0fafc2 89c2 c1ea1f 01d0 d1f8 3945f4 7e0c,b941afe1 b941b3e0 1b007c20 531f7c01 0b000020 13017c00 2a0003e1 b941b7e0 6b01001f 540000ad,"    if(counter > (m*n)/2)
"
bfc8204000 e865fdffff eb0a,90000000 9129a000 97ffff2f 14000004,"        printf(""\n\nThe entered matrix is a sparse matrix\n\n"");
"
bff8204000 e859fdffff,90000000 912a6000 97ffff2b,"        printf(""\n\nThe entered matrix is not a sparse matrix\n\n"");
"
bf25214000 e84ffdffff,90000000 912b2000 97ffff28,"    printf(""\n\n\t\t\tCoding is Fun !\n\n\n"");
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f840000000000,a8dc7bfd d65f03c0,"}
"
55 4889e5 4881ec90000000,a9b67bfd 910003fd,"int main() {
"
bf04204000 b800000000 e8e0feffff,90000000 91298000 97ffffb6,"  printf(""Enter no of elements:"");
"
488d857cffffff 4889c6 bf1a204000 b800000000 e8d7feffff,910073e0 aa0003e1 90000000 9129e000 97ffffad,"  scanf(""%d"", & n);
"
bf1d204000 b800000000 e8b8feffff,90000000 912a0000 97ffffae,"  printf(""Enter array elements:"");
"
c745fc00000000 eb27 8345fc01 8b857cffffff 3945fc 7cce,b9009fff 1400000c b9409fe0 11000400 b9009fe0 b9401fe0 b9409fe1 6b00003f 54fffe4b,"  for (i = 0; i < n; i++)
"
488d4580 8b55fc 4863d2 48c1e202 4801d0 4889c6 bf1a204000 b800000000 e89cfeffff,910083e1 b9809fe0 d37ef400 8b000020 aa0003e1 90000000 9129e000 97ffffa0,"    scanf(""%d"", & a[i]);
"
8b857cffffff 8d50ff 488d4580 be00000000 4889c7 e848000000,b9401fe0 51000401 910083e0 2a0103e2 52800001 94000018,"  mergesort(a, 0, n - 1);
"
bf33204000 b800000000 e854feffff,90000000 912a6000 97ffff94,"  printf(""\nSorted array is :"");
"
c745fc00000000 eb1e 8345fc01 8b857cffffff 3945fc 7cd7,b9009fff 1400000c b9409fe0 11000400 b9009fe0 b9401fe0 b9409fe1 6b00003f 54fffe4b,"  for (i = 0; i < n; i++)
"
8b45fc 4898 8b448580 89c6 bf46204000 b800000000 e831feffff,b9809fe0 d37ef400 910083e1 b8606820 2a0003e1 90000000 912ac000 97ffff8a,"    printf(""%d "", a[i]);
"
b800000000,52800000,"  return 0;
"
c9 c3,a8ca7bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8 8975e4 8955e0,a9bd7bfd 910003fd f9000fe0 b90017e1 b90013e2,"void mergesort(int a[], int i, int j) {
"
8b45e4 3b45e0 7d5d,b94017e1 b94013e0 6b00003f 5400034a,"  if (i < j) {
"
8b55e4 8b45e0 01d0 89c2 c1ea1f 01d0 d1f8 8945fc,b94017e1 b94013e0 0b000020 531f7c01 0b000020 13017c00 b9002fe0,"    mid = (i + j) / 2;
"
8b55fc 8b4de4 488b45e8 89ce 4889c7 e8beffffff,b9402fe2 b94017e1 f9400fe0 97ffffed,"    mergesort(a, i, mid); //left recursion
"
8b45fc 8d4801 8b55e0 488b45e8 89ce 4889c7 e8a7ffffff,b9402fe0 11000400 b94013e2 2a0003e1 f9400fe0 97ffffe7,"    mergesort(a, mid + 1, j); //right recursion
"
8b45fc 8d4801 8b7de0 8b55fc 8b75e4 488b45e8 4189f8 4889c7 e803000000,b9402fe0 11000400 b94013e4 2a0003e3 b9402fe2 b94017e1 f9400fe0 94000004,"    merge(a, i, mid, mid + 1, j); //merging of two sorted sub-arrays
"
90 c9 c3,d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 4881ec88000000 4889bd18ffffff 89b514ffffff 899510ffffff 898d0cffffff 44898508ffffff,d10403ff f9000fe0 b90017e1 b90013e2 b9000fe3 b9000be4,"void merge(int a[], int i1, int j1, int i2, int j2) {
"
8b8514ffffff 8945fc,b94017e0 b900ffe0,"  i = i1; //beginning of the first list
"
8b850cffffff 8945f8,b9400fe0 b900fbe0,"  j = i2; //beginning of the second list
"
c745f400000000,b900f7ff,"  k = 0;
"
e99c000000 8b45fc 3b8510ffffff 7f43 8b45f8 3b8508ffffff 0f8e4affffff,1400002c b940ffe1 b94013e0 6b00003f 540002ac b940fbe1 b9400be0 6b00003f 54fff9cd,"  while (i <= j1 && j <= j2) //while elements in both lists
"
8b45fc 4898 488d148500000000 488b8518ffffff 4801d0 8b10 8b45f8 4898 488d0c8500000000 488b8518ffffff 4801c8 8b00 39c2 7d34,b980ffe0 d37ef400 f9400fe1 8b000020 b9400001 b980fbe0 d37ef400 f9400fe2 8b000040 b9400000 6b00003f 5400022a,"    if (a[i] < a[j])
"
8b45fc 8d5001 8955fc 4898 488d148500000000 488b8518ffffff 488d0c02 8b45f4 8d5001 8955f4 8b11 4898 89948520ffffff eb32,b940ffe0 11000401 b900ffe1 93407c00 d37ef400 f9400fe1 8b000021 b940f7e0 11000402 b900f7e2 b9400022 93407c00 d37ef400 9100a3e1 b8206822 14000010,"      temp[k++] = a[i++];
"
8b45f8 8d5001 8955f8 4898 488d148500000000 488b8518ffffff 488d0c02 8b45f4 8d5001 8955f4 8b11 4898 89948520ffffff,b940fbe0 11000401 b900fbe1 93407c00 d37ef400 f9400fe1 8b000021 b940f7e0 11000402 b900f7e2 b9400022 93407c00 d37ef400 9100a3e1 b8206822,"      temp[k++] = a[j++];
"
eb32 8b45fc 3b8510ffffff 7ec3,14000010 b940ffe1 b94013e0 6b00003f 54fffdcd,"  while (i <= j1) //copy remaining elements of the first list
"
8b45fc 8d5001 8955fc 4898 488d148500000000 488b8518ffffff 488d0c02 8b45f4 8d5001 8955f4 8b11 4898 89948520ffffff,b940ffe0 11000401 b900ffe1 93407c00 d37ef400 f9400fe1 8b000021 b940f7e0 11000402 b900f7e2 b9400022 93407c00 d37ef400 9100a3e1 b8206822,"    temp[k++] = a[i++];
"
eb32 8b45f8 3b8508ffffff 7ec3,14000010 b940fbe1 b9400be0 6b00003f 54fffdcd,"  while (j <= j2) //copy remaining elements of the second list
"
8b45f8 8d5001 8955f8 4898 488d148500000000 488b8518ffffff 488d0c02 8b45f4 8d5001 8955f4 8b11 4898 89948520ffffff,b940fbe0 11000401 b900fbe1 93407c00 d37ef400 f9400fe1 8b000021 b940f7e0 11000402 b900f7e2 b9400022 93407c00 d37ef400 9100a3e1 b8206822,"    temp[k++] = a[j++];
"
8b8514ffffff 8945fc c745f800000000 eb2d 8345fc01 8345f801 8b45fc 3b8508ffffff 7ec8,b94017e0 b900ffe0 b900fbff 14000010 b940ffe0 11000400 b900ffe0 b940fbe0 11000400 b900fbe0 b940ffe1 b9400be0 6b00003f 54fffdcd,"  for (i = i1, j = 0; i <= j2; i++, j++)
"
8b45fc 4898 488d148500000000 488b8518ffffff 4801c2 8b45f8 4898 8b848520ffffff 8902,b980ffe0 d37ef400 f9400fe1 8b000020 b980fbe1 d37ef421 9100a3e2 b8616841 b9000001,"    a[i] = temp[j];
"
90 90 c9 c3 660f1f440000,d503201f d503201f 910403ff d65f03c0,"}
"
55 4889e5 4883ec20 897dec 8975e8 488955e0,a9bd7bfd 910003fd b9001fe0 b9001be1 f9000be2,"{
"
c745f800000000 c745f400000000,b9002bff b90027ff,"	int k = 0, l = 0;
"
e952010000 8b45f8 3b45ec 7d0c 8b45f4 3b45e8 0f8c9afeffff,14000079 b9402be1 b9401fe0 6b00003f 540000aa b94027e1 b9401be0 6b00003f 54fff02b,"	while (k < r && l < c)
"
8b45f4 8945fc eb3a 8345fc01 8b45fc 3b45e8 7cbe,b94027e0 b9002fe0 14000012 b9402fe0 11000400 b9002fe0 b9402fe1 b9401be0 6b00003f 54fffd8b,"		for (i = l; i < c ; ++i) {
"
8b45f8 4863d0 4889d0 4801c0 4801d0 48c1e002 4889c2 488b45e0 4801c2 8b45fc 4898 8b0482 89c6 bf04204000 b800000000 e8a7feffff,b9802be1 aa0103e0 d37ff800 8b010000 d37ef400 aa0003e1 f9400be0 8b010000 b9802fe1 b8617800 2a0003e1 90000000 91242000 97ffff9e,"			printf(""%d\t"", arr[k][i]);
"
8345f801,b9402be0 11000400 b9002be0,"		k++;
"
8b45f8 8945fc eb3d 8345fc01 8b45fc 3b45ec 7cbb,b9402be0 b9002fe0 14000014 b9402fe0 11000400 b9002fe0 b9402fe1 b9401fe0 6b00003f 54fffd4b,"		for (i = k; i < r; ++i) {
"
8b45fc 4863d0 4889d0 4801c0 4801d0 48c1e002 4889c2 488b45e0 4801c2 8b45e8 83e801 4898 8b0482 89c6 bf04204000 b800000000 e856feffff,b9802fe1 aa0103e0 d37ff800 8b010000 d37ef400 aa0003e1 f9400be0 8b010000 b9401be1 51000421 93407c21 b8617800 2a0003e1 90000000 91242000 97ffff81,"			printf(""%d\t"", arr[i][c - 1]);
"
836de801,b9401be0 51000400 b9001be0,"		c--;
"
8b45f8 3b45ec 7d52,b9402be1 b9401fe0 6b00003f 540003aa,"		if (k < r) {
"
8b45e8 83e801 8945fc eb3b 836dfc01 8b45fc 3b45f4 7dbd,b9401be0 51000400 b9002fe0 14000012 b9402fe0 51000400 b9002fe0 b9402fe1 b94027e0 6b00003f 54fffd8a,"			for (i = c - 1; i >= l; --i) {
"
8b45ec 4863d0 4889d0 4801c0 4801d0 48c1e002 488d50f4 488b45e0 4801c2 8b45fc 4898 8b0482 89c6 bf04204000 b800000000 e8fcfdffff,b9801fe1 aa0103e0 d37ff800 8b010000 d37ef400 d1003000 f9400be1 8b000020 b9802fe1 b8617800 2a0003e1 90000000 91242000 97ffff61,"				printf(""%d\t"", arr[r - 1][i]);
"
836dec01,b9401fe0 51000400 b9001fe0,"		r--;
"
8b45f4 3b45e8 7d51,b94027e1 b9401be0 6b00003f 540003aa,"	    if (l < c) {
"
8b45ec 83e801 8945fc eb3a 836dfc01 8b45fc 3b45f8 7dbe,b9401fe0 51000400 b9002fe0 14000012 b9402fe0 51000400 b9002fe0 b9402fe1 b9402be0 6b00003f 54fffd8a,"	    	for (i = r - 1 ; i >= k; --i) {
"
8b45fc 4863d0 4889d0 4801c0 4801d0 48c1e002 4889c2 488b45e0 4801c2 8b45f4 4898 8b0482 89c6 bf04204000 b800000000 e8a3fdffff,b9802fe1 aa0103e0 d37ff800 8b010000 d37ef400 aa0003e1 f9400be0 8b010000 b98027e1 b8617800 2a0003e1 90000000 91242000 97ffff41,"	    		printf(""%d\t"", arr[i][l]);
"
8345f401,b94027e0 11000400 b90027e0,"			l++;
"
90 c9 c3,d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec30,a9bc7bfd 910003fd,"{
"
c745d001000000 c745d402000000 c745d803000000 c745dc0a000000 c745e014000000 c745e41e000000 c745e86e000000 c745ecdc000000 c745f04a010000 c745f44c040000 c745f898080000 c745fce40c0000,90000000 91244001 910043e0 ad400420 ad000400 3dc00820 3d800800,"	  int a[Row][Col] = {{1, 2, 3}, {10, 20, 30}, {110, 220, 330}, {1100, 2200, 3300}};
"
488d45d0 4889c2 be03000000 bf04000000 e800feffff,910043e0 aa0003e2 52800061 52800080 97ffff68,"    spiral_matrix (Row, Col, a);
"
b800000000,52800000,"    return (0);
"
c9 c3 0f1f00,a8c47bfd d65f03c0,"}
"
55 4889e5 4883ec40 48897dd8 8975d4 8955d0 894dcc,a9bb7bfd 910003fd f9000bf3 aa0803f3 b9002fe0 b9002be1 b90027e2,"struct lcg_rand new_generator(unsigned int modulus, unsigned int multiplier, unsigned int increment) {
"
8b45d4 8945e0,b9402fe0 b9003be0,"  random.modulus = modulus;
"
8b45d0 8945e4,b9402be0 b9003fe0,"  random.multiplier = multiplier;
"
8b45cc 8945e8,b94027e0 b90043e0,"  random.increment = increment;
"
bf00000000 e8d9feffff 8945ec,d2800000 97ffff98 b90047e0,"  random.seed = time(NULL);
"
8b45ec 8945f0,b94047e0 b9004be0,"  random.last = random.seed;
"
488b4dd8 488b45e0 488b55e8 488901 48895108 8b45f0 894110,aa1303e3 9100e3e2 a9400440 a9000460 b9401040 b9001060,"  return random;
"
488b45d8 c9 c3,f9400bf3 a8c57bfd d65f03c0,"}
"
55 4889e5 48897de8,d10083ff f90007e0,"int random(struct lcg_rand * random) {
"
488b45e8 8b5004 488b45e8 8b4010 0fafd0 488b45e8 8b4008 01c2 488b45e8 8b08 89d0 ba00000000 f7f1 89d0 8945fc,f94007e0 b9400401 f94007e0 b9401000 1b007c21 f94007e0 b9400800 0b000020 f94007e1 b9400021 1ac10802 1b017c41 4b010000 b9001fe0,"  int number = ((random->multiplier * random->last) + random->increment) % random->modulus;
"
8b55fc 488b45e8 895010,b9401fe1 f94007e0 b9001001,"  random->last = number;
"
8b45fc,b9401fe0,"  return number;
"
5d c3,910083ff d65f03c0,"}
"
55 4889e5 4883ec20,a9bd7bfd 910003fd,"int main() {
"
488d45e0 b939300000 ba6d4ec641 be00000080 4889c7 e83fffffff,910063e0 aa0003e8 52860722 5289cda1 72a838c1 52b00000 97ffffc7,"  struct lcg_rand rng = new_generator(pow(2, 31), 1103515245, 12345);
"
c745fc00000000 eb21 8345fc01 837dfc09 7ed9,b9002fff 1400000a b9402fe0 11000400 b9002fe0 b9402fe0 7100241f 54fffead,"  for (int i = 0; i < 10; i++) {
"
488d45e0 4889c7 e883ffffff 89c6 bf04204000 b800000000 e813feffff,910063e0 97ffffde 2a0003e1 90000000 91210000 97ffff71,"    printf(""%d\n"", random( & rng));
"
b800000000,52800000,"  return 0;
"
c9 c3 6690,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{ int a,b,c;
"
bf04204000 b800000000 e8e3feffff,90000000 911cc000 97ffffb6,"printf(""Enter two Numbers : "");
"
488d55f4 488d45f8 4889c6 bf19204000 b800000000 e8d9feffff,910053e1 910063e0 aa0103e2 aa0003e1 90000000 911d2000 97ffffab,"scanf(""%d %d"",&a,&b);
"
8b55f8 8b45f4 29c2 8955fc,b9401be1 b94017e0 4b000020 b9001fe0,"c=a-b;
"
8b45fc 89c6 bf1f204000 b800000000 e8aafeffff,b9401fe1 90000000 911d4000 97ffffa7,"printf(""Subtraction is %d"",c);
"
90 c9 c3 0f1f8000000000,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
c745fc00000000,b9001fff,"   int n, reverse = 0;
"
bf08204000 e8d1feffff,90000000 911fa000 97ffffb1,"   printf(""Enter a number to reverse\n"");
"
488d45f8 4889c6 bf22204000 b800000000 e8dbfeffff,910063e0 aa0003e1 90000000 91202000 97ffffb0,"   scanf(""%d"", &n);
"
eb5a 8b45f8 85c0 759f,14000020 b9401be0 7100001f 54fffbe1,"   while (n != 0)
"
8b55fc 89d0 c1e002 01d0 01c0 8945fc,b9401fe1 2a0103e0 531e7400 0b010000 531f7800 b9001fe0,"      reverse = reverse * 10;
"
8b4df8 4863c1 4869c067666666 48c1e820 89c2 c1fa02 89c8 c1f81f 29c2 89d0 c1e002 01d0 01c0 29c1 89ca 0155fc,b9401be2 528ccce0 72acccc0 9b207c40 d360fc00 13027c01 131f7c40 4b000021 2a0103e0 531e7400 0b010000 531f7800 4b000041 b9401fe0 0b010000 b9001fe0,"      reverse = reverse + n%10;
"
8b45f8 4863d0 4869d267666666 48c1ea20 89d1 c1f902 99 89c8 29d0 8945f8,b9401be0 528ccce1 72acccc1 9b217c01 d360fc21 13027c21 131f7c00 4b000020 b9001be0,"      n       = n/10;
"
8b45fc 89c6 bf28204000 b800000000 e854feffff,b9401fe1 90000000 91204000 97ffff8d,"   printf(""Reverse of entered number is = %d\n"", reverse);
"
b800000000,52800000,"   return 0;
"
c9 c3 662e0f1f840000000000 0f1f00,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{ int a,b;
"
bf04204000 b800000000 e8e3feffff,90000000 911d8000 97ffffb6,"printf(""Enter two Numbers : "");
"
488d55f8 488d45fc 4889c6 bf19204000 b800000000 e8d9feffff,910063e1 910073e0 aa0103e2 aa0003e1 90000000 911de000 97ffffab,"scanf(""%d %d"",&a,&b);
"
8b55fc 8b45f8 01d0 8945fc,b9401fe1 b9401be0 0b000020 b9001fe0,"a=a+b;
"
8b55fc 8b45f8 29c2 8955f8,b9401fe1 b9401be0 4b000020 b9001be0,"b=a-b;
"
8b55fc 8b45f8 29c2 8955fc,b9401fe1 b9401be0 4b000020 b9001fe0,"a=a-b;
"
8b55f8 8b45fc 89c6 bf1f204000 b800000000 e891feffff,b9401fe0 b9401be1 2a0103e2 2a0003e1 90000000 911e0000 97ffff9c,"printf(""Swap is %d %d"",a,b);
"
90 c9 c3 662e0f1f840000000000 0f1f4000,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 4881ecd0010000,a9a37bfd 910003fd,"{
"
bf08204000 e8d5feffff,90000000 91270000 97ffffa2,"    printf(""Enter the Number of Strings:\n"");
"
488d853cfeffff 4889c6 bf25204000 b800000000 e8dcfeffff,910073e0 aa0003e1 90000000 91278000 97ffffa5,"    scanf(""%d"", &n);
"
bf28204000 e8b2feffff,90000000 9127a000 97ffff9a,"    printf(""Enter the Strings:\n"");
"
c745fc00000000 eb34 8345fc01 8b853cfeffff 3945fc 7cc1,b901cfff 1400000f b941cfe0 11000400 b901cfe0 b9401fe0 b941cfe1 6b00003f 54fffdeb,"    for (i = 0; i < n; i++)
"
488d8d60feffff 8b45fc 4863d0 4889d0 48c1e002 4801d0 48c1e002 4801c8 4889c6 bf3b204000 b800000000 e899feffff,9100e3e2 b981cfe1 aa0103e0 d37ef400 8b010000 d37ef400 8b000040 aa0003e1 90000000 91280000 97ffff95,"        scanf(""%s"", str[i]);
"
c745fc00000000 e92a010000 8345fc01 8b853cfeffff 83e801 3945fc 0f8cc4feffff,b901cfff 1400004c b941cfe0 11000400 b901cfe0 b9401fe0 51000400 b941cfe1 6b00003f 54fff62b,"    for (i = 0; i < n - 1; i++)
"
c745f800000000 e905010000 8345f801 8b853cfeffff 83e801 2b45fc 3945f8 0f8ce6feffff,b901cbff 14000040 b941cbe0 11000400 b901cbe0 b9401fe0 51000401 b941cfe0 4b000020 b941cbe1 6b00003f 54fff76b,"        for (j = 0; j < n - 1 - i; j++)
"
8b45f8 83c001 488d8d60feffff 4863d0 4889d0 48c1e002 4801d0 48c1e002 4801c1 488db560feffff 8b45f8 4863d0 4889d0 48c1e002 4801d0 48c1e002 4801f0 4889ce 4889c7 e818feffff 85c0 0f8eaf000000,9100e3e2 b981cbe1 aa0103e0 d37ef400 8b010000 d37ef400 8b000043 b941cbe0 11000400 9100e3e2 93407c01 aa0103e0 d37ef400 8b010000 d37ef400 8b000040 aa0003e1 aa0303e0 97ffff73 7100001f 5400050d,"            if (strcmp(str[j], str[j + 1]) > 0)
"
488d8d60feffff 8b45f8 4863d0 4889d0 48c1e002 4801d0 48c1e002 488d1401 488d8540feffff 4889d6 4889c7 e8bffdffff,9100e3e2 b981cbe1 aa0103e0 d37ef400 8b010000 d37ef400 8b000041 910083e0 97ffff70,"                strcpy(temp, str[j]);
"
8b45f8 83c001 488d8d60feffff 4863d0 4889d0 48c1e002 4801d0 48c1e002 4801c1 488db560feffff 8b45f8 4863d0 4889d0 48c1e002 4801d0 48c1e002 4801f0 4889ce 4889c7 e875fdffff,9100e3e2 b981cbe1 aa0103e0 d37ef400 8b010000 d37ef400 8b000043 b941cbe0 11000400 9100e3e2 93407c01 aa0103e0 d37ef400 8b010000 d37ef400 8b000040 aa0003e1 aa0303e0 97ffff5d,"                strcpy(str[j], str[j + 1]);
"
8b45f8 83c001 488d8d60feffff 4863d0 4889d0 48c1e002 4801d0 48c1e002 488d1401 488d8540feffff 4889c6 4889d7 e841fdffff,b941cbe0 11000400 9100e3e2 93407c01 aa0103e0 d37ef400 8b010000 d37ef400 8b000040 910083e1 97ffff52,"                strcpy(str[j + 1], temp);
"
bf40204000 e818fdffff,90000000 91282000 97ffff31,"    printf(""Strings in the Lexicographical Order is:\n"");
"
c745fc00000000 eb2a 8345fc01 8b853cfeffff 3945fc 7ccb,b901cfff 1400000c b941cfe0 11000400 b901cfe0 b9401fe0 b941cfe1 6b00003f 54fffe4b,"    for (i = 0; i < n; i++)
"
488d8d60feffff 8b45fc 4863d0 4889d0 48c1e002 4801d0 48c1e002 4801c8 4889c7 e8e9fcffff,9100e3e2 b981cfe1 aa0103e0 d37ef400 8b010000 d37ef400 8b000040 97ffff27,"        puts(str[i]);
"
90 90 c9 c3 660f1f440000,d503201f d503201f a8dd7bfd d65f03c0,"}
"
55 4889e5 4883ec30 488d4510 488945f0 488d45d0 488d55d0 b926114000 66c70041bb 894802 66c7400649ba 48895008 c7401049ffe390,a9bb7bfd 910003fd 910143e0 f90023e0 910063e0 910063e5 90000001 911aa022 aa0003e1 aa0203e4 a9400c82 a9000c22 f9400882 f9000822 90000001 9119e021 f9000c01 f9001005 9100a001 9400000e,"int main(){
"
488d45d0,910063e0,"	__fn__; 
"
488945f8,f90027e0,"int (*max)(int, int) = 
"
488b45f8 be17000000 bf01000000 ffd0 89c6 bf04204000 b800000000 e890feffff b800000000,f94027e2 528002e1 52800020 d63f0040 2a0003e1 90000000 91202000 97ffff83 52800000,"	printf(""%d"",max(1,23));
"
c9 c3 660f1f840000000000,a8c57bfd d65f03c0,"}
"
55 4889e5 897dec,d10083ff b9000fe0,"int sumOfDigits(int num) {
"
c745fc00000000,b9001fff,"	int sum = 0;
"
eb4b 837dec00 7faf,1400001a b9400fe0 7100001f 54fffcac,"        while (num > 0) {
"
8b4dec 4863c1 4869c067666666 48c1e820 89c2 c1fa02 89c8 c1f81f 29c2 89d0 c1e002 01d0 01c0 29c1 89ca 0155fc,b9400fe2 528ccce0 72acccc0 9b207c40 d360fc00 13027c01 131f7c40 4b000021 2a0103e0 531e7400 0b010000 531f7800 4b000041 b9401fe0 0b010000 b9001fe0,"                sum = sum + (num % 10);
"
8b45ec 4863d0 4869d267666666 48c1ea20 89d1 c1f902 99 89c8 29d0 8945ec,b9400fe0 528ccce1 72acccc1 9b217c01 d360fc21 13027c21 131f7c00 4b000020 b9000fe0,"                num = num / 10;
"
8b45fc,b9401fe0,"        return sum;
"
5d c3,910083ff d65f03c0,"  }
"
55 4889e5 897dec,d10083ff b9000fe0,"  int reverse(int num) {
"
c745fc00000000,b9001fff,"        int rev = 0;
"
eb5c 837dec00 7f9e,1400001f b9400fe0 7100001f 54fffc0c,"        while (num > 0) {
"
8b55fc 89d0 c1e002 01d0 01c0 89c6 8b4dec 4863c1 4869c067666666 48c1e820 89c2 c1fa02 89c8 c1f81f 29c2 89d0 c1e002 01d0 01c0 29c1 89ca 8d0416 8945fc,b9401fe1 2a0103e0 531e7400 0b010000 531f7800 2a0003e3 b9400fe2 528ccce0 72acccc0 9b207c40 d360fc00 13027c01 131f7c40 4b000021 2a0103e0 531e7400 0b010000 531f7800 4b000041 0b010060 b9001fe0,"                rev = (rev * 10) + (num % 10);
"
8b45ec 4863d0 4869d267666666 48c1ea20 89d1 c1f902 99 89c8 29d0 8945ec,b9400fe0 528ccce1 72acccc1 9b217c01 d360fc21 13027c21 131f7c00 4b000020 b9000fe0,"                num = num / 10;
"
8b45fc,b9401fe0,"        return rev;
"
5d c3,910083ff d65f03c0,"  }
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"int main () {
"
bf04204000 b800000000 e806feffff,90000000 9123a000 97ffff6b,"        printf(""Enter the value for a number:"");
"
488d45f4 4889c6 bf22204000 b800000000 e800feffff,910053e0 aa0003e1 90000000 91242000 97ffff62,"        scanf(""%d"", &num);
"
8b45f4 89c7 e8ecfeffff 8945fc,b94017e0 97ffffaa b9001fe0,"        sum = sumOfDigits(num);
"
837dfc09 7f40,b9401fe0 7100241f 5400026c,"        if (sum < 10) {
"
8b45fc 0fafc0 89c2 8b45f4 39c2 7516,b9401fe0 1b007c01 b94017e0 6b00003f 540000e1,"                if ((sum * sum) == num) {
"
8b45f4 89c6 bf25204000 b800000000 e8bafdffff eb14,b94017e0 2a0003e1 90000000 91244000 97ffff56 14000006,"                        printf(""%d is a magic number\n"", num);
"
8b45f4 89c6 bf3b204000 b800000000 e8a4fdffff,b94017e0 2a0003e1 90000000 9124a000 97ffff50,"                        printf(""%d is not a magic number\n"", num);
"
b800000000 eb4c,52800000 14000016,"                return 0;
"
8b45fc 89c7 e8fffeffff 8945f8,b9401fe0 97ffffb5 b9001be0,"        rev = reverse(sum);//calling reverse function
"
8b45fc 0faf45f8 89c2 8b45f4 39c2 7516,b9401fe1 b9401be0 1b007c21 b94017e0 6b00003f 540000e1,"        if ((sum * rev) == num) {
"
8b45f4 89c6 bf25204000 b800000000 e86cfdffff eb14,b94017e0 2a0003e1 90000000 91244000 97ffff40 14000006,"                printf(""%d is a magic number\n"", num);
"
8b45f4 89c6 bf3b204000 b800000000 e856fdffff,b94017e0 2a0003e1 90000000 9124a000 97ffff3a,"                printf(""%d is not a magic number\n"", num);
"
b800000000,52800000,"        return 0;
"
c9 c3 662e0f1f840000000000 0f1f440000,a8c27bfd d65f03c0,"}
"
55 4889e5 48897de8,d10083ff f90007e0,"int stringLength(char * word) {
"
c745fc00000000,b9001fff,"    int count = 0;
"
eb04 8b45fc 4863d0 488b45e8 4801d0 0fb600 84c0 75e8,14000004 b9801fe0 f94007e1 8b000020 39400000 7100001f 54ffff01,"    while (word[count] != '\0') {
"
8345fc01,b9401fe0 11000400 b9001fe0,"      count++;
"
8b45fc,b9401fe0,"    return (count);
"
5d c3,910083ff d65f03c0,"}
"
55 4889e5 4883ec70,a9b87bfd 910003fd,"int main() {
"
c745fc00000000,b9007fff,"  int   index = 0;
"
bf08204000 b800000000 e8aefeffff,90000000 911dc000 97ffffa5,"  printf(""Please enter a word to get its length (< 100 characters): "");
"
488d4590 4889c6 bf43204000 b800000000 e8a8feffff,910063e0 aa0003e1 90000000 911ec000 97ffff9c,"  scanf(""%s"", word);
"
488d4590 4889c7 e892ffffff 89c2 488d4590 4889c6 bf46204000 b800000000 e874feffff,910063e0 97ffffe4 2a0003e1 910063e0 2a0103e2 aa0003e1 90000000 911ee000 97ffff97,"  printf(""\""%s\"" has a length of %d\n"", word, stringLength(word));
"
b800000000,52800000,"  return (0);
"
c9 c3 662e0f1f840000000000 0f1f00,a8c87bfd d65f03c0,}
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
c745fc05000000,528000a0 b9001fe0,"    int a= 5, b, c;
"
8b45fc 8d5001 8955fc 8345fc01 8b55fc 01d0 8945f8,b9401fe0 11000401 b9001fe1 b9401fe1 11000421 b9001fe1 b9401fe1 0b000020 b9001be0,"    b = a++ + ++a;  //Right to left
"
8345fc01 8b45fc 8d5001 8955fc 8b55fc 01d0 8945f4,b9401fe0 11000400 b9001fe0 b9401fe0 11000401 b9001fe1 b9401fe1 0b000020 b90017e0,"    c = ++a + a++;  //Right to left
"
8b55f4 8b45f8 89c6 bf08204000 b800000000 e8bafeffff,b94017e2 b9401be1 90000000 911c4000 97ffff9c,"    printf(""Value of b = %d\n Value of c = %d\n"", b,c);
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f00,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf08204000 e8e8feffff,90000000 911fc000 97ffffb2,"  printf(""Enter the number of rows in pyramid of stars you wish to see\n"");
"
488d45f0 4889c6 bf45204000 b800000000 e8e2feffff,910043e0 aa0003e1 90000000 9120c000 97ffffb1,"  scanf(""%d"", &n);
"
8b45f0 8945f4,b94013e0 b90017e0,"  s = n;
"
c745fc01000000 eb52 8345fc01 8b45f0 3945fc 7ea6,52800020 b9001fe0 14000022 b9401fe0 11000400 b9001fe0 b94013e0 b9401fe1 6b00003f 54fffb8d,"  for (row = 1; row <= n; row++)  // Loop to print rows
"
c745f801000000 eb0e 8345f801 8b45f8 3b45f4 7cea,52800020 b9001be0 14000006 b9401be0 11000400 b9001be0 b9401be1 b94017e0 6b00003f 54ffff0b,"    for (c = 1; c < s; c++)  // Loop to print spaces in a row
"
bf20000000 e8a0feffff,52800400 97ffffab,"      printf("" "");
"
836df401,b94017e0 51000400 b90017e0,"    s--;
"
c745f801000000 eb0e 8345f801 8b45fc 01c0 3945f8 7ce8,52800020 b9001be0 14000006 b9401be0 11000400 b9001be0 b9401fe0 531f7800 b9401be1 6b00003f 54fffeeb,"    for (c = 1; c <= 2*row - 1; c++) // Loop to print stars in a row
"
bf2a000000 e87dfeffff,52800540 97ffff9c,"      printf(""*"");
"
bf0a000000 e865feffff,52800140 97ffff92,"    printf(""\n"");
"
b800000000,52800000,"  return 0;
"
c9 c3 6690,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec20,a9bd7bfd 910003fd,"int main() {
"
8b05c42e0000 4898 48c1e002 4889c7 e8befeffff 488945f0,d0000080 9101a000 b9400000 93407c00 d37ef400 97ffff8f f90013e0,"    task *taskList = malloc(sizeof(int)*CAPACITY);
"
bf08204000 e890feffff,b0000000 91024000 97ffff9b,"    printf(""\tIn this program the greater the priority value of the task, the higher is the priority of the task\n"");
"
c745fc00000000 eb0e 8345fc01 837dfc6d 7eec,b9002fff 14000006 b9402fe0 11000400 b9002fe0 b9402fe0 7101b41f 54ffff2d,"    for(int i = 0; i < 110; ++i)
"
bf2d000000 e86dfeffff,528005a0 97ffffa7,"            printf(""-"");
"
bf0a000000 e859feffff,52800140 97ffff9f,"    printf(""\n"");
"
bf6c204000 e85ffeffff,b0000000 9103e000 97ffff8c,"        printf(""1...Enter a new task\n"");
"
bf88204000 e855feffff,b0000000 91044000 97ffff89,"        printf(""2...Remove highest priority task\n"");
"
bfb0204000 e84bfeffff,b0000000 9104e000 97ffff86,"        printf(""3...Show highest priority task\n"");
"
bfcf204000 e841feffff,b0000000 91056000 97ffff83,"        printf(""4...Exit\n"");
"
bfd8204000 e837feffff,b0000000 9105a000 97ffff80,"        printf(""Enter you option below:\n"");
"
bff0204000 b800000000 e838feffff 488d45e4 4889c6 bff4204000 b800000000 e852feffff,b0000000 91060000 97ffff89 910053e0 aa0003e1 b0000000 91062000 97ffff80,"        printf(""-> ""); scanf(""%d"", &op);
"
bf0a000000 e8f8fdffff,52800140 97ffff86,"        printf(""\n"");
"
8b45e4 83f804 0f8438010000 83f804 0f8f23010000 83f803 0f84d6000000 83f803 0f8f11010000 83f801 740a 83f802 747f e902010000,b94017e0 7100101f 540009a0 7100101f 540008ec 71000c1f 54000680 71000c1f 5400086c 7100041f 54000080 7100081f 540003a0 1400003e,"        switch(op) {
"
bff7204000 e8c8fdffff,b0000000 91064000 97ffff65,"                printf(""Enter the task ID:\n"");
"
bff0204000 b800000000 e8c9fdffff 488d45e8 4889c6 bff4204000 b800000000 e8e3fdffff,b0000000 91060000 97ffff6e 910063e0 aa0003e1 b0000000 91062000 97ffff65,"                printf(""-> ""); scanf(""%d"", &task.id);
"
bf0a214000 e899fdffff,b0000000 9106a000 97ffff5a,"                printf(""Enter the task Priority:\n"");
"
bff0204000 b800000000 e89afdffff 488d45e8 4883c004 4889c6 bff4204000 b800000000 e8b0fdffff,b0000000 91060000 97ffff63 910063e0 91001000 aa0003e1 b0000000 91062000 97ffff59,"                printf(""-> ""); scanf(""%d"", &task.priority);
"
488b55f0 488b45e8 4889d6 4889c7 e83e020000,f94013e1 f9400fe0 9400009b,"                addTask(task, taskList);
"
e995000000,14000028,"            break;
"
488b45f0 4889c7 e882020000 488945e8,f94013e0 940000b3 f9000fe0,"                task = poll(taskList);
"
bf23214000 e83efdffff,b0000000 91072000 97ffff47,"                printf(""Element Processed is:\n"");
"
8b45e8 89c6 bf39214000 b800000000 e83afdffff,b9401be0 2a0003e1 b0000000 91078000 97ffff4e,"                printf(""ID: %d\n"", task.id);
"
8b45ec 89c6 bf41214000 b800000000 e826fdffff,b9401fe0 2a0003e1 b0000000 9107a000 97ffff49,"                printf(""Priority: %d\n"", task.priority);
"
eb51,14000017,"            break;
"
488b45f0 4889c7 e8b5020000 488945e8,f94013e0 940000c9 f9000fe0,"                task = peek(taskList);
"
bf50214000 e8fafcffff,b0000000 9107e000 97ffff36,"                printf(""Element Ready to be Processed first is:\n"");
"
8b45e8 89c6 bf39214000 b800000000 e8f6fcffff,b9401be0 2a0003e1 b0000000 91078000 97ffff3d,"                printf(""ID: %d\n"", task.id);
"
8b45ec 89c6 bf41214000 b800000000 e8e2fcffff,b9401fe0 2a0003e1 b0000000 9107a000 97ffff38,"                printf(""Priority: %d\n"", task.priority);
"
eb0d,14000006,"            break;
"
bf78214000 e8c6fcffff,b0000000 91088000 97ffff28,"                printf(""Invalid option entered, please try again !\n\n"");
"
eb01,14000002,"            break;
"
90,d503201f,"            break;
"
c745f800000000 eb0e 8345f801 837df863 7eec,b9002bff 14000006 b9402be0 11000400 b9002be0 b9402be0 71018c1f 54ffff2d,"        for(int i = 0; i < 100; ++i)
"
bf2d000000 e8a0fcffff,528005a0 97ffff32,"            printf(""-"");
"
bf0a000000 e88cfcffff,52800140 97ffff2a,"        printf(""\n"");
"
8b45e4 83f804 0f8527feffff,b94017e0 7100101f 54fff121,"    } while(op != 4);
"
488b45f0 4889c7 e864fcffff,f94013e0 97ffff19,"    free(taskList);
"
b800000000,52800000,"    return 0;
"
c9 c3,a8c37bfd d65f03c0,"}
"
55 4889e5 53 4883ec28 48897dd8,a9bc7bfd 910003fd f9000bf3 f90017e0,"void heapifyDown(task* taskList) {
"
c745ec00000000,b9003fff,"    int index = 0;
"
8b45ec 89c7 e80a040000 8945e8,b9403fe0 9400013d b9003be0,"    int greaterChildIndex = getLeftChildIndex(index);
"
e996000000 8b45ec 89c7 e83e030000 84c0 0f8558ffffff,14000026 b9403fe0 94000106 12001c00 7100001f 54fffae1,"    while(hasLeftChild(index)) {
"
8b45ec 89c7 e8b0030000 84c0 743d 488b55d8 8b45ec 4889d6 89c7 e821030000 48c1f820 89c3 488b55d8 8b45ec 4889d6 89c7 e839030000 48c1f820 39c3 7e0d,b9403fe0 9400011d 12001c00 7100001f 540001e0 f94017e1 b9403fe0 940000f3 9360fc00 2a0003f3 f94017e1 b9403fe0 940000fb 9360fc00 6b00027f 5400008d,"        if(hasRightChild(index) && rightChild(index, taskList).priority > leftChild(index, taskList).priority) {
"
8b45ec 89c7 e8cb030000 8945e8,b9403fe0 94000130 b9003be0,"            greaterChildIndex = getRightChildIndex(index);
"
8b45ec 4898 488d14c500000000 488b45d8 4801d0 8b5004 8b45e8 4898 488d0cc500000000 488b45d8 4801c8 8b4004 39c2 7f2d,b9803fe0 d37df000 f94017e1 8b000020 b9400401 b9803be0 d37df000 f94017e2 8b000040 b9400400 6b00003f 540001ac,"        if(taskList[index].priority > taskList[greaterChildIndex].priority) {
"
488b55d8 8b4de8 8b45ec 89ce 89c7 e80b020000,f94017e2 b9403be1 b9403fe0 940000ae,"            swap(index, greaterChildIndex, taskList);
"
8b45e8 8945ec,b9403be0 b9003fe0,"        index = greaterChildIndex;
"
eb01 90 488b5df8 c9 c3,14000002 d503201f f9400bf3 a8c47bfd d65f03c0,"}
"
90,d503201f,"            break;
"
55 4889e5 4883ec20 48897de8,a9bd7bfd 910003fd f9000fe0,"void heapifyUp(task* taskList) {
"
8b05b32b0000 83e801 8945fc,d0000080 9101c000 b9400000 51000400 b9002fe0,"    int index = size - 1;
"
eb29 8b45fc 89c7 e89f020000 84c0 7432 488b55e8 8b45fc 4889d6 89c7 e8fd010000 48c1f820 89c1 8b45fc 4898 488d14c500000000 488b45e8 4801d0 8b4004 39c1 7c97,14000009 b9402fe0 940000d2 12001c00 7100001f 540001a0 f9400fe1 b9402fe0 940000a5 9360fc00 2a0003e2 b9802fe0 d37df000 f9400fe1 8b000020 b9400400 6b00005f 54fffd0b,"    while(hasParent(index) && parent(index, taskList).priority < taskList[index].priority) {
"
8b45fc 89c7 e84e030000 89c1 488b55e8 8b45fc 89c6 89cf e8b3010000,b9402fe0 9400010e f9400fe2 b9402fe1 94000093,"        swap(getParentIndex(index), index, taskList);
"
8b45fc 89c7 e832030000 8945fc,b9402fe0 94000109 b9002fe0,"        index = getParentIndex(index);
"
90 c9 c3,d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10 48897df8 488975f0,a9be7bfd 910003fd f9000fe0 f9000be1,"void addTask(task t, task* taskList) {
"
488d45f0 4889c7 e8e3000000,910043e0 9400004e,"    ensureExtraCapacity(&taskList);
"
488b45f0 8b15192b0000 4863d2 48c1e203 4801c2 488b45f8 488902,f9400be1 d0000080 9101c000 b9400000 93407c00 d37df000 8b000020 f9400fe1 f9000001,"    taskList[size] = t;
"
8b05022b0000 83c001 8905f92a0000,d0000080 9101c000 b9400000 11000401 d0000080 9101c000 b9000001,"    ++size;
"
488b45f0 4889c7 e828ffffff,f9400be0 97ffffc4,"    heapifyUp(taskList);
"
90 c9 c3,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec20 48897de8,a9bd7bfd 910003fd f9000fe0,"task poll(task *taskList) {
"
8b05d82a0000 85c0 7514,d0000080 9101c000 b9400000 7100001f 540000c1,"    if(!size) {
"
bfa4214000 e8aafaffff,b0000000 91094000 97fffe8e,"        printf(""Error !\n"");
"
bf00000000 e8f0faffff,52800000 97fffe74,"        exit(0);
"
488b45e8 488b00 488945f8,f9400fe0 f9400000 f90017e0,"    task t = taskList[0];
"
8b05af2a0000 4898 48c1e003 488d50f8 488b45e8 4801c2 488b45e8 488b12 488910,d0000080 9101c000 b9400000 93407c00 d37df000 d1002000 f9400fe1 8b000021 f9400fe0 f9400021 f9000001,"    taskList[0] = taskList[size-1];
"
8b058e2a0000 83e801 8905852a0000,d0000080 9101c000 b9400000 51000401 d0000080 9101c000 b9000001,"    --size;
"
488b45e8 4889c7 e8dcfdffff,f9400fe0 97ffff64,"    heapifyDown(taskList);
"
488b45f8,f94017e0,"    return t;
"
c9 c3,a8c37bfd d65f03c0,"}
"
55 4889e5 4883ec10 48897df8,a9be7bfd 910003fd f9000fe0,"task peek(task *taskList) {
"
8b05612a0000 85c0 7514,d0000080 9101c000 b9400000 7100001f 540000c1,"    if(!size) {
"
bfa4214000 e833faffff,b0000000 91094000 97fffe67,"        printf(""Error !\n"");
"
bf00000000 e879faffff,52800000 97fffe4d,"        exit(0);
"
488b45f8 488b00,f9400fe0 f9400000,"    return taskList[0];
"
c9 c3,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10 48897df8,a9be7bfd 910003fd f9000fe0,"void ensureExtraCapacity(task** taskList) {
"
8b05262a0000 01c0 4863d0 4869d256555555 48c1ea20 c1f81f 29c2 8b05132a0000 39c2 7d30,d0000080 9101a000 b9400000 531f7800 528aaac1 72aaaaa1 9b217c01 d360fc21 131f7c00 4b000021 d0000080 9101c000 b9400000 6b00003f 5400028a,"    if(size > 2*CAPACITY/3)
"
8b05012a0000 01c0 8905f9290000 8b05f3290000 4863d0 488b45f8 488b00 4889d6 4889c7 e8f6f9ffff 488b55f8 488902,f9400fe0 f9400002 d0000080 9101a000 b9400000 531f7801 d0000080 9101a000 b9000001 d0000080 9101a000 b9400000 93407c00 aa0003e1 aa0203e0 97fffe33 aa0003e1 f9400fe0 f9000001,"        *taskList = realloc(*taskList,CAPACITY*=2);
"
90 c9 c3,d503201f a8c27bfd d65f03c0,"}
"
55 4889e5 897dec 8975e8 488955e0,d10083ff b9000fe0 b9000be1 f90003e2,"void swap(int i, int j, task* taskList) {
"
8b45ec 4898 488d14c500000000 488b45e0 4801d0 488b00 488945f8,b9800fe0 d37df000 f94003e1 8b000020 f9400000 f9000fe0,"    task temp = taskList[i];
"
8b45e8 4898 488d14c500000000 488b45e0 4801d0 8b55ec 4863d2 488d0cd500000000 488b55e0 4801ca 488b00 488902,b9800be0 d37df000 f94003e1 8b000021 b9800fe0 d37df000 f94003e2 8b000040 f9400021 f9000001,"    taskList[i] = taskList[j];
"
8b45e8 4898 488d14c500000000 488b45e0 4801c2 488b45f8 488902,b9800be0 d37df000 f94003e1 8b000020 f9400fe1 f9000001,"    taskList[j] = temp;
"
90 5d c3,d503201f 910083ff d65f03c0,"}
"
55 4889e5 4883ec10 897dfc 488975f0,a9be7bfd 910003fd b9001fe0 f9000be1,"task parent(int i, task* taskList) {
"
8b45fc 89c7 e8fa000000 4898 488d14c500000000 488b45f0 4801d0 488b00,b9401fe0 94000056 93407c00 d37df000 f9400be1 8b000020 f9400000,"    return taskList[getParentIndex(i)];
"
c9 c3,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10 897dfc 488975f0,a9be7bfd 910003fd b9001fe0 f9000be1,"task rightChild(int i, task* taskList) {
"
8b45fc 89c7 e8ba000000 4898 488d14c500000000 488b45f0 4801d0 488b00,b9401fe0 94000042 93407c00 d37df000 f9400be1 8b000020 f9400000,"    return taskList[getRightChildIndex(i)];
"
c9 c3,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10 897dfc 488975f0,a9be7bfd 910003fd b9001fe0 f9000be1,"task leftChild(int i, task* taskList) {
"
8b45fc 89c7 e87a000000 4898 488d14c500000000 488b45f0 4801d0 488b00,b9401fe0 9400002e 93407c00 d37df000 f9400be1 8b000020 f9400000,"    return taskList[getLeftChildIndex(i)];
"
c9 c3,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10 897dfc,a9be7bfd 910003fd b9001fe0,"bool hasParent(int i) {
"
8b45fc 89c7 e871000000 f7d0 c1e81f,b9401fe0 94000030 2a2003e0 531f7c00 12001c00,"    return getParentIndex(i) >= 0;
"
c9 c3,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10 897dfc,a9be7bfd 910003fd b9001fe0,"bool hasRightChild(int i) {
"
8b45fc 89c7 e844000000 89c2 8b05a0280000 39c2 0f9cc0,b9401fe0 9400001f 2a0003e1 d0000080 9101c000 b9400000 6b00003f 1a9fa7e0 12001c00,"    return getRightChildIndex(i) < size;
"
c9 c3,a8c27bfd d65f03c0,"}
"
55 4889e5 4883ec10 897dfc,a9be7bfd 910003fd b9001fe0,"bool hasLeftChild(int i) {
"
8b45fc 89c7 e80f000000 89c2 8b057c280000 39c2 0f9cc0,b9401fe0 9400000a 2a0003e1 d0000080 9101c000 b9400000 6b00003f 1a9fa7e0 12001c00,"    return getLeftChildIndex(i) < size;
"
c9 c3,a8c27bfd d65f03c0,"}
"
55 4889e5 897dfc,d10043ff b9000fe0,"int getLeftChildIndex(int i) {
"
8b45fc 01c0 83c001,b9400fe0 531f7800 11000400,"    return 2*i + 1;
"
5d c3,910043ff d65f03c0,"}
"
55 4889e5 897dfc,d10043ff b9000fe0,"int getRightChildIndex(int i) {
"
8b45fc 83c001 01c0,b9400fe0 11000400 531f7800,"    return 2*i + 2;
"
5d c3,910043ff d65f03c0,"}
"
55 4889e5 897dfc,d10043ff b9000fe0,"int getParentIndex(int i) {
"
8b45fc 83e801 89c2 c1ea1f 01d0 d1f8,b9400fe0 51000400 531f7c01 0b000020 13017c00,"    return (i-1)/2;
"
5d c3 662e0f1f840000000000 90,910043ff d65f03c0,}
55 4889e5 4883ec10,a9be7bfd 910003fd,"void main(){
"
bf00010000 e8f8feffff 488945f8,d2802000 97ffffab f9000fe0,"	char *ptr = malloc(SIZE);
"
488b45f8 b904204000 ba10204000 be00010000 4889c7 b800000000 e8c4feffff,90000000 911d8003 90000000 911dc002 d2802001 f9400fe0 97ffff9f,"	snprintf(ptr , SIZE , ""data : %s "" , ""hello world"");
"
488b45f8 4889c6 bf1b204000 b800000000 e89efeffff,f9400fe1 90000000 911e0000 97ffffab,"	printf(""%s"",ptr);
"
90 c9 c3 662e0f1f840000000000 90,d503201f a8c27bfd d65f03c0,}
55 4889e5 4883ec10,a9be7bfd 910003fd,"{
"
bf04204000 e8d8feffff,90000000 911f2000 97ffffb2,"    printf(""Enter any 3 numbers\n"");
"
488d4df0 488d55f4 488d45f8 4889c6 bf18204000 b800000000 e8dafeffff,910043e2 910053e1 910063e0 aa0203e3 aa0103e2 aa0003e1 90000000 911f8000 97ffffad,"    scanf(""%f%f%f"",&a,&b,&c);
"
f30f1045f8 f30f104df4 0f2fc1 761d f30f1045f8 f30f104df0 0f2fc1 7607 f30f1045f8 eb22 f30f1045f0 eb1b f30f1045f4 f30f104df0 0f2fc1 7607 f30f1045f4 eb05 f30f1045f0 f30f1145fc,bd401be1 bd4017e0 1e202030 5400004c 1400000a bd401be1 bd4013e0 1e202030 5400004c 14000003 bd401be0 1400000b bd4013e0 14000009 bd4017e1 bd4013e0 1e202030 5400004c 14000003 bd4017e0 14000002 bd4013e0 bd001fe0,"    large = a>b? (a>c?a:c): (b>c?b:c);
"
660fefd2 f30f5a55fc 66480f7ed0 66480f6ec0 bf1f204000 b801000000 e85cfeffff,bd401fe0 1e22c000 90000000 911fa000 97ffff95,"    printf(""The larger no is :%f\n"", large);
"
b800000000,52800000,"    return 0;
"
c9 c3 0f1f440000,a8c27bfd d65f03c0,"}
"
55 4889e5 48897de8 488975e0,d10083ff f90007e0 f90003e1,"void swap(int * xp, int * yp) {
"
488b45e8 8b00 8945fc,f94007e0 b9400000 b9001fe0,"  int temp = * xp;
"
488b45e0 8b10 488b45e8 8910,f94003e0 b9400001 f94007e0 b9000001,"  * xp = * yp;
"
488b45e0 8b55fc 8910,f94003e0 b9401fe1 b9000001,"  * yp = temp;
"
90 5d c3,d503201f 910083ff d65f03c0,"}
"
55 4889e5 4883ec20 48897de8 8975e4,a9bd7bfd 910003fd f9000fe0 b90017e1,"void selectionSort(int arr[], int n) {
"
c745fc00000000 e98a000000 8345fc01 8b45e4 83e801 3945fc 0f8c67ffffff,b9002fff 1400002a b9402fe0 11000400 b9002fe0 b94017e0 51000400 b9402fe1 6b00003f 54fffa6b,"  for (i = 0; i < n - 1; i++) {
"
8b45fc 8945f4,b9402fe0 b90027e0,"    min_idx = i;
"
8b45fc 83c001 8945f8 eb3a 8345f801 8b45f8 3b45e4 7cbe,b9402fe0 11000400 b9002be0 14000012 b9402be0 11000400 b9002be0 b9402be1 b94017e0 6b00003f 54fffd8b,"    for (j = i + 1; j < n; j++)
"
8b45f8 4898 488d148500000000 488b45e8 4801d0 8b10 8b45f4 4898 488d0c8500000000 488b45e8 4801c8 8b00 39c2 7d06,b9802be0 d37ef400 f9400fe1 8b000020 b9400001 b98027e0 d37ef400 f9400fe2 8b000040 b9400000 6b00003f 5400006a,"      if (arr[j] < arr[min_idx])
"
8b45f8 8945f4,b9402be0 b90027e0,"        min_idx = j;
"
8b45fc 4898 488d148500000000 488b45e8 4801c2 8b45f4 4898 488d0c8500000000 488b45e8 4801c8 4889d6 4889c7 e832ffffff,b98027e0 d37ef400 f9400fe1 8b000022 b9802fe0 d37ef400 f9400fe1 8b000020 aa0003e1 aa0203e0 97ffffc5,"    swap( & arr[min_idx], & arr[i]);
"
90 90 c9 c3,d503201f d503201f a8c37bfd d65f03c0,"}
"
55 4889e5 4157 4156 4155 4154 53 4883ec28 4889e0 4889c3,a9b87bfd 910003fd a90153f3 a9025bf5 a90363f7 a9046bf9 f9002bfb 910003e0 aa0003f3,"int main() {
"
bf04204000 b800000000 e8effdffff,90000000 9125e000 97ffff67,"  printf(""Enter the number of elements "");
"
488d45b4 4889c6 bf22204000 b800000000 e8e9fdffff,910193a0 aa0003e1 90000000 91266000 97ffff5e,"  scanf(""%d"",&n);
"
8b45b4 4863d0 4883ea01 488955c0 4863d0 4989d6 41bf00000000 4863d0 4989d4 41bd00000000 4898 488d148500000000 b810000000 4883e801 4801d0 b910000000 ba00000000 48f7f1 486bc010 4829c4 4889e0 4883c003 48c1e802 48c1e002 488945b8,b94067a0 93407c01 d1000421 f9003ba1 93407c01 aa0103fa d280001b d37bff41 d37beb77 aa170037 d37beb56 93407c01 aa0103f8 d2800019 d37bff01 d37beb35 aa150035 d37beb14 93407c00 d37ef400 91003c00 d344fc00 d37cec00 cb2063ff 910003e0 91000c00 d342fc00 d37ef400 f90037a0,"  int a[n]; //array of n integers to be sorted
"
bf25204000 b800000000 e867fdffff,90000000 91268000 97ffff42,"  printf(""Enter the elements "");
"
c745cc00000000 eb2a 8345cc01 8b45b4 3945cc 7cce,b9007fbf 1400000c b9407fa0 11000400 b9007fa0 b94067a0 b9407fa1 6b00003f 54fffe4b,"  for (i = 0; i < n; i++)
"
8b45cc 4898 488d148500000000 488b45b8 4801d0 4889c6 bf22204000 b800000000 e848fdffff,b9807fa0 d37ef400 f94037a1 8b000020 aa0003e1 90000000 91266000 97ffff34,"    scanf(""%d"",&a[i]);
"
8b55b4 488b45b8 89d6 4889c7 e84efeffff,b94067a0 2a0003e1 f94037a0 97ffff83,"  selectionSort(a, n); //calling the function to sort the array
"
c745cc00000000 eb22 8345cc01 8b45b4 3945cc 7cd6,b9007fbf 1400000b b9407fa0 11000400 b9007fa0 b94067a0 b9407fa1 6b00003f 54fffe6b,"  for (i = 0; i < n; i++)
"
488b45b8 8b55cc 4863d2 8b0490 89c6 bf39204000 b800000000 e8f4fcffff,f94037a0 b9807fa1 b8617800 2a0003e1 90000000 9126e000 97ffff24,"    printf(""%d "", a[i]);
"
b800000000 4889dc,52800000 9100027f,"  return 0;
"
488d65d8 5b 415c 415d 415e 415f 5d c3 90,910003bf a94153f3 a9425bf5 a94363f7 a9446bf9 f9402bfb a8c87bfd d65f03c0,"}
"
